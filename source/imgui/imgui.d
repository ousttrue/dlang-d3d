// This source code was generated by regenerator
module imgui.imgui;
import imgui.vcruntime;
import imgui.vadefs;
enum IMGUI_VERSION = "1.75 WIP";
enum IMGUI_VERSION_NUM = 17401;
enum IM_UNICODE_CODEPOINT_MAX = 0xFFFF;
enum IM_UNICODE_CODEPOINT_INVALID = 0xFFFD;
enum IMGUI_PAYLOAD_TYPE_COLOR_3F = "_COL3F";
enum IMGUI_PAYLOAD_TYPE_COLOR_4F = "_COL4F";
enum IM_COL32_R_SHIFT = 0;
enum IM_COL32_G_SHIFT = 8;
enum IM_COL32_B_SHIFT = 16;
enum IM_COL32_A_SHIFT = 24;
enum IM_COL32_A_MASK = 0xFF000000;
enum ImDrawCallback_ResetRenderState = cast( ImDrawCallback ) ( - 1 );
struct ImDrawChannel
{
    void* _CmdBuffer;
    void* _IdxBuffer;
}
struct ImDrawCmd
{
    uint ElemCount;
    ImVec4 ClipRect;
    ImTextureID TextureId;
    uint VtxOffset;
    uint IdxOffset;
    ImDrawCallback UserCallback;
    void* UserCallbackData;
}
struct ImVec4
{
    float x;
    float y;
    float z;
    float w;
}
alias ImTextureID = void*;
alias ImDrawCallback = void*;
struct ImDrawData
{
    bool Valid;
    ImDrawList** CmdLists;
    int CmdListsCount;
    int TotalIdxCount;
    int TotalVtxCount;
    ImVec2 DisplayPos;
    ImVec2 DisplaySize;
    ImVec2 FramebufferScale;
}
struct ImDrawList
{
    void* CmdBuffer;
    void* IdxBuffer;
    void* VtxBuffer;
    ImDrawListFlags Flags;
    const ImDrawListSharedData* _Data;
    const char* _OwnerName;
    uint _VtxCurrentOffset;
    uint _VtxCurrentIdx;
    ImDrawVert* _VtxWritePtr;
    ImDrawIdx* _IdxWritePtr;
    void* _ClipRectStack;
    void* _TextureIdStack;
    void* _Path;
    ImDrawListSplitter _Splitter;
}
alias ImDrawListFlags = int;
struct ImDrawListSharedData;
struct ImDrawVert
{
    ImVec2 pos;
    ImVec2 uv;
    ImU32 col;
}
struct ImVec2
{
    float x;
    float y;
}
alias ImU32 = uint;
alias ImDrawIdx = ushort;
struct ImDrawListSplitter
{
    int _Current;
    int _Count;
    void* _Channels;
}
alias ImDrawCornerFlags = int;
struct ImFont
{
    void* IndexAdvanceX;
    float FallbackAdvanceX;
    float FontSize;
    void* IndexLookup;
    void* Glyphs;
    const ImFontGlyph* FallbackGlyph;
    ImVec2 DisplayOffset;
    ImFontAtlas* ContainerAtlas;
    const ImFontConfig* ConfigData;
    short ConfigDataCount;
    ImWchar FallbackChar;
    ImWchar EllipsisChar;
    float Scale;
    float Ascent;
    float Descent;
    int MetricsTotalSurface;
    bool DirtyLookupTables;
}
struct ImFontGlyph
{
    ImWchar Codepoint;
    float AdvanceX;
    float X0;
    float Y0;
    float X1;
    float Y1;
    float U0;
    float V0;
    float U1;
    float V1;
}
alias ImWchar = ushort;
struct ImFontAtlas
{
    bool Locked;
    ImFontAtlasFlags Flags;
    ImTextureID TexID;
    int TexDesiredWidth;
    int TexGlyphPadding;
    ubyte* TexPixelsAlpha8;
    uint* TexPixelsRGBA32;
    int TexWidth;
    int TexHeight;
    ImVec2 TexUvScale;
    ImVec2 TexUvWhitePixel;
    void* Fonts;
    void* CustomRects;
    void* ConfigData;
    int[1] CustomRectIds;
}
alias ImFontAtlasFlags = int;
struct ImFontConfig
{
    void* FontData;
    int FontDataSize;
    bool FontDataOwnedByAtlas;
    int FontNo;
    float SizePixels;
    int OversampleH;
    int OversampleV;
    bool PixelSnapH;
    ImVec2 GlyphExtraSpacing;
    ImVec2 GlyphOffset;
    const ImWchar* GlyphRanges;
    float GlyphMinAdvanceX;
    float GlyphMaxAdvanceX;
    bool MergeMode;
    uint RasterizerFlags;
    float RasterizerMultiply;
    ImWchar EllipsisChar;
    char[40] Name;
    ImFont* DstFont;
}
struct ImFontAtlasCustomRect
{
    uint ID;
    ushort Width;
    ushort Height;
    ushort X;
    ushort Y;
    float GlyphAdvanceX;
    ImVec2 GlyphOffset;
    ImFont* Font;
}
alias ImGuiMouseCursor = int;
struct ImFontGlyphRangesBuilder
{
    void* UsedChars;
}
struct ImColor
{
    ImVec4 Value;
}
struct ImGuiContext;
struct ImGuiIO
{
    ImGuiConfigFlags ConfigFlags;
    ImGuiBackendFlags BackendFlags;
    ImVec2 DisplaySize;
    float DeltaTime;
    float IniSavingRate;
    const char* IniFilename;
    const char* LogFilename;
    float MouseDoubleClickTime;
    float MouseDoubleClickMaxDist;
    float MouseDragThreshold;
    int[22] KeyMap;
    float KeyRepeatDelay;
    float KeyRepeatRate;
    void* UserData;
    ImFontAtlas* Fonts;
    float FontGlobalScale;
    bool FontAllowUserScaling;
    ImFont* FontDefault;
    ImVec2 DisplayFramebufferScale;
    bool MouseDrawCursor;
    bool ConfigMacOSXBehaviors;
    bool ConfigInputTextCursorBlink;
    bool ConfigWindowsResizeFromEdges;
    bool ConfigWindowsMoveFromTitleBarOnly;
    float ConfigWindowsMemoryCompactTimer;
    const char* BackendPlatformName;
    const char* BackendRendererName;
    void* BackendPlatformUserData;
    void* BackendRendererUserData;
    void* BackendLanguageUserData;
    void* GetClipboardTextFn;
    void* SetClipboardTextFn;
    void* ClipboardUserData;
    void* ImeSetInputScreenPosFn;
    void* ImeWindowHandle;
    void* RenderDrawListsFn;
    ImVec2 MousePos;
    bool[5] MouseDown;
    float MouseWheel;
    float MouseWheelH;
    bool KeyCtrl;
    bool KeyShift;
    bool KeyAlt;
    bool KeySuper;
    bool[512] KeysDown;
    float[21] NavInputs;
    bool WantCaptureMouse;
    bool WantCaptureKeyboard;
    bool WantTextInput;
    bool WantSetMousePos;
    bool WantSaveIniSettings;
    bool NavActive;
    bool NavVisible;
    float Framerate;
    int MetricsRenderVertices;
    int MetricsRenderIndices;
    int MetricsRenderWindows;
    int MetricsActiveWindows;
    int MetricsActiveAllocations;
    ImVec2 MouseDelta;
    ImVec2 MousePosPrev;
    ImVec2[5] MouseClickedPos;
    double[5] MouseClickedTime;
    bool[5] MouseClicked;
    bool[5] MouseDoubleClicked;
    bool[5] MouseReleased;
    bool[5] MouseDownOwned;
    bool[5] MouseDownWasDoubleClick;
    float[5] MouseDownDuration;
    float[5] MouseDownDurationPrev;
    ImVec2[5] MouseDragMaxDistanceAbs;
    float[5] MouseDragMaxDistanceSqr;
    float[512] KeysDownDuration;
    float[512] KeysDownDurationPrev;
    float[21] NavInputsDownDuration;
    float[21] NavInputsDownDurationPrev;
    void* InputQueueCharacters;
}
alias ImGuiConfigFlags = int;
alias ImGuiBackendFlags = int;
struct ImGuiInputTextCallbackData
{
    ImGuiInputTextFlags EventFlag;
    ImGuiInputTextFlags Flags;
    void* UserData;
    ImWchar EventChar;
    ImGuiKey EventKey;
    char* Buf;
    int BufTextLen;
    int BufSize;
    bool BufDirty;
    int CursorPos;
    int SelectionStart;
    int SelectionEnd;
}
alias ImGuiInputTextFlags = int;
alias ImGuiKey = int;
struct ImGuiListClipper
{
    float StartPosY;
    float ItemsHeight;
    int ItemsCount;
    int StepNo;
    int DisplayStart;
    int DisplayEnd;
}
struct ImGuiOnceUponAFrame
{
    int RefFrame;
}
struct ImGuiPayload
{
    void* Data;
    int DataSize;
    ImGuiID SourceId;
    ImGuiID SourceParentId;
    int DataFrameCount;
    char[33] DataType;
    bool Preview;
    bool Delivery;
}
alias ImGuiID = uint;
struct ImGuiSizeCallbackData
{
    void* UserData;
    ImVec2 Pos;
    ImVec2 CurrentSize;
    ImVec2 DesiredSize;
}
struct ImGuiStorage
{
    void* Data;
}
struct ImGuiStyle
{
    float Alpha;
    ImVec2 WindowPadding;
    float WindowRounding;
    float WindowBorderSize;
    ImVec2 WindowMinSize;
    ImVec2 WindowTitleAlign;
    ImGuiDir WindowMenuButtonPosition;
    float ChildRounding;
    float ChildBorderSize;
    float PopupRounding;
    float PopupBorderSize;
    ImVec2 FramePadding;
    float FrameRounding;
    float FrameBorderSize;
    ImVec2 ItemSpacing;
    ImVec2 ItemInnerSpacing;
    ImVec2 TouchExtraPadding;
    float IndentSpacing;
    float ColumnsMinSpacing;
    float ScrollbarSize;
    float ScrollbarRounding;
    float GrabMinSize;
    float GrabRounding;
    float TabRounding;
    float TabBorderSize;
    ImGuiDir ColorButtonPosition;
    ImVec2 ButtonTextAlign;
    ImVec2 SelectableTextAlign;
    ImVec2 DisplayWindowPadding;
    ImVec2 DisplaySafeAreaPadding;
    float MouseCursorScale;
    bool AntiAliasedLines;
    bool AntiAliasedFill;
    float CurveTessellationTol;
    ImVec4[48] Colors;
}
alias ImGuiDir = int;
struct ImGuiTextBuffer
{
    void* Buf;
}
struct ImGuiTextFilter
{
    char[256] InputBuf;
    void* Filters;
    int CountGrep;
}
alias ImGuiCol = int;
alias ImGuiCond = int;
alias ImGuiDataType = int;
alias ImGuiNavInput = int;
alias ImGuiMouseButton = int;
alias ImGuiStyleVar = int;
alias ImGuiColorEditFlags = int;
alias ImGuiComboFlags = int;
alias ImGuiDragDropFlags = int;
alias ImGuiFocusedFlags = int;
alias ImGuiHoveredFlags = int;
alias ImGuiSelectableFlags = int;
alias ImGuiTabBarFlags = int;
alias ImGuiTabItemFlags = int;
alias ImGuiTreeNodeFlags = int;
alias ImGuiWindowFlags = int;
alias ImGuiInputTextCallback = void*;
alias ImGuiSizeCallback = void*;
alias ImS8 = char;
alias ImU8 = ubyte;
alias ImS16 = short;
alias ImU16 = ushort;
alias ImS32 = int;
alias ImS64 = long;
alias ImU64 = ulong;
ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas);
void DestroyContext(ImGuiContext* ctx);
ImGuiContext* GetCurrentContext();
void SetCurrentContext(ImGuiContext* ctx);
bool DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);
ImGuiIO* GetIO();
ImGuiStyle* GetStyle();
void NewFrame();
void EndFrame();
void Render();
ImDrawData* GetDrawData();
void ShowDemoWindow(bool* p_open);
void ShowAboutWindow(bool* p_open);
void ShowMetricsWindow(bool* p_open);
void ShowStyleEditor(ImGuiStyle* _ref);
bool ShowStyleSelector(const char* label);
void ShowFontSelector(const char* label);
void ShowUserGuide();
char* GetVersion();
void StyleColorsDark(ImGuiStyle* dst);
void StyleColorsClassic(ImGuiStyle* dst);
void StyleColorsLight(ImGuiStyle* dst);
bool Begin(const char* name, bool* p_open, ImGuiWindowFlags flags);
void End();
bool BeginChild(const char* str_id, const ImVec2* size, bool border, ImGuiWindowFlags flags);
bool BeginChild(ImGuiID id, const ImVec2* size, bool border, ImGuiWindowFlags flags);
void EndChild();
bool IsWindowAppearing();
bool IsWindowCollapsed();
bool IsWindowFocused(ImGuiFocusedFlags flags);
bool IsWindowHovered(ImGuiHoveredFlags flags);
ImDrawList* GetWindowDrawList();
ImVec2 GetWindowPos();
ImVec2 GetWindowSize();
float GetWindowWidth();
float GetWindowHeight();
void SetNextWindowPos(const ImVec2* pos, ImGuiCond cond, const ImVec2* pivot);
void SetNextWindowSize(const ImVec2* size, ImGuiCond cond);
void SetNextWindowSizeConstraints(const ImVec2* size_min, const ImVec2* size_max, ImGuiSizeCallback custom_callback, void* custom_callback_data);
void SetNextWindowContentSize(const ImVec2* size);
void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);
void SetNextWindowFocus();
void SetNextWindowBgAlpha(float alpha);
void SetWindowPos(const ImVec2* pos, ImGuiCond cond);
void SetWindowSize(const ImVec2* size, ImGuiCond cond);
void SetWindowCollapsed(bool collapsed, ImGuiCond cond);
void SetWindowFocus();
void SetWindowFontScale(float scale);
void SetWindowPos(const char* name, const ImVec2* pos, ImGuiCond cond);
void SetWindowSize(const char* name, const ImVec2* size, ImGuiCond cond);
void SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond);
void SetWindowFocus(const char* name);
ImVec2 GetContentRegionMax();
ImVec2 GetContentRegionAvail();
ImVec2 GetWindowContentRegionMin();
ImVec2 GetWindowContentRegionMax();
float GetWindowContentRegionWidth();
float GetScrollX();
float GetScrollY();
float GetScrollMaxX();
float GetScrollMaxY();
void SetScrollX(float scroll_x);
void SetScrollY(float scroll_y);
void SetScrollHereX(float center_x_ratio);
void SetScrollHereY(float center_y_ratio);
void SetScrollFromPosX(float local_x, float center_x_ratio);
void SetScrollFromPosY(float local_y, float center_y_ratio);
void PushFont(ImFont* font);
void PopFont();
void PushStyleColor(ImGuiCol idx, ImU32 col);
void PushStyleColor(ImGuiCol idx, const ImVec4* col);
void PopStyleColor(int count);
void PushStyleVar(ImGuiStyleVar idx, float val);
void PushStyleVar(ImGuiStyleVar idx, const ImVec2* val);
void PopStyleVar(int count);
ImVec4* GetStyleColorVec4(ImGuiCol idx);
ImFont* GetFont();
float GetFontSize();
ImVec2 GetFontTexUvWhitePixel();
ImU32 GetColorU32(ImGuiCol idx, float alpha_mul);
ImU32 GetColorU32(const ImVec4* col);
ImU32 GetColorU32(ImU32 col);
void PushItemWidth(float item_width);
void PopItemWidth();
void SetNextItemWidth(float item_width);
float CalcItemWidth();
void PushTextWrapPos(float wrap_local_pos_x);
void PopTextWrapPos();
void PushAllowKeyboardFocus(bool allow_keyboard_focus);
void PopAllowKeyboardFocus();
void PushButtonRepeat(bool repeat);
void PopButtonRepeat();
void Separator();
void SameLine(float offset_from_start_x, float spacing);
void NewLine();
void Spacing();
void Dummy(const ImVec2* size);
void Indent(float indent_w);
void Unindent(float indent_w);
void BeginGroup();
void EndGroup();
ImVec2 GetCursorPos();
float GetCursorPosX();
float GetCursorPosY();
void SetCursorPos(const ImVec2* local_pos);
void SetCursorPosX(float local_x);
void SetCursorPosY(float local_y);
ImVec2 GetCursorStartPos();
ImVec2 GetCursorScreenPos();
void SetCursorScreenPos(const ImVec2* pos);
void AlignTextToFramePadding();
float GetTextLineHeight();
float GetTextLineHeightWithSpacing();
float GetFrameHeight();
float GetFrameHeightWithSpacing();
void PushID(const char* str_id);
void PushID(const char* str_id_begin, const char* str_id_end);
void PushID(const void* ptr_id);
void PushID(int int_id);
void PopID();
ImGuiID GetID(const char* str_id);
ImGuiID GetID(const char* str_id_begin, const char* str_id_end);
ImGuiID GetID(const void* ptr_id);
void TextUnformatted(const char* text, const char* text_end);
void Text(const char* fmt);
void TextV(const char* fmt, va_list args);
void TextColored(const ImVec4* col, const char* fmt);
void TextColoredV(const ImVec4* col, const char* fmt, va_list args);
void TextDisabled(const char* fmt);
void TextDisabledV(const char* fmt, va_list args);
void TextWrapped(const char* fmt);
void TextWrappedV(const char* fmt, va_list args);
void LabelText(const char* label, const char* fmt);
void LabelTextV(const char* label, const char* fmt, va_list args);
void BulletText(const char* fmt);
void BulletTextV(const char* fmt, va_list args);
bool Button(const char* label, const ImVec2* size);
bool SmallButton(const char* label);
bool InvisibleButton(const char* str_id, const ImVec2* size);
bool ArrowButton(const char* str_id, ImGuiDir dir);
void Image(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* tint_col, const ImVec4* border_col);
bool ImageButton(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, int frame_padding, const ImVec4* bg_col, const ImVec4* tint_col);
bool Checkbox(const char* label, bool* v);
bool CheckboxFlags(const char* label, uint* flags, uint flags_value);
bool RadioButton(const char* label, bool active);
bool RadioButton(const char* label, int* v, int v_button);
void ProgressBar(float fraction, const ImVec2* size_arg, const char* overlay);
void Bullet();
bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags);
void EndCombo();
bool Combo(const char* label, int* current_item, const char** items, int items_count, int popup_max_height_in_items);
bool Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items);
bool Combo(const char* label, int* current_item, void* items_getter, void* data, int items_count, int popup_max_height_in_items);
bool DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power);
bool DragFloat2(const char* label, float[2] v, float v_speed, float v_min, float v_max, const char* format, float power);
bool DragFloat3(const char* label, float[3] v, float v_speed, float v_min, float v_max, const char* format, float power);
bool DragFloat4(const char* label, float[4] v, float v_speed, float v_min, float v_max, const char* format, float power);
bool DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, float power);
bool DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format);
bool DragInt2(const char* label, int[2] v, float v_speed, int v_min, int v_max, const char* format);
bool DragInt3(const char* label, int[3] v, float v_speed, int v_min, int v_max, const char* format);
bool DragInt4(const char* label, int[4] v, float v_speed, int v_min, int v_max, const char* format);
bool DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max);
bool DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power);
bool DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power);
bool SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power);
bool SliderFloat2(const char* label, float[2] v, float v_min, float v_max, const char* format, float power);
bool SliderFloat3(const char* label, float[3] v, float v_min, float v_max, const char* format, float power);
bool SliderFloat4(const char* label, float[4] v, float v_min, float v_max, const char* format, float power);
bool SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format);
bool SliderInt(const char* label, int* v, int v_min, int v_max, const char* format);
bool SliderInt2(const char* label, int[2] v, int v_min, int v_max, const char* format);
bool SliderInt3(const char* label, int[3] v, int v_min, int v_max, const char* format);
bool SliderInt4(const char* label, int[4] v, int v_min, int v_max, const char* format);
bool SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power);
bool SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power);
bool VSliderFloat(const char* label, const ImVec2* size, float* v, float v_min, float v_max, const char* format, float power);
bool VSliderInt(const char* label, const ImVec2* size, int* v, int v_min, int v_max, const char* format);
bool VSliderScalar(const char* label, const ImVec2* size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power);
bool InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2* size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags);
bool InputFloat2(const char* label, float[2] v, const char* format, ImGuiInputTextFlags flags);
bool InputFloat3(const char* label, float[3] v, const char* format, ImGuiInputTextFlags flags);
bool InputFloat4(const char* label, float[4] v, const char* format, ImGuiInputTextFlags flags);
bool InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);
bool InputInt2(const char* label, int[2] v, ImGuiInputTextFlags flags);
bool InputInt3(const char* label, int[3] v, ImGuiInputTextFlags flags);
bool InputInt4(const char* label, int[4] v, ImGuiInputTextFlags flags);
bool InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags);
bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool ColorEdit3(const char* label, float[3] col, ImGuiColorEditFlags flags);
bool ColorEdit4(const char* label, float[4] col, ImGuiColorEditFlags flags);
bool ColorPicker3(const char* label, float[3] col, ImGuiColorEditFlags flags);
bool ColorPicker4(const char* label, float[4] col, ImGuiColorEditFlags flags, const float* ref_col);
bool ColorButton(const char* desc_id, const ImVec4* col, ImGuiColorEditFlags flags, ImVec2 size);
void SetColorEditOptions(ImGuiColorEditFlags flags);
bool TreeNode(const char* label);
bool TreeNode(const char* str_id, const char* fmt);
bool TreeNode(const void* ptr_id, const char* fmt);
bool TreeNodeV(const char* str_id, const char* fmt, va_list args);
bool TreeNodeV(const void* ptr_id, const char* fmt, va_list args);
bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags);
bool TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt);
bool TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt);
bool TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
bool TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
void TreePush(const char* str_id);
void TreePush(const void* ptr_id);
void TreePop();
float GetTreeNodeToLabelSpacing();
bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags);
bool CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags);
void SetNextItemOpen(bool is_open, ImGuiCond cond);
bool Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool ListBox(const char* label, int* current_item, const char** items, int items_count, int height_in_items);
bool ListBox(const char* label, int* current_item, void* items_getter, void* data, int items_count, int height_in_items);
bool ListBoxHeader(const char* label, const ImVec2* size);
bool ListBoxHeader(const char* label, int items_count, int height_in_items);
void ListBoxFooter();
void PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
void PlotLines(const char* label, void* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
void PlotHistogram(const char* label, void* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void Value(const char* prefix, bool b);
void Value(const char* prefix, int v);
void Value(const char* prefix, uint v);
void Value(const char* prefix, float v, const char* float_format);
bool BeginMenuBar();
void EndMenuBar();
bool BeginMainMenuBar();
void EndMainMenuBar();
bool BeginMenu(const char* label, bool enabled);
void EndMenu();
bool MenuItem(const char* label, const char* shortcut, bool selected, bool enabled);
bool MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled);
void BeginTooltip();
void EndTooltip();
void SetTooltip(const char* fmt);
void SetTooltipV(const char* fmt, va_list args);
void OpenPopup(const char* str_id);
bool BeginPopup(const char* str_id, ImGuiWindowFlags flags);
bool BeginPopupContextItem(const char* str_id, ImGuiMouseButton mouse_button);
bool BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mouse_button, bool also_over_items);
bool BeginPopupContextVoid(const char* str_id, ImGuiMouseButton mouse_button);
bool BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags);
void EndPopup();
bool OpenPopupOnItemClick(const char* str_id, ImGuiMouseButton mouse_button);
bool IsPopupOpen(const char* str_id);
void CloseCurrentPopup();
void Columns(int count, const char* id, bool border);
void NextColumn();
int GetColumnIndex();
float GetColumnWidth(int column_index);
void SetColumnWidth(int column_index, float width);
float GetColumnOffset(int column_index);
void SetColumnOffset(int column_index, float offset_x);
int GetColumnsCount();
bool BeginTabBar(const char* str_id, ImGuiTabBarFlags flags);
void EndTabBar();
bool BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags);
void EndTabItem();
void SetTabItemClosed(const char* tab_or_docked_window_label);
void LogToTTY(int auto_open_depth);
void LogToFile(int auto_open_depth, const char* filename);
void LogToClipboard(int auto_open_depth);
void LogFinish();
void LogButtons();
void LogText(const char* fmt);
bool BeginDragDropSource(ImGuiDragDropFlags flags);
bool SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond);
void EndDragDropSource();
bool BeginDragDropTarget();
ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags);
void EndDragDropTarget();
ImGuiPayload* GetDragDropPayload();
void PushClipRect(const ImVec2* clip_rect_min, const ImVec2* clip_rect_max, bool intersect_with_current_clip_rect);
void PopClipRect();
void SetItemDefaultFocus();
void SetKeyboardFocusHere(int offset);
bool IsItemHovered(ImGuiHoveredFlags flags);
bool IsItemActive();
bool IsItemFocused();
bool IsItemClicked(ImGuiMouseButton mouse_button);
bool IsItemVisible();
bool IsItemEdited();
bool IsItemActivated();
bool IsItemDeactivated();
bool IsItemDeactivatedAfterEdit();
bool IsItemToggledOpen();
bool IsAnyItemHovered();
bool IsAnyItemActive();
bool IsAnyItemFocused();
ImVec2 GetItemRectMin();
ImVec2 GetItemRectMax();
ImVec2 GetItemRectSize();
void SetItemAllowOverlap();
bool IsRectVisible(const ImVec2* size);
bool IsRectVisible(const ImVec2* rect_min, const ImVec2* rect_max);
double GetTime();
int GetFrameCount();
ImDrawList* GetBackgroundDrawList();
ImDrawList* GetForegroundDrawList();
ImDrawListSharedData* GetDrawListSharedData();
char* GetStyleColorName(ImGuiCol idx);
void SetStateStorage(ImGuiStorage* storage);
ImGuiStorage* GetStateStorage();
ImVec2 CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width);
void CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);
bool BeginChildFrame(ImGuiID id, const ImVec2* size, ImGuiWindowFlags flags);
void EndChildFrame();
ImVec4 ColorConvertU32ToFloat4(ImU32 _in);
ImU32 ColorConvertFloat4ToU32(const ImVec4* _in);
void ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);
void ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);
int GetKeyIndex(ImGuiKey imgui_key);
bool IsKeyDown(int user_key_index);
bool IsKeyPressed(int user_key_index, bool repeat);
bool IsKeyReleased(int user_key_index);
int GetKeyPressedAmount(int key_index, float repeat_delay, float rate);
void CaptureKeyboardFromApp(bool want_capture_keyboard_value);
bool IsMouseDown(ImGuiMouseButton button);
bool IsMouseClicked(ImGuiMouseButton button, bool repeat);
bool IsMouseReleased(ImGuiMouseButton button);
bool IsMouseDoubleClicked(ImGuiMouseButton button);
bool IsMouseHoveringRect(const ImVec2* r_min, const ImVec2* r_max, bool clip);
bool IsMousePosValid(const ImVec2* mouse_pos);
bool IsAnyMouseDown();
ImVec2 GetMousePos();
ImVec2 GetMousePosOnOpeningCurrentPopup();
bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold);
ImVec2 GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold);
void ResetMouseDragDelta(ImGuiMouseButton button);
ImGuiMouseCursor GetMouseCursor();
void SetMouseCursor(ImGuiMouseCursor cursor_type);
void CaptureMouseFromApp(bool want_capture_mouse_value);
char* GetClipboardText();
void SetClipboardText(const char* text);
void LoadIniSettingsFromDisk(const char* ini_filename);
void LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size);
void SaveIniSettingsToDisk(const char* ini_filename);
char* SaveIniSettingsToMemory(size_t* out_ini_size);
void SetAllocatorFunctions(void* alloc_func, void* free_func, void* user_data);
void* MemAlloc(size_t size);
void MemFree(void* ptr);
enum ImGuiWindowFlags_
{
    _None = 0x0,
    _NoTitleBar = 0x1,
    _NoResize = 0x2,
    _NoMove = 0x4,
    _NoScrollbar = 0x8,
    _NoScrollWithMouse = 0x10,
    _NoCollapse = 0x20,
    _AlwaysAutoResize = 0x40,
    _NoBackground = 0x80,
    _NoSavedSettings = 0x100,
    _NoMouseInputs = 0x200,
    _MenuBar = 0x400,
    _HorizontalScrollbar = 0x800,
    _NoFocusOnAppearing = 0x1000,
    _NoBringToFrontOnFocus = 0x2000,
    _AlwaysVerticalScrollbar = 0x4000,
    _AlwaysHorizontalScrollbar = 0x8000,
    _AlwaysUseWindowPadding = 0x10000,
    _NoNavInputs = 0x40000,
    _NoNavFocus = 0x80000,
    _UnsavedDocument = 0x100000,
    _NoNav = 0xc0000,
    _NoDecoration = 0x2b,
    _NoInputs = 0xc0200,
    _NavFlattened = 0x800000,
    _ChildWindow = 0x1000000,
    _Tooltip = 0x2000000,
    _Popup = 0x4000000,
    _Modal = 0x8000000,
    _ChildMenu = 0x10000000,
}
enum ImGuiInputTextFlags_
{
    _None = 0x0,
    _CharsDecimal = 0x1,
    _CharsHexadecimal = 0x2,
    _CharsUppercase = 0x4,
    _CharsNoBlank = 0x8,
    _AutoSelectAll = 0x10,
    _EnterReturnsTrue = 0x20,
    _CallbackCompletion = 0x40,
    _CallbackHistory = 0x80,
    _CallbackAlways = 0x100,
    _CallbackCharFilter = 0x200,
    _AllowTabInput = 0x400,
    _CtrlEnterForNewLine = 0x800,
    _NoHorizontalScroll = 0x1000,
    _AlwaysInsertMode = 0x2000,
    _ReadOnly = 0x4000,
    _Password = 0x8000,
    _NoUndoRedo = 0x10000,
    _CharsScientific = 0x20000,
    _CallbackResize = 0x40000,
    _Multiline = 0x100000,
    _NoMarkEdited = 0x200000,
}
enum ImGuiTreeNodeFlags_
{
    _None = 0x0,
    _Selected = 0x1,
    _Framed = 0x2,
    _AllowItemOverlap = 0x4,
    _NoTreePushOnOpen = 0x8,
    _NoAutoOpenOnLog = 0x10,
    _DefaultOpen = 0x20,
    _OpenOnDoubleClick = 0x40,
    _OpenOnArrow = 0x80,
    _Leaf = 0x100,
    _Bullet = 0x200,
    _FramePadding = 0x400,
    _SpanAvailWidth = 0x800,
    _SpanFullWidth = 0x1000,
    _NavLeftJumpsBackHere = 0x2000,
    _CollapsingHeader = 0x1a,
}
enum ImGuiSelectableFlags_
{
    _None = 0x0,
    _DontClosePopups = 0x1,
    _SpanAllColumns = 0x2,
    _AllowDoubleClick = 0x4,
    _Disabled = 0x8,
    _AllowItemOverlap = 0x10,
}
enum ImGuiComboFlags_
{
    _None = 0x0,
    _PopupAlignLeft = 0x1,
    _HeightSmall = 0x2,
    _HeightRegular = 0x4,
    _HeightLarge = 0x8,
    _HeightLargest = 0x10,
    _NoArrowButton = 0x20,
    _NoPreview = 0x40,
    _HeightMask_ = 0x1e,
}
enum ImGuiTabBarFlags_
{
    _None = 0x0,
    _Reorderable = 0x1,
    _AutoSelectNewTabs = 0x2,
    _TabListPopupButton = 0x4,
    _NoCloseWithMiddleMouseButton = 0x8,
    _NoTabListScrollingButtons = 0x10,
    _NoTooltip = 0x20,
    _FittingPolicyResizeDown = 0x40,
    _FittingPolicyScroll = 0x80,
    _FittingPolicyMask_ = 0xc0,
    _FittingPolicyDefault_ = 0x40,
}
enum ImGuiTabItemFlags_
{
    _None = 0x0,
    _UnsavedDocument = 0x1,
    _SetSelected = 0x2,
    _NoCloseWithMiddleMouseButton = 0x4,
    _NoPushId = 0x8,
}
enum ImGuiFocusedFlags_
{
    _None = 0x0,
    _ChildWindows = 0x1,
    _RootWindow = 0x2,
    _AnyWindow = 0x4,
    _RootAndChildWindows = 0x3,
}
enum ImGuiHoveredFlags_
{
    _None = 0x0,
    _ChildWindows = 0x1,
    _RootWindow = 0x2,
    _AnyWindow = 0x4,
    _AllowWhenBlockedByPopup = 0x8,
    _AllowWhenBlockedByActiveItem = 0x20,
    _AllowWhenOverlapped = 0x40,
    _AllowWhenDisabled = 0x80,
    _RectOnly = 0x68,
    _RootAndChildWindows = 0x3,
}
enum ImGuiDragDropFlags_
{
    _None = 0x0,
    _SourceNoPreviewTooltip = 0x1,
    _SourceNoDisableHover = 0x2,
    _SourceNoHoldToOpenOthers = 0x4,
    _SourceAllowNullID = 0x8,
    _SourceExtern = 0x10,
    _SourceAutoExpirePayload = 0x20,
    _AcceptBeforeDelivery = 0x400,
    _AcceptNoDrawDefaultRect = 0x800,
    _AcceptNoPreviewTooltip = 0x1000,
    _AcceptPeekOnly = 0xc00,
}
enum ImGuiDataType_
{
    _S8 = 0x0,
    _U8 = 0x1,
    _S16 = 0x2,
    _U16 = 0x3,
    _S32 = 0x4,
    _U32 = 0x5,
    _S64 = 0x6,
    _U64 = 0x7,
    _Float = 0x8,
    _Double = 0x9,
    _COUNT = 0xa,
}
enum ImGuiDir_
{
    _None = 0xffffffff,
    _Left = 0x0,
    _Right = 0x1,
    _Up = 0x2,
    _Down = 0x3,
    _COUNT = 0x4,
}
enum ImGuiKey_
{
    _Tab = 0x0,
    _LeftArrow = 0x1,
    _RightArrow = 0x2,
    _UpArrow = 0x3,
    _DownArrow = 0x4,
    _PageUp = 0x5,
    _PageDown = 0x6,
    _Home = 0x7,
    _End = 0x8,
    _Insert = 0x9,
    _Delete = 0xa,
    _Backspace = 0xb,
    _Space = 0xc,
    _Enter = 0xd,
    _Escape = 0xe,
    _KeyPadEnter = 0xf,
    _A = 0x10,
    _C = 0x11,
    _V = 0x12,
    _X = 0x13,
    _Y = 0x14,
    _Z = 0x15,
    _COUNT = 0x16,
}
enum ImGuiNavInput_
{
    _Activate = 0x0,
    _Cancel = 0x1,
    _Input = 0x2,
    _Menu = 0x3,
    _DpadLeft = 0x4,
    _DpadRight = 0x5,
    _DpadUp = 0x6,
    _DpadDown = 0x7,
    _LStickLeft = 0x8,
    _LStickRight = 0x9,
    _LStickUp = 0xa,
    _LStickDown = 0xb,
    _FocusPrev = 0xc,
    _FocusNext = 0xd,
    _TweakSlow = 0xe,
    _TweakFast = 0xf,
    _KeyMenu_ = 0x10,
    _KeyLeft_ = 0x11,
    _KeyRight_ = 0x12,
    _KeyUp_ = 0x13,
    _KeyDown_ = 0x14,
    _COUNT = 0x15,
    _InternalStart_ = 0x10,
}
enum ImGuiConfigFlags_
{
    _None = 0x0,
    _NavEnableKeyboard = 0x1,
    _NavEnableGamepad = 0x2,
    _NavEnableSetMousePos = 0x4,
    _NavNoCaptureKeyboard = 0x8,
    _NoMouse = 0x10,
    _NoMouseCursorChange = 0x20,
    _IsSRGB = 0x100000,
    _IsTouchScreen = 0x200000,
}
enum ImGuiBackendFlags_
{
    _None = 0x0,
    _HasGamepad = 0x1,
    _HasMouseCursors = 0x2,
    _HasSetMousePos = 0x4,
    _RendererHasVtxOffset = 0x8,
}
enum ImGuiCol_
{
    _Text = 0x0,
    _TextDisabled = 0x1,
    _WindowBg = 0x2,
    _ChildBg = 0x3,
    _PopupBg = 0x4,
    _Border = 0x5,
    _BorderShadow = 0x6,
    _FrameBg = 0x7,
    _FrameBgHovered = 0x8,
    _FrameBgActive = 0x9,
    _TitleBg = 0xa,
    _TitleBgActive = 0xb,
    _TitleBgCollapsed = 0xc,
    _MenuBarBg = 0xd,
    _ScrollbarBg = 0xe,
    _ScrollbarGrab = 0xf,
    _ScrollbarGrabHovered = 0x10,
    _ScrollbarGrabActive = 0x11,
    _CheckMark = 0x12,
    _SliderGrab = 0x13,
    _SliderGrabActive = 0x14,
    _Button = 0x15,
    _ButtonHovered = 0x16,
    _ButtonActive = 0x17,
    _Header = 0x18,
    _HeaderHovered = 0x19,
    _HeaderActive = 0x1a,
    _Separator = 0x1b,
    _SeparatorHovered = 0x1c,
    _SeparatorActive = 0x1d,
    _ResizeGrip = 0x1e,
    _ResizeGripHovered = 0x1f,
    _ResizeGripActive = 0x20,
    _Tab = 0x21,
    _TabHovered = 0x22,
    _TabActive = 0x23,
    _TabUnfocused = 0x24,
    _TabUnfocusedActive = 0x25,
    _PlotLines = 0x26,
    _PlotLinesHovered = 0x27,
    _PlotHistogram = 0x28,
    _PlotHistogramHovered = 0x29,
    _TextSelectedBg = 0x2a,
    _DragDropTarget = 0x2b,
    _NavHighlight = 0x2c,
    _NavWindowingHighlight = 0x2d,
    _NavWindowingDimBg = 0x2e,
    _ModalWindowDimBg = 0x2f,
    _COUNT = 0x30,
    _ModalWindowDarkening = 0x2f,
}
enum ImGuiStyleVar_
{
    _Alpha = 0x0,
    _WindowPadding = 0x1,
    _WindowRounding = 0x2,
    _WindowBorderSize = 0x3,
    _WindowMinSize = 0x4,
    _WindowTitleAlign = 0x5,
    _ChildRounding = 0x6,
    _ChildBorderSize = 0x7,
    _PopupRounding = 0x8,
    _PopupBorderSize = 0x9,
    _FramePadding = 0xa,
    _FrameRounding = 0xb,
    _FrameBorderSize = 0xc,
    _ItemSpacing = 0xd,
    _ItemInnerSpacing = 0xe,
    _IndentSpacing = 0xf,
    _ScrollbarSize = 0x10,
    _ScrollbarRounding = 0x11,
    _GrabMinSize = 0x12,
    _GrabRounding = 0x13,
    _TabRounding = 0x14,
    _ButtonTextAlign = 0x15,
    _SelectableTextAlign = 0x16,
    _COUNT = 0x17,
    _Count_ = 0x17,
}
enum ImGuiColorEditFlags_
{
    _None = 0x0,
    _NoAlpha = 0x2,
    _NoPicker = 0x4,
    _NoOptions = 0x8,
    _NoSmallPreview = 0x10,
    _NoInputs = 0x20,
    _NoTooltip = 0x40,
    _NoLabel = 0x80,
    _NoSidePreview = 0x100,
    _NoDragDrop = 0x200,
    _AlphaBar = 0x10000,
    _AlphaPreview = 0x20000,
    _AlphaPreviewHalf = 0x40000,
    _HDR = 0x80000,
    _DisplayRGB = 0x100000,
    _DisplayHSV = 0x200000,
    _DisplayHex = 0x400000,
    _Uint8 = 0x800000,
    _Float = 0x1000000,
    _PickerHueBar = 0x2000000,
    _PickerHueWheel = 0x4000000,
    _InputRGB = 0x8000000,
    _InputHSV = 0x10000000,
    __OptionsDefault = 0xa900000,
    __DisplayMask = 0x700000,
    __DataTypeMask = 0x1800000,
    __PickerMask = 0x6000000,
    __InputMask = 0x18000000,
    _RGB = 0x100000,
    _HSV = 0x200000,
    _HEX = 0x400000,
}
enum ImGuiMouseButton_
{
    _Left = 0x0,
    _Right = 0x1,
    _Middle = 0x2,
    _COUNT = 0x5,
}
enum ImGuiMouseCursor_
{
    _None = 0xffffffff,
    _Arrow = 0x0,
    _TextInput = 0x1,
    _ResizeAll = 0x2,
    _ResizeNS = 0x3,
    _ResizeEW = 0x4,
    _ResizeNESW = 0x5,
    _ResizeNWSE = 0x6,
    _Hand = 0x7,
    _NotAllowed = 0x8,
    _COUNT = 0x9,
    _Count_ = 0x9,
}
enum ImGuiCond_
{
    _Always = 0x1,
    _Once = 0x2,
    _FirstUseEver = 0x4,
    _Appearing = 0x8,
}
struct ImNewDummy
{
}
bool InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags flags);
bool InputFloat2(const char* label, float[2] v, int decimal_precision, ImGuiInputTextFlags flags);
bool InputFloat3(const char* label, float[3] v, int decimal_precision, ImGuiInputTextFlags flags);
bool InputFloat4(const char* label, float[4] v, int decimal_precision, ImGuiInputTextFlags flags);
alias ImGuiTextEditCallback = ImGuiInputTextCallback;
alias ImGuiTextEditCallbackData = ImGuiInputTextCallbackData;
struct ImGuiTextRange
{
    const char* b;
    const char* e;
}
struct ImGuiStoragePair
{
    ImGuiID key;
    union {
        int val_i;
        float val_f;
        void* val_p;
    }
}
// struct nameless
enum ImDrawCornerFlags_
{
    _None = 0x0,
    _TopLeft = 0x1,
    _TopRight = 0x2,
    _BotLeft = 0x4,
    _BotRight = 0x8,
    _Top = 0x3,
    _Bot = 0xc,
    _Left = 0x5,
    _Right = 0xa,
    _All = 0xf,
}
enum ImDrawListFlags_
{
    _None = 0x0,
    _AntiAliasedLines = 0x1,
    _AntiAliasedFill = 0x2,
    _AllowVtxOffset = 0x4,
}
enum ImFontAtlasFlags_
{
    _None = 0x0,
    _NoPowerOfTwoHeight = 0x1,
    _NoMouseCursors = 0x2,
}
alias CustomRect = ImFontAtlasCustomRect;
alias GlyphRangesBuilder = ImFontGlyphRangesBuilder;
