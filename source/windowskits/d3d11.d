module windowskits.d3d11;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.winnt;
import core.sys.windows.windef;
import core.sys.windows.winnt;
import windowskits.guiddef;
import core.sys.windows.basetyps;
import windowskits.minwindef;
import windowskits.dxgiformat;
import windowskits.dxgicommon;
import windowskits.d3dcommon;
import windowskits.basetsd;
import windowskits.windef;
import windowskits.dxgi;
import windowskits.dxgitype;
enum __REQUIRED_RPCNDR_H_VERSION__ = 500;
enum __REQUIRED_RPCSAL_H_VERSION__ = 100;
enum D3D11_16BIT_INDEX_STRIP_CUT_VALUE = ( 0xffff );
enum D3D11_32BIT_INDEX_STRIP_CUT_VALUE = ( 0xffffffff );
enum D3D11_8BIT_INDEX_STRIP_CUT_VALUE = ( 0xff );
enum D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
enum D3D11_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
enum D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
enum D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( - 10 );
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( - 8 );
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
enum D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
enum D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
enum D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
enum D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
enum D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
enum D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
enum D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
enum D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
enum D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
enum D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
enum D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
enum D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
enum D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
enum D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
enum D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
enum D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
enum D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
enum D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
enum D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
enum D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
enum D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
enum D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
enum D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
enum D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
enum D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
enum D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
enum D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
enum D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
enum D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
enum D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
enum D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
enum D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
enum D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
enum D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
enum D3D11_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
enum D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
enum D3D11_CS_TGSM_REGISTER_COUNT = ( 8192 );
enum D3D11_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
enum D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADID_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_X = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_Y = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_Z = ( 64 );
enum D3D11_CS_THREAD_GROUP_MIN_X = ( 1 );
enum D3D11_CS_THREAD_GROUP_MIN_Y = ( 1 );
enum D3D11_CS_THREAD_GROUP_MIN_Z = ( 1 );
enum D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
enum D3D11_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
enum D3D11_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D11_DEFAULT_DEPTH_BIAS = ( 0 );
enum D3D11_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
enum D3D11_DEFAULT_MAX_ANISOTROPY = ( 16 );
enum D3D11_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
enum D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
enum D3D11_DEFAULT_SAMPLE_MASK = ( 0xffffffff );
enum D3D11_DEFAULT_SCISSOR_ENDX = ( 0 );
enum D3D11_DEFAULT_SCISSOR_ENDY = ( 0 );
enum D3D11_DEFAULT_SCISSOR_STARTX = ( 0 );
enum D3D11_DEFAULT_SCISSOR_STARTY = ( 0 );
enum D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
enum D3D11_DEFAULT_STENCIL_READ_MASK = ( 0xff );
enum D3D11_DEFAULT_STENCIL_REFERENCE = ( 0 );
enum D3D11_DEFAULT_STENCIL_WRITE_MASK = ( 0xff );
enum D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
enum D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_WIDTH = ( 0 );
enum D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
enum D3D11_FLOAT32_MAX = ( 3.402823466e+38f );
enum D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
enum D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
enum D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
enum D3D11_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
enum D3D11_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
enum D3D11_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
enum D3D11_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
enum D3D11_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
enum D3D11_FTOI_INSTRUCTION_MIN_INPUT = ( - 2147483648.999f );
enum D3D11_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
enum D3D11_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
enum D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_REGISTER_VERTICES = ( 32 );
enum D3D11_GS_MAX_INSTANCE_COUNT = ( 32 );
enum D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
enum D3D11_GS_OUTPUT_ELEMENTS = ( 32 );
enum D3D11_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
enum D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
enum D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
enum D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
enum D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
enum D3D11_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
enum D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
enum D3D11_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
enum D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( 0xffffffff );
enum D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( 0xffffffff );
enum D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( 0xffffffff );
enum D3D11_KEEP_UNORDERED_ACCESS_VIEWS = ( 0xffffffff );
enum D3D11_LINEAR_GAMMA = ( 1.0f );
enum D3D11_MAJOR_VERSION = ( 11 );
enum D3D11_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
enum D3D11_MAX_DEPTH = ( 1.0f );
enum D3D11_MAX_MAXANISOTROPY = ( 16 );
enum D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
enum D3D11_MAX_POSITION_VALUE = ( 3.402823466e+34f );
enum D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
enum D3D11_MINOR_VERSION = ( 0 );
enum D3D11_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D11_MIN_DEPTH = ( 0.0f );
enum D3D11_MIN_MAXANISOTROPY = ( 0 );
enum D3D11_MIP_LOD_BIAS_MAX = ( 15.99f );
enum D3D11_MIP_LOD_BIAS_MIN = ( - 16.0f );
enum D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
enum D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
enum D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
enum D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
enum D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D11_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_CS_UAV_REGISTER_COUNT = ( 8 );
enum D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
enum D3D11_PS_FRONTFACING_DEFAULT_VALUE = ( 0xffffffff );
enum D3D11_PS_FRONTFACING_FALSE_VALUE = ( 0 );
enum D3D11_PS_FRONTFACING_TRUE_VALUE = ( 0xffffffff );
enum D3D11_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
enum D3D11_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_REGISTER_COUNT = ( 8 );
enum D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
enum D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
enum D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
enum D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
enum D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
enum D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
enum D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
enum D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D11_REQ_MAXANISOTROPY = ( 16 );
enum D3D11_REQ_MIP_LEVELS = ( 15 );
enum D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
enum D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
enum D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
enum D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
enum D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
enum D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
enum D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
enum D3D11_SHADER_MAJOR_VERSION = ( 5 );
enum D3D11_SHADER_MAX_INSTANCES = ( 65535 );
enum D3D11_SHADER_MAX_INTERFACES = ( 253 );
enum D3D11_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
enum D3D11_SHADER_MAX_TYPES = ( 65535 );
enum D3D11_SHADER_MINOR_VERSION = ( 0 );
enum D3D11_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
enum D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
enum D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
enum D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
enum D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
enum D3D11_SO_BUFFER_SLOT_COUNT = ( 4 );
enum D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( 0xffffffff );
enum D3D11_SO_NO_RASTERIZED_STREAM = ( 0xffffffff );
enum D3D11_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
enum D3D11_SO_STREAM_COUNT = ( 4 );
enum D3D11_SPEC_DATE_DAY = ( 16 );
enum D3D11_SPEC_DATE_MONTH = ( 05 );
enum D3D11_SPEC_DATE_YEAR = ( 2011 );
enum D3D11_SPEC_VERSION = ( 1.07 );
enum D3D11_SRGB_GAMMA = ( 2.2f );
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
enum D3D11_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
enum D3D11_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
enum D3D11_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
enum D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
enum D3D11_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
enum D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
enum D3D11_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
enum D3D11_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
enum D3D11_STANDARD_VECTOR_SIZE = ( 4 );
enum D3D11_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
enum D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
enum D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
enum D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
enum D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
enum D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
enum D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D11_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
enum D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
enum D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
enum D3D11_VIEWPORT_BOUNDS_MAX = ( 32767 );
enum D3D11_VIEWPORT_BOUNDS_MIN = ( - 32768 );
enum D3D11_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_VS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_VS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
enum D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
enum D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
enum D3D11_1_UAV_SLOT_COUNT = ( 64 );
enum D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
enum D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = ( 4 );
enum D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
enum _FACD3D11 = ( 0x87c );
enum D3D11_APPEND_ALIGNED_ELEMENT = ( 0xffffffff );
enum D3D11_FILTER_REDUCTION_TYPE_MASK = ( 0x3 );
enum D3D11_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
enum D3D11_FILTER_TYPE_MASK = ( 0x3 );
enum D3D11_MIN_FILTER_SHIFT = ( 4 );
enum D3D11_MAG_FILTER_SHIFT = ( 2 );
enum D3D11_MIP_FILTER_SHIFT = ( 0 );
enum D3D11_COMPARISON_FILTERING_BIT = ( 0x80 );
enum D3D11_ANISOTROPIC_FILTERING_BIT = ( 0x40 );
enum D3D11_SDK_VERSION = ( 7 );
interface ID3D11DeviceChild: IUnknown
{
    enum iidof = parseGUID("1841e5c8-16b0-489b-bcc8-44cfb0d5deae");
    void GetDevice(ID3D11Device* ppDevice);
    HRESULT GetPrivateData(GUID* guid, UINT* pDataSize, void* pData);
    HRESULT SetPrivateData(GUID* guid, UINT DataSize, void* pData);
    HRESULT SetPrivateDataInterface(GUID* guid, IUnknown pData);
}
interface ID3D11Device: IUnknown
{
    enum iidof = parseGUID("db6f6ddb-ac77-4e88-8253-819df9bbf140");
    HRESULT CreateBuffer(D3D11_BUFFER_DESC* pDesc, D3D11_SUBRESOURCE_DATA* pInitialData, ID3D11Buffer* ppBuffer);
    HRESULT CreateTexture1D(D3D11_TEXTURE1D_DESC* pDesc, D3D11_SUBRESOURCE_DATA* pInitialData, ID3D11Texture1D* ppTexture1D);
    HRESULT CreateTexture2D(D3D11_TEXTURE2D_DESC* pDesc, D3D11_SUBRESOURCE_DATA* pInitialData, ID3D11Texture2D* ppTexture2D);
    HRESULT CreateTexture3D(D3D11_TEXTURE3D_DESC* pDesc, D3D11_SUBRESOURCE_DATA* pInitialData, ID3D11Texture3D* ppTexture3D);
    HRESULT CreateShaderResourceView(ID3D11Resource pResource, D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc, ID3D11ShaderResourceView* ppSRView);
    HRESULT CreateUnorderedAccessView(ID3D11Resource pResource, D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc, ID3D11UnorderedAccessView* ppUAView);
    HRESULT CreateRenderTargetView(ID3D11Resource pResource, D3D11_RENDER_TARGET_VIEW_DESC* pDesc, ID3D11RenderTargetView* ppRTView);
    HRESULT CreateDepthStencilView(ID3D11Resource pResource, D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc, ID3D11DepthStencilView* ppDepthStencilView);
    HRESULT CreateInputLayout(D3D11_INPUT_ELEMENT_DESC* pInputElementDescs, UINT NumElements, void* pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout* ppInputLayout);
    HRESULT CreateVertexShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader* ppVertexShader);
    HRESULT CreateGeometryShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
    HRESULT CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, SIZE_T BytecodeLength, D3D11_SO_DECLARATION_ENTRY* pSODeclaration, UINT NumEntries, UINT* pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
    HRESULT CreatePixelShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader* ppPixelShader);
    HRESULT CreateHullShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11HullShader* ppHullShader);
    HRESULT CreateDomainShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader* ppDomainShader);
    HRESULT CreateComputeShader(void* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader* ppComputeShader);
    HRESULT CreateClassLinkage(ID3D11ClassLinkage* ppLinkage);
    HRESULT CreateBlendState(D3D11_BLEND_DESC* pBlendStateDesc, ID3D11BlendState* ppBlendState);
    HRESULT CreateDepthStencilState(D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc, ID3D11DepthStencilState* ppDepthStencilState);
    HRESULT CreateRasterizerState(D3D11_RASTERIZER_DESC* pRasterizerDesc, ID3D11RasterizerState* ppRasterizerState);
    HRESULT CreateSamplerState(D3D11_SAMPLER_DESC* pSamplerDesc, ID3D11SamplerState* ppSamplerState);
    HRESULT CreateQuery(D3D11_QUERY_DESC* pQueryDesc, ID3D11Query* ppQuery);
    HRESULT CreatePredicate(D3D11_QUERY_DESC* pPredicateDesc, ID3D11Predicate* ppPredicate);
    HRESULT CreateCounter(D3D11_COUNTER_DESC* pCounterDesc, ID3D11Counter* ppCounter);
    HRESULT CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext* ppDeferredContext);
    HRESULT OpenSharedResource(HANDLE hResource, IID* ReturnedInterface, void** ppResource);
    HRESULT CheckFormatSupport(DXGI_FORMAT Format, UINT* pFormatSupport);
    HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT* pNumQualityLevels);
    void CheckCounterInfo(D3D11_COUNTER_INFO* pCounterInfo);
    HRESULT CheckCounter(D3D11_COUNTER_DESC* pDesc, D3D11_COUNTER_TYPE* pType, UINT* pActiveCounters, LPSTR szName, UINT* pNameLength, LPSTR szUnits, UINT* pUnitsLength, LPSTR szDescription, UINT* pDescriptionLength);
    HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void* pFeatureSupportData, UINT FeatureSupportDataSize);
    HRESULT GetPrivateData(GUID* guid, UINT* pDataSize, void* pData);
    HRESULT SetPrivateData(GUID* guid, UINT DataSize, void* pData);
    HRESULT SetPrivateDataInterface(GUID* guid, IUnknown pData);
    D3D_FEATURE_LEVEL GetFeatureLevel();
    UINT GetCreationFlags();
    HRESULT GetDeviceRemovedReason();
    void GetImmediateContext(ID3D11DeviceContext* ppImmediateContext);
    HRESULT SetExceptionMode(UINT RaiseFlags);
    UINT GetExceptionMode();
}
struct D3D11_BUFFER_DESC
{
    UINT ByteWidth;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    UINT StructureByteStride;
}
enum D3D11_USAGE
{
    D3D11_USAGE_DEFAULT = 0x0,
    D3D11_USAGE_IMMUTABLE = 0x1,
    D3D11_USAGE_DYNAMIC = 0x2,
    D3D11_USAGE_STAGING = 0x3,
}
struct D3D11_SUBRESOURCE_DATA
{
    void* pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
}
interface ID3D11Buffer: ID3D11Resource
{
    enum iidof = parseGUID("48570b85-d1ee-4fcd-a250-eb350722b037");
    void GetDesc(D3D11_BUFFER_DESC* pDesc);
}
interface ID3D11Resource: ID3D11DeviceChild
{
    enum iidof = parseGUID("dc8e63f3-d12b-4952-b47b-5e45026a862d");
    void GetType(D3D11_RESOURCE_DIMENSION* pResourceDimension);
    void SetEvictionPriority(UINT EvictionPriority);
    UINT GetEvictionPriority();
}
enum D3D11_RESOURCE_DIMENSION
{
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0x0,
    D3D11_RESOURCE_DIMENSION_BUFFER = 0x1,
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 0x2,
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 0x3,
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 0x4,
}
struct D3D11_TEXTURE1D_DESC
{
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}
interface ID3D11Texture1D: ID3D11Resource
{
    enum iidof = parseGUID("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c");
    void GetDesc(D3D11_TEXTURE1D_DESC* pDesc);
}
struct D3D11_TEXTURE2D_DESC
{
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}
interface ID3D11Texture2D: ID3D11Resource
{
    static const iidof = parseGUID("6f15aaf2-d208-4e89-9ab4-489535d34f9c");
    void GetDesc(D3D11_TEXTURE2D_DESC* pDesc);
}
struct D3D11_TEXTURE3D_DESC
{
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}
interface ID3D11Texture3D: ID3D11Resource
{
    enum iidof = parseGUID("037e866e-f56d-4357-a8af-9dabbe6e250e");
    void GetDesc(D3D11_TEXTURE3D_DESC* pDesc);
}
struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_SRV_DIMENSION ViewDimension;
    union {
        D3D11_BUFFER_SRV Buffer;
        D3D11_TEX1D_SRV Texture1D;
        D3D11_TEX1D_ARRAY_SRV Texture1DArray;
        D3D11_TEX2D_SRV Texture2D;
        D3D11_TEX2D_ARRAY_SRV Texture2DArray;
        D3D11_TEX2DMS_SRV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D11_TEX3D_SRV Texture3D;
        D3D11_TEXCUBE_SRV TextureCube;
        D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
        D3D11_BUFFEREX_SRV BufferEx;
    }
}
alias D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;
// struct nameless
struct D3D11_BUFFER_SRV
{
    union {
        UINT FirstElement;
        UINT ElementOffset;
    }
    union {
        UINT NumElements;
        UINT ElementWidth;
    }
}
// struct nameless
// struct nameless
struct D3D11_TEX1D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
}
struct D3D11_TEX1D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
}
struct D3D11_TEX2D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2DMS_SRV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D11_TEX2DMS_ARRAY_SRV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX3D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
}
struct D3D11_TEXCUBE_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
}
struct D3D11_TEXCUBE_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
}
struct D3D11_BUFFEREX_SRV
{
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
}
interface ID3D11ShaderResourceView: ID3D11View
{
    enum iidof = parseGUID("b0e06fe0-8192-4e1a-b1ca-36d7414710b2");
    void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc);
}
interface ID3D11View: ID3D11DeviceChild
{
    enum iidof = parseGUID("839d1216-bb2e-412b-b7f4-a9dbebe08ed1");
    void GetResource(ID3D11Resource* ppResource);
}
struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_UAV_DIMENSION ViewDimension;
    union {
        D3D11_BUFFER_UAV Buffer;
        D3D11_TEX1D_UAV Texture1D;
        D3D11_TEX1D_ARRAY_UAV Texture1DArray;
        D3D11_TEX2D_UAV Texture2D;
        D3D11_TEX2D_ARRAY_UAV Texture2DArray;
        D3D11_TEX3D_UAV Texture3D;
    }
}
enum D3D11_UAV_DIMENSION
{
    D3D11_UAV_DIMENSION_UNKNOWN = 0x0,
    D3D11_UAV_DIMENSION_BUFFER = 0x1,
    D3D11_UAV_DIMENSION_TEXTURE1D = 0x2,
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 0x3,
    D3D11_UAV_DIMENSION_TEXTURE2D = 0x4,
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 0x5,
    D3D11_UAV_DIMENSION_TEXTURE3D = 0x8,
}
// struct nameless
struct D3D11_BUFFER_UAV
{
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
}
struct D3D11_TEX1D_UAV
{
    UINT MipSlice;
}
struct D3D11_TEX1D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2D_UAV
{
    UINT MipSlice;
}
struct D3D11_TEX2D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX3D_UAV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}
interface ID3D11UnorderedAccessView: ID3D11View
{
    enum iidof = parseGUID("28acf509-7f5c-48f6-8611-f316010a6380");
    void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc);
}
struct D3D11_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_RTV_DIMENSION ViewDimension;
    union {
        D3D11_BUFFER_RTV Buffer;
        D3D11_TEX1D_RTV Texture1D;
        D3D11_TEX1D_ARRAY_RTV Texture1DArray;
        D3D11_TEX2D_RTV Texture2D;
        D3D11_TEX2D_ARRAY_RTV Texture2DArray;
        D3D11_TEX2DMS_RTV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D11_TEX3D_RTV Texture3D;
    }
}
enum D3D11_RTV_DIMENSION
{
    D3D11_RTV_DIMENSION_UNKNOWN = 0x0,
    D3D11_RTV_DIMENSION_BUFFER = 0x1,
    D3D11_RTV_DIMENSION_TEXTURE1D = 0x2,
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
    D3D11_RTV_DIMENSION_TEXTURE2D = 0x4,
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 0x6,
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
    D3D11_RTV_DIMENSION_TEXTURE3D = 0x8,
}
// struct nameless
struct D3D11_BUFFER_RTV
{
    union {
        UINT FirstElement;
        UINT ElementOffset;
    }
    union {
        UINT NumElements;
        UINT ElementWidth;
    }
}
// struct nameless
// struct nameless
struct D3D11_TEX1D_RTV
{
    UINT MipSlice;
}
struct D3D11_TEX1D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2D_RTV
{
    UINT MipSlice;
}
struct D3D11_TEX2D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2DMS_RTV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D11_TEX2DMS_ARRAY_RTV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX3D_RTV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}
interface ID3D11RenderTargetView: ID3D11View
{
    enum iidof = parseGUID("dfdba067-0b8d-4865-875b-d7b4516cc164");
    void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC* pDesc);
}
struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_DSV_DIMENSION ViewDimension;
    UINT Flags;
    union {
        D3D11_TEX1D_DSV Texture1D;
        D3D11_TEX1D_ARRAY_DSV Texture1DArray;
        D3D11_TEX2D_DSV Texture2D;
        D3D11_TEX2D_ARRAY_DSV Texture2DArray;
        D3D11_TEX2DMS_DSV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
}
enum D3D11_DSV_DIMENSION
{
    D3D11_DSV_DIMENSION_UNKNOWN = 0x0,
    D3D11_DSV_DIMENSION_TEXTURE1D = 0x1,
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
    D3D11_DSV_DIMENSION_TEXTURE2D = 0x3,
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 0x5,
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
}
// struct nameless
struct D3D11_TEX1D_DSV
{
    UINT MipSlice;
}
struct D3D11_TEX1D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2D_DSV
{
    UINT MipSlice;
}
struct D3D11_TEX2D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D11_TEX2DMS_DSV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D11_TEX2DMS_ARRAY_DSV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
interface ID3D11DepthStencilView: ID3D11View
{
    enum iidof = parseGUID("9fdac92a-1876-48c3-afad-25b94f84a9b6");
    void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc);
}
struct D3D11_INPUT_ELEMENT_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D11_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
}
enum D3D11_INPUT_CLASSIFICATION
{
    D3D11_INPUT_PER_VERTEX_DATA = 0x0,
    D3D11_INPUT_PER_INSTANCE_DATA = 0x1,
}
interface ID3D11InputLayout: ID3D11DeviceChild
{
    enum iidof = parseGUID("e4819ddc-4cf0-4025-bd26-5de82a3e07b7");
}
interface ID3D11ClassLinkage: ID3D11DeviceChild
{
    enum iidof = parseGUID("ddf57cba-9543-46e4-a12b-f207a0fe7fed");
    HRESULT GetClassInstance(LPCSTR pClassInstanceName, UINT InstanceIndex, ID3D11ClassInstance* ppInstance);
    HRESULT CreateClassInstance(LPCSTR pClassTypeName, UINT ConstantBufferOffset, UINT ConstantVectorOffset, UINT TextureOffset, UINT SamplerOffset, ID3D11ClassInstance* ppInstance);
}
interface ID3D11ClassInstance: ID3D11DeviceChild
{
    enum iidof = parseGUID("a6cd7faa-b0b7-4a2f-9436-8662a65797cb");
    void GetClassLinkage(ID3D11ClassLinkage* ppLinkage);
    void GetDesc(D3D11_CLASS_INSTANCE_DESC* pDesc);
    void GetInstanceName(LPSTR pInstanceName, SIZE_T* pBufferLength);
    void GetTypeName(LPSTR pTypeName, SIZE_T* pBufferLength);
}
struct D3D11_CLASS_INSTANCE_DESC
{
    UINT InstanceId;
    UINT InstanceIndex;
    UINT TypeId;
    UINT ConstantBuffer;
    UINT BaseConstantBufferOffset;
    UINT BaseTexture;
    UINT BaseSampler;
    BOOL Created;
}
interface ID3D11VertexShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("3b301d64-d678-4289-8897-22f8928b72f3");
}
interface ID3D11GeometryShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("38325b96-effb-4022-ba02-2e795b70275c");
}
struct D3D11_SO_DECLARATION_ENTRY
{
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
}
interface ID3D11PixelShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("ea82e40d-51dc-4f33-93d4-db7c9125ae8c");
}
interface ID3D11HullShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd");
}
interface ID3D11DomainShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("f582c508-0f36-490c-9977-31eece268cfa");
}
interface ID3D11ComputeShader: ID3D11DeviceChild
{
    enum iidof = parseGUID("4f5b196e-c2bd-495e-bd01-1fded38e4969");
}
struct D3D11_BLEND_DESC
{
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}
struct D3D11_RENDER_TARGET_BLEND_DESC
{
    BOOL BlendEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
}
enum D3D11_BLEND
{
    D3D11_BLEND_ZERO = 0x1,
    D3D11_BLEND_ONE = 0x2,
    D3D11_BLEND_SRC_COLOR = 0x3,
    D3D11_BLEND_INV_SRC_COLOR = 0x4,
    D3D11_BLEND_SRC_ALPHA = 0x5,
    D3D11_BLEND_INV_SRC_ALPHA = 0x6,
    D3D11_BLEND_DEST_ALPHA = 0x7,
    D3D11_BLEND_INV_DEST_ALPHA = 0x8,
    D3D11_BLEND_DEST_COLOR = 0x9,
    D3D11_BLEND_INV_DEST_COLOR = 0xa,
    D3D11_BLEND_SRC_ALPHA_SAT = 0xb,
    D3D11_BLEND_BLEND_FACTOR = 0xe,
    D3D11_BLEND_INV_BLEND_FACTOR = 0xf,
    D3D11_BLEND_SRC1_COLOR = 0x10,
    D3D11_BLEND_INV_SRC1_COLOR = 0x11,
    D3D11_BLEND_SRC1_ALPHA = 0x12,
    D3D11_BLEND_INV_SRC1_ALPHA = 0x13,
}
enum D3D11_BLEND_OP
{
    D3D11_BLEND_OP_ADD = 0x1,
    D3D11_BLEND_OP_SUBTRACT = 0x2,
    D3D11_BLEND_OP_REV_SUBTRACT = 0x3,
    D3D11_BLEND_OP_MIN = 0x4,
    D3D11_BLEND_OP_MAX = 0x5,
}
interface ID3D11BlendState: ID3D11DeviceChild
{
    enum iidof = parseGUID("75b68faa-347d-4159-8f45-a0640f01cd9a");
    void GetDesc(D3D11_BLEND_DESC* pDesc);
}
struct D3D11_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    D3D11_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D11_DEPTH_STENCILOP_DESC FrontFace;
    D3D11_DEPTH_STENCILOP_DESC BackFace;
}
enum D3D11_DEPTH_WRITE_MASK
{
    D3D11_DEPTH_WRITE_MASK_ZERO = 0x0,
    D3D11_DEPTH_WRITE_MASK_ALL = 0x1,
}
enum D3D11_COMPARISON_FUNC
{
    D3D11_COMPARISON_NEVER = 0x1,
    D3D11_COMPARISON_LESS = 0x2,
    D3D11_COMPARISON_EQUAL = 0x3,
    D3D11_COMPARISON_LESS_EQUAL = 0x4,
    D3D11_COMPARISON_GREATER = 0x5,
    D3D11_COMPARISON_NOT_EQUAL = 0x6,
    D3D11_COMPARISON_GREATER_EQUAL = 0x7,
    D3D11_COMPARISON_ALWAYS = 0x8,
}
struct D3D11_DEPTH_STENCILOP_DESC
{
    D3D11_STENCIL_OP StencilFailOp;
    D3D11_STENCIL_OP StencilDepthFailOp;
    D3D11_STENCIL_OP StencilPassOp;
    D3D11_COMPARISON_FUNC StencilFunc;
}
enum D3D11_STENCIL_OP
{
    D3D11_STENCIL_OP_KEEP = 0x1,
    D3D11_STENCIL_OP_ZERO = 0x2,
    D3D11_STENCIL_OP_REPLACE = 0x3,
    D3D11_STENCIL_OP_INCR_SAT = 0x4,
    D3D11_STENCIL_OP_DECR_SAT = 0x5,
    D3D11_STENCIL_OP_INVERT = 0x6,
    D3D11_STENCIL_OP_INCR = 0x7,
    D3D11_STENCIL_OP_DECR = 0x8,
}
interface ID3D11DepthStencilState: ID3D11DeviceChild
{
    enum iidof = parseGUID("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1");
    void GetDesc(D3D11_DEPTH_STENCIL_DESC* pDesc);
}
struct D3D11_RASTERIZER_DESC
{
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
}
enum D3D11_FILL_MODE
{
    D3D11_FILL_WIREFRAME = 0x2,
    D3D11_FILL_SOLID = 0x3,
}
enum D3D11_CULL_MODE
{
    D3D11_CULL_NONE = 0x1,
    D3D11_CULL_FRONT = 0x2,
    D3D11_CULL_BACK = 0x3,
}
interface ID3D11RasterizerState: ID3D11DeviceChild
{
    enum iidof = parseGUID("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7");
    void GetDesc(D3D11_RASTERIZER_DESC* pDesc);
}
struct D3D11_SAMPLER_DESC
{
    D3D11_FILTER Filter;
    D3D11_TEXTURE_ADDRESS_MODE AddressU;
    D3D11_TEXTURE_ADDRESS_MODE AddressV;
    D3D11_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D11_COMPARISON_FUNC ComparisonFunc;
    FLOAT[4] BorderColor;
    FLOAT MinLOD;
    FLOAT MaxLOD;
}
enum D3D11_FILTER
{
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
    D3D11_FILTER_ANISOTROPIC = 0x55,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5,
}
enum D3D11_TEXTURE_ADDRESS_MODE
{
    D3D11_TEXTURE_ADDRESS_WRAP = 0x1,
    D3D11_TEXTURE_ADDRESS_MIRROR = 0x2,
    D3D11_TEXTURE_ADDRESS_CLAMP = 0x3,
    D3D11_TEXTURE_ADDRESS_BORDER = 0x4,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
}
interface ID3D11SamplerState: ID3D11DeviceChild
{
    enum iidof = parseGUID("da6fea51-564c-4487-9810-f0d0f9b4e3a5");
    void GetDesc(D3D11_SAMPLER_DESC* pDesc);
}
struct D3D11_QUERY_DESC
{
    D3D11_QUERY Query;
    UINT MiscFlags;
}
enum D3D11_QUERY
{
    D3D11_QUERY_EVENT = 0x0,
    D3D11_QUERY_OCCLUSION = 0x1,
    D3D11_QUERY_TIMESTAMP = 0x2,
    D3D11_QUERY_TIMESTAMP_DISJOINT = 0x3,
    D3D11_QUERY_PIPELINE_STATISTICS = 0x4,
    D3D11_QUERY_OCCLUSION_PREDICATE = 0x5,
    D3D11_QUERY_SO_STATISTICS = 0x6,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
    D3D11_QUERY_SO_STATISTICS_STREAM0 = 0x8,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
    D3D11_QUERY_SO_STATISTICS_STREAM1 = 0xa,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 0xb,
    D3D11_QUERY_SO_STATISTICS_STREAM2 = 0xc,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 0xd,
    D3D11_QUERY_SO_STATISTICS_STREAM3 = 0xe,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 0xf,
}
interface ID3D11Query: ID3D11Asynchronous
{
    enum iidof = parseGUID("d6c00747-87b7-425e-b84d-44d108560afd");
    void GetDesc(D3D11_QUERY_DESC* pDesc);
}
interface ID3D11Asynchronous: ID3D11DeviceChild
{
    enum iidof = parseGUID("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b");
    UINT GetDataSize();
}
interface ID3D11Predicate: ID3D11Query
{
    enum iidof = parseGUID("9eb576dd-9f77-4d86-81aa-8bab5fe490e2");
}
struct D3D11_COUNTER_DESC
{
    D3D11_COUNTER Counter;
    UINT MiscFlags;
}
enum D3D11_COUNTER
{
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
}
interface ID3D11Counter: ID3D11Asynchronous
{
    enum iidof = parseGUID("6e8c49fb-a371-4770-b440-29086022b741");
    void GetDesc(D3D11_COUNTER_DESC* pDesc);
}
interface ID3D11DeviceContext: ID3D11DeviceChild
{
    enum iidof = parseGUID("c0bfa96c-e089-44fb-8eaf-26f8796190da");
    void VSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void PSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void PSSetShader(ID3D11PixelShader pPixelShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void PSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void VSSetShader(ID3D11VertexShader pVertexShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void DrawIndexed(UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation);
    void Draw(UINT VertexCount, UINT StartVertexLocation);
    HRESULT Map(ID3D11Resource pResource, UINT Subresource, D3D11_MAP MapType, UINT MapFlags, D3D11_MAPPED_SUBRESOURCE* pMappedResource);
    void Unmap(ID3D11Resource pResource, UINT Subresource);
    void PSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void IASetInputLayout(ID3D11InputLayout pInputLayout);
    void IASetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppVertexBuffers, UINT* pStrides, UINT* pOffsets);
    void IASetIndexBuffer(ID3D11Buffer pIndexBuffer, DXGI_FORMAT Format, UINT Offset);
    void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation);
    void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation);
    void GSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void GSSetShader(ID3D11GeometryShader pShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
    void VSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void VSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void Begin(ID3D11Asynchronous pAsync);
    void End(ID3D11Asynchronous pAsync);
    HRESULT GetData(ID3D11Asynchronous pAsync, void* pData, UINT DataSize, UINT GetDataFlags);
    void SetPredication(ID3D11Predicate pPredicate, BOOL PredicateValue);
    void GSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void GSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void OMSetRenderTargets(UINT NumViews, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView);
    void OMSetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews, UINT* pUAVInitialCounts);
    void OMSetBlendState(ID3D11BlendState pBlendState, FLOAT[4] BlendFactor, UINT SampleMask);
    void OMSetDepthStencilState(ID3D11DepthStencilState pDepthStencilState, UINT StencilRef);
    void SOSetTargets(UINT NumBuffers, ID3D11Buffer* ppSOTargets, UINT* pOffsets);
    void DrawAuto();
    void DrawIndexedInstancedIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void DrawInstancedIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ);
    void DispatchIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void RSSetState(ID3D11RasterizerState pRasterizerState);
    void RSSetViewports(UINT NumViewports, D3D11_VIEWPORT* pViewports);
    void RSSetScissorRects(UINT NumRects, D3D11_RECT* pRects);
    void CopySubresourceRegion(ID3D11Resource pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, ID3D11Resource pSrcResource, UINT SrcSubresource, D3D11_BOX* pSrcBox);
    void CopyResource(ID3D11Resource pDstResource, ID3D11Resource pSrcResource);
    void UpdateSubresource(ID3D11Resource pDstResource, UINT DstSubresource, D3D11_BOX* pDstBox, void* pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch);
    void CopyStructureCount(ID3D11Buffer pDstBuffer, UINT DstAlignedByteOffset, ID3D11UnorderedAccessView pSrcView);
    void ClearRenderTargetView(ID3D11RenderTargetView pRenderTargetView, FLOAT[4] ColorRGBA);
    void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView pUnorderedAccessView, UINT[4] Values);
    void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView pUnorderedAccessView, FLOAT[4] Values);
    void ClearDepthStencilView(ID3D11DepthStencilView pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil);
    void GenerateMips(ID3D11ShaderResourceView pShaderResourceView);
    void SetResourceMinLOD(ID3D11Resource pResource, FLOAT MinLOD);
    FLOAT GetResourceMinLOD(ID3D11Resource pResource);
    void ResolveSubresource(ID3D11Resource pDstResource, UINT DstSubresource, ID3D11Resource pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format);
    void ExecuteCommandList(ID3D11CommandList pCommandList, BOOL RestoreContextState);
    void HSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void HSSetShader(ID3D11HullShader pHullShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void HSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void HSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void DSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void DSSetShader(ID3D11DomainShader pDomainShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void DSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void DSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void CSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void CSSetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews, UINT* pUAVInitialCounts);
    void CSSetShader(ID3D11ComputeShader pComputeShader, ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
    void CSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void CSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void VSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void PSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void PSGetShader(ID3D11PixelShader* ppPixelShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void PSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void VSGetShader(ID3D11VertexShader* ppVertexShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void PSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void IAGetInputLayout(ID3D11InputLayout* ppInputLayout);
    void IAGetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppVertexBuffers, UINT* pStrides, UINT* pOffsets);
    void IAGetIndexBuffer(ID3D11Buffer* pIndexBuffer, DXGI_FORMAT* Format, UINT* Offset);
    void GSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void GSGetShader(ID3D11GeometryShader* ppGeometryShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY* pTopology);
    void VSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void VSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void GetPredication(ID3D11Predicate* ppPredicate, BOOL* pPredicateValue);
    void GSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void GSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void OMGetRenderTargets(UINT NumViews, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView);
    void OMGetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
    void OMGetBlendState(ID3D11BlendState* ppBlendState, FLOAT[4] BlendFactor, UINT* pSampleMask);
    void OMGetDepthStencilState(ID3D11DepthStencilState* ppDepthStencilState, UINT* pStencilRef);
    void SOGetTargets(UINT NumBuffers, ID3D11Buffer* ppSOTargets);
    void RSGetState(ID3D11RasterizerState* ppRasterizerState);
    void RSGetViewports(UINT* pNumViewports, D3D11_VIEWPORT* pViewports);
    void RSGetScissorRects(UINT* pNumRects, D3D11_RECT* pRects);
    void HSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void HSGetShader(ID3D11HullShader* ppHullShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void HSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void HSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void DSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void DSGetShader(ID3D11DomainShader* ppDomainShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void DSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void DSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void CSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
    void CSGetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
    void CSGetShader(ID3D11ComputeShader* ppComputeShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
    void CSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
    void CSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
    void ClearState();
    void Flush();
    D3D11_DEVICE_CONTEXT_TYPE GetType();
    UINT GetContextFlags();
    HRESULT FinishCommandList(BOOL RestoreDeferredContextState, ID3D11CommandList* ppCommandList);
}
enum D3D11_MAP
{
    D3D11_MAP_READ = 0x1,
    D3D11_MAP_WRITE = 0x2,
    D3D11_MAP_READ_WRITE = 0x3,
    D3D11_MAP_WRITE_DISCARD = 0x4,
    D3D11_MAP_WRITE_NO_OVERWRITE = 0x5,
}
struct D3D11_MAPPED_SUBRESOURCE
{
    void* pData;
    UINT RowPitch;
    UINT DepthPitch;
}
alias D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
struct D3D11_VIEWPORT
{
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
}
alias D3D11_RECT = RECT;
struct D3D11_BOX
{
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
}
interface ID3D11CommandList: ID3D11DeviceChild
{
    enum iidof = parseGUID("a24bc4d1-769e-43f7-8013-98ff566c18e2");
    UINT GetContextFlags();
}
enum D3D11_DEVICE_CONTEXT_TYPE
{
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x0,
    D3D11_DEVICE_CONTEXT_DEFERRED = 0x1,
}
struct D3D11_COUNTER_INFO
{
    D3D11_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
}
enum D3D11_COUNTER_TYPE
{
    D3D11_COUNTER_TYPE_FLOAT32 = 0x0,
    D3D11_COUNTER_TYPE_UINT16 = 0x1,
    D3D11_COUNTER_TYPE_UINT32 = 0x2,
    D3D11_COUNTER_TYPE_UINT64 = 0x3,
}
enum D3D11_FEATURE
{
    D3D11_FEATURE_THREADING = 0x0,
    D3D11_FEATURE_DOUBLES = 0x1,
    D3D11_FEATURE_FORMAT_SUPPORT = 0x2,
    D3D11_FEATURE_FORMAT_SUPPORT2 = 0x3,
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x4,
    D3D11_FEATURE_D3D11_OPTIONS = 0x5,
    D3D11_FEATURE_ARCHITECTURE_INFO = 0x6,
    D3D11_FEATURE_D3D9_OPTIONS = 0x7,
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 0x8,
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 0x9,
    D3D11_FEATURE_D3D11_OPTIONS1 = 0xa,
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 0xb,
    D3D11_FEATURE_MARKER_SUPPORT = 0xc,
    D3D11_FEATURE_D3D9_OPTIONS1 = 0xd,
    D3D11_FEATURE_D3D11_OPTIONS2 = 0xe,
    D3D11_FEATURE_D3D11_OPTIONS3 = 0xf,
    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 0x10,
    D3D11_FEATURE_D3D11_OPTIONS4 = 0x11,
    D3D11_FEATURE_SHADER_CACHE = 0x12,
    D3D11_FEATURE_D3D11_OPTIONS5 = 0x13,
}
interface ID3D11VideoDecoder: ID3D11DeviceChild
{
    enum iidof = parseGUID("3c9c5b51-995d-48d1-9b8d-fa5caeded65c");
    HRESULT GetCreationParameters(D3D11_VIDEO_DECODER_DESC* pVideoDesc, D3D11_VIDEO_DECODER_CONFIG* pConfig);
    HRESULT GetDriverHandle(HANDLE* pDriverHandle);
}
struct D3D11_VIDEO_DECODER_DESC
{
    GUID Guid;
    UINT SampleWidth;
    UINT SampleHeight;
    DXGI_FORMAT OutputFormat;
}
struct D3D11_VIDEO_DECODER_CONFIG
{
    GUID guidConfigBitstreamEncryption;
    GUID guidConfigMBcontrolEncryption;
    GUID guidConfigResidDiffEncryption;
    UINT ConfigBitstreamRaw;
    UINT ConfigMBcontrolRasterOrder;
    UINT ConfigResidDiffHost;
    UINT ConfigSpatialResid8;
    UINT ConfigResid8Subtraction;
    UINT ConfigSpatialHost8or9Clipping;
    UINT ConfigSpatialResidInterleaved;
    UINT ConfigIntraResidUnsigned;
    UINT ConfigResidDiffAccelerator;
    UINT ConfigHostInverseScan;
    UINT ConfigSpecificIDCT;
    UINT Config4GroupedCoefs;
    USHORT ConfigMinRenderTargetBuffCount;
    USHORT ConfigDecoderSpecific;
}
interface ID3D11VideoProcessorEnumerator: ID3D11DeviceChild
{
    enum iidof = parseGUID("31627037-53ab-4200-9061-05faa9ab45f9");
    HRESULT GetVideoProcessorContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pContentDesc);
    HRESULT CheckVideoProcessorFormat(DXGI_FORMAT Format, UINT* pFlags);
    HRESULT GetVideoProcessorCaps(D3D11_VIDEO_PROCESSOR_CAPS* pCaps);
    HRESULT GetVideoProcessorRateConversionCaps(UINT TypeIndex, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps);
    HRESULT GetVideoProcessorCustomRate(UINT TypeIndex, UINT CustomRateIndex, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE* pRate);
    HRESULT GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, D3D11_VIDEO_PROCESSOR_FILTER_RANGE* pRange);
}
struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
{
    D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    DXGI_RATIONAL InputFrameRate;
    UINT InputWidth;
    UINT InputHeight;
    DXGI_RATIONAL OutputFrameRate;
    UINT OutputWidth;
    UINT OutputHeight;
    D3D11_VIDEO_USAGE Usage;
}
enum D3D11_VIDEO_FRAME_FORMAT
{
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0x0,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 0x1,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 0x2,
}
enum D3D11_VIDEO_USAGE
{
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0x0,
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 0x1,
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 0x2,
}
struct D3D11_VIDEO_PROCESSOR_CAPS
{
    UINT DeviceCaps;
    UINT FeatureCaps;
    UINT FilterCaps;
    UINT InputFormatCaps;
    UINT AutoStreamCaps;
    UINT StereoCaps;
    UINT RateConversionCapsCount;
    UINT MaxInputStreams;
    UINT MaxStreamStates;
}
struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
{
    UINT PastFrames;
    UINT FutureFrames;
    UINT ProcessorCaps;
    UINT ITelecineCaps;
    UINT CustomRateCount;
}
struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
{
    DXGI_RATIONAL CustomRate;
    UINT OutputFrames;
    BOOL InputInterlaced;
    UINT InputFramesOrFields;
}
enum D3D11_VIDEO_PROCESSOR_FILTER
{
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0x0,
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 0x1,
    D3D11_VIDEO_PROCESSOR_FILTER_HUE = 0x2,
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 0x3,
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 0x4,
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 0x5,
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 0x6,
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 0x7,
}
struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
{
    int Minimum;
    int Maximum;
    int Default;
    float Multiplier;
}
interface ID3D11VideoProcessor: ID3D11DeviceChild
{
    enum iidof = parseGUID("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c");
    void GetContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pDesc);
    void GetRateConversionCaps(D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps);
}
interface ID3D11AuthenticatedChannel: ID3D11DeviceChild
{
    enum iidof = parseGUID("3015a308-dcbd-47aa-a747-192486d14d4a");
    HRESULT GetCertificateSize(UINT* pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE* pCertificate);
    void GetChannelHandle(HANDLE* pChannelHandle);
}
interface ID3D11CryptoSession: ID3D11DeviceChild
{
    enum iidof = parseGUID("9b32f9ad-bdcc-40a6-a39d-d5c865845720");
    void GetCryptoType(GUID* pCryptoType);
    void GetDecoderProfile(GUID* pDecoderProfile);
    HRESULT GetCertificateSize(UINT* pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE* pCertificate);
    void GetCryptoSessionHandle(HANDLE* pCryptoSessionHandle);
}
interface ID3D11VideoDecoderOutputView: ID3D11View
{
    enum iidof = parseGUID("c2931aea-2a85-4f20-860f-fba1fd256e18");
    void GetDesc(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* pDesc);
}
struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
{
    GUID DecodeProfile;
    D3D11_VDOV_DIMENSION ViewDimension;
    union {
        D3D11_TEX2D_VDOV Texture2D;
    }
}
enum D3D11_VDOV_DIMENSION
{
    D3D11_VDOV_DIMENSION_UNKNOWN = 0x0,
    D3D11_VDOV_DIMENSION_TEXTURE2D = 0x1,
}
// struct nameless
struct D3D11_TEX2D_VDOV
{
    UINT ArraySlice;
}
interface ID3D11VideoProcessorInputView: ID3D11View
{
    enum iidof = parseGUID("11ec5a5f-51dc-4945-ab34-6e8c21300ea5");
    void GetDesc(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* pDesc);
}
struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
{
    UINT FourCC;
    D3D11_VPIV_DIMENSION ViewDimension;
    union {
        D3D11_TEX2D_VPIV Texture2D;
    }
}
enum D3D11_VPIV_DIMENSION
{
    D3D11_VPIV_DIMENSION_UNKNOWN = 0x0,
    D3D11_VPIV_DIMENSION_TEXTURE2D = 0x1,
}
// struct nameless
struct D3D11_TEX2D_VPIV
{
    UINT MipSlice;
    UINT ArraySlice;
}
interface ID3D11VideoProcessorOutputView: ID3D11View
{
    enum iidof = parseGUID("a048285e-25a9-4527-bd93-d68b68c44254");
    void GetDesc(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* pDesc);
}
struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
{
    D3D11_VPOV_DIMENSION ViewDimension;
    union {
        D3D11_TEX2D_VPOV Texture2D;
        D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
    }
}
enum D3D11_VPOV_DIMENSION
{
    D3D11_VPOV_DIMENSION_UNKNOWN = 0x0,
    D3D11_VPOV_DIMENSION_TEXTURE2D = 0x1,
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 0x2,
}
// struct nameless
struct D3D11_TEX2D_VPOV
{
    UINT MipSlice;
}
struct D3D11_TEX2D_ARRAY_VPOV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
interface ID3D11VideoContext: ID3D11DeviceChild
{
    enum iidof = parseGUID("61f21c45-3c0e-4a74-9cea-67100d9ad5e4");
    HRESULT GetDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, UINT* pBufferSize, void** ppBuffer);
    HRESULT ReleaseDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);
    HRESULT DecoderBeginFrame(ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView pView, UINT ContentKeySize, void* pContentKey);
    HRESULT DecoderEndFrame(ID3D11VideoDecoder pDecoder);
    HRESULT SubmitDecoderBuffers(ID3D11VideoDecoder pDecoder, UINT NumBuffers, D3D11_VIDEO_DECODER_BUFFER_DESC* pBufferDesc);
    APP_DEPRECATED_HRESULT DecoderExtension(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_EXTENSION* pExtensionData);
    void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, BOOL Enable, RECT* pRect);
    void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, BOOL YCbCr, D3D11_VIDEO_COLOR* pColor);
    void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
    void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, UINT StreamIndex);
    void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, BOOL Enable, SIZE Size);
    void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, BOOL Enable);
    APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtension(ID3D11VideoProcessor pVideoProcessor, GUID* pExtensionGuid, UINT DataSize, void* pData);
    void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, BOOL* Enabled, RECT* pRect);
    void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, BOOL* pYCbCr, D3D11_VIDEO_COLOR* pColor);
    void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
    void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE* pAlphaFillMode, UINT* pStreamIndex);
    void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, BOOL* pEnabled, SIZE* pSize);
    void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, BOOL* pEnabled);
    APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtension(ID3D11VideoProcessor pVideoProcessor, GUID* pExtensionGuid, UINT DataSize, void* pData);
    void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);
    void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
    void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, BOOL RepeatFrame, DXGI_RATIONAL* pCustomRate);
    void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, RECT* pRect);
    void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, RECT* pRect);
    void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Alpha);
    void VideoProcessorSetStreamPalette(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, UINT Count, UINT* pEntries);
    void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, DXGI_RATIONAL* pSourceAspectRatio, DXGI_RATIONAL* pDestinationAspectRatio);
    void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Lower, FLOAT Upper);
    void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, BOOL LeftViewFrame0, BOOL BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);
    void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable);
    void VideoProcessorSetStreamFilter(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL Enable, int Level);
    APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtension(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, GUID* pExtensionGuid, UINT DataSize, void* pData);
    void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT* pFrameFormat);
    void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
    void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE* pOutputRate, BOOL* pRepeatFrame, DXGI_RATIONAL* pCustomRate);
    void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled, RECT* pRect);
    void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled, RECT* pRect);
    void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled, FLOAT* pAlpha);
    void VideoProcessorGetStreamPalette(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, UINT Count, UINT* pEntries);
    void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled, DXGI_RATIONAL* pSourceAspectRatio, DXGI_RATIONAL* pDestinationAspectRatio);
    void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled, FLOAT* pLower, FLOAT* pUpper);
    void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT* pFormat, BOOL* pLeftViewFrame0, BOOL* pBaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE* pFlipMode, int* MonoOffset);
    void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnabled);
    void VideoProcessorGetStreamFilter(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL* pEnabled, int* pLevel);
    APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtension(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, GUID* pExtensionGuid, UINT DataSize, void* pData);
    HRESULT VideoProcessorBlt(ID3D11VideoProcessor pVideoProcessor, ID3D11VideoProcessorOutputView pView, UINT OutputFrame, UINT StreamCount, D3D11_VIDEO_PROCESSOR_STREAM* pStreams);
    HRESULT NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession pCryptoSession, UINT DataSize, void* pData);
    void EncryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, UINT IVSize, void* pIV);
    void DecryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, D3D11_ENCRYPTED_BLOCK_INFO* pEncryptedBlockInfo, UINT ContentKeySize, void* pContentKey, UINT IVSize, void* pIV);
    void StartSessionKeyRefresh(ID3D11CryptoSession pCryptoSession, UINT RandomNumberSize, void* pRandomNumber);
    void FinishSessionKeyRefresh(ID3D11CryptoSession pCryptoSession);
    HRESULT GetEncryptionBltKey(ID3D11CryptoSession pCryptoSession, UINT KeySize, void* pReadbackKey);
    HRESULT NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel pChannel, UINT DataSize, void* pData);
    HRESULT QueryAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, UINT InputSize, void* pInput, UINT OutputSize, void* pOutput);
    HRESULT ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, UINT InputSize, void* pInput, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT* pOutput);
    void VideoProcessorSetStreamRotation(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);
    void VideoProcessorGetStreamRotation(ID3D11VideoProcessor pVideoProcessor, UINT StreamIndex, BOOL* pEnable, D3D11_VIDEO_PROCESSOR_ROTATION* pRotation);
}
enum D3D11_VIDEO_DECODER_BUFFER_TYPE
{
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0x0,
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 0x1,
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 0x2,
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 0x3,
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 0x4,
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 0x5,
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 0x6,
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 0x7,
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 0x8,
}
struct D3D11_VIDEO_DECODER_BUFFER_DESC
{
    D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    UINT BufferIndex;
    UINT DataOffset;
    UINT DataSize;
    UINT FirstMBaddress;
    UINT NumMBsInBuffer;
    UINT Width;
    UINT Height;
    UINT Stride;
    UINT ReservedBits;
    void* pIV;
    UINT IVSize;
    BOOL PartialEncryption;
    D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}
struct D3D11_ENCRYPTED_BLOCK_INFO
{
    UINT NumEncryptedBytesAtBeginning;
    UINT NumBytesInSkipPattern;
    UINT NumBytesInEncryptPattern;
}
alias APP_DEPRECATED_HRESULT = HRESULT;
struct D3D11_VIDEO_DECODER_EXTENSION
{
    UINT Function;
    void* pPrivateInputData;
    UINT PrivateInputDataSize;
    void* pPrivateOutputData;
    UINT PrivateOutputDataSize;
    UINT ResourceCount;
    ID3D11Resource* ppResourceList;
}
struct D3D11_VIDEO_COLOR
{
    union {
        D3D11_VIDEO_COLOR_YCbCrA YCbCr;
        D3D11_VIDEO_COLOR_RGBA RGBA;
    }
}
// struct nameless
struct D3D11_VIDEO_COLOR_YCbCrA
{
    float Y;
    float Cb;
    float Cr;
    float A;
}
struct D3D11_VIDEO_COLOR_RGBA
{
    float R;
    float G;
    float B;
    float A;
}
struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
{
    UINT Usage;
    UINT RGB_Range;
    UINT YCbCr_Matrix;
    UINT YCbCr_xvYCC;
    UINT Nominal_Range;
    UINT Reserved;
}
enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
{
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0x0,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 0x1,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 0x2,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 0x3,
}
enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
{
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0x0,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 0x1,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 0x2,
}
enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
{
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0x0,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 0x1,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 0x2,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 0x3,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 0x4,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 0x5,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 0x6,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 0x7,
}
enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
{
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0x0,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 0x1,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 0x2,
}
struct D3D11_VIDEO_PROCESSOR_STREAM
{
    BOOL Enable;
    UINT OutputIndex;
    UINT InputFrameOrField;
    UINT PastFrames;
    UINT FutureFrames;
    ID3D11VideoProcessorInputView* ppPastSurfaces;
    ID3D11VideoProcessorInputView pInputSurface;
    ID3D11VideoProcessorInputView* ppFutureSurfaces;
    ID3D11VideoProcessorInputView* ppPastSurfacesRight;
    ID3D11VideoProcessorInputView pInputSurfaceRight;
    ID3D11VideoProcessorInputView* ppFutureSurfacesRight;
}
struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
{
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
}
struct D3D11_OMAC
{
    BYTE[16] Omac;
}
enum D3D11_VIDEO_PROCESSOR_ROTATION
{
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0x0,
    D3D11_VIDEO_PROCESSOR_ROTATION_90 = 0x1,
    D3D11_VIDEO_PROCESSOR_ROTATION_180 = 0x2,
    D3D11_VIDEO_PROCESSOR_ROTATION_270 = 0x3,
}
interface ID3D11VideoDevice: IUnknown
{
    enum iidof = parseGUID("10ec4d5b-975a-4689-b9e4-d0aac30fe333");
    HRESULT CreateVideoDecoder(D3D11_VIDEO_DECODER_DESC* pVideoDesc, D3D11_VIDEO_DECODER_CONFIG* pConfig, ID3D11VideoDecoder* ppDecoder);
    HRESULT CreateVideoProcessor(ID3D11VideoProcessorEnumerator pEnum, UINT RateConversionIndex, ID3D11VideoProcessor* ppVideoProcessor);
    HRESULT CreateAuthenticatedChannel(D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ID3D11AuthenticatedChannel* ppAuthenticatedChannel);
    HRESULT CreateCryptoSession(GUID* pCryptoType, GUID* pDecoderProfile, GUID* pKeyExchangeType, ID3D11CryptoSession* ppCryptoSession);
    HRESULT CreateVideoDecoderOutputView(ID3D11Resource pResource, D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* pDesc, ID3D11VideoDecoderOutputView* ppVDOVView);
    HRESULT CreateVideoProcessorInputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* pDesc, ID3D11VideoProcessorInputView* ppVPIView);
    HRESULT CreateVideoProcessorOutputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* pDesc, ID3D11VideoProcessorOutputView* ppVPOView);
    HRESULT CreateVideoProcessorEnumerator(D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pDesc, ID3D11VideoProcessorEnumerator* ppEnum);
    UINT GetVideoDecoderProfileCount();
    HRESULT GetVideoDecoderProfile(UINT Index, GUID* pDecoderProfile);
    HRESULT CheckVideoDecoderFormat(GUID* pDecoderProfile, DXGI_FORMAT Format, BOOL* pSupported);
    HRESULT GetVideoDecoderConfigCount(D3D11_VIDEO_DECODER_DESC* pDesc, UINT* pCount);
    HRESULT GetVideoDecoderConfig(D3D11_VIDEO_DECODER_DESC* pDesc, UINT Index, D3D11_VIDEO_DECODER_CONFIG* pConfig);
    HRESULT GetContentProtectionCaps(GUID* pCryptoType, GUID* pDecoderProfile, D3D11_VIDEO_CONTENT_PROTECTION_CAPS* pCaps);
    HRESULT CheckCryptoKeyExchange(GUID* pCryptoType, GUID* pDecoderProfile, UINT Index, GUID* pKeyExchangeType);
    HRESULT SetPrivateData(GUID* guid, UINT DataSize, void* pData);
    HRESULT SetPrivateDataInterface(GUID* guid, IUnknown pData);
}
enum D3D11_AUTHENTICATED_CHANNEL_TYPE
{
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 0x1,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 0x2,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 0x3,
}
struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
{
    UINT Caps;
    UINT KeyExchangeTypeCount;
    UINT BlockAlignmentSize;
    ULONGLONG ProtectedMemorySize;
}
alias D3D11_PRIMITIVE = D3D_PRIMITIVE;
struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
{
    UINT VertexCountPerInstance;
    UINT InstanceCount;
    UINT StartVertexLocation;
    UINT StartInstanceLocation;
}
struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
{
    UINT IndexCountPerInstance;
    UINT InstanceCount;
    UINT StartIndexLocation;
    INT BaseVertexLocation;
    UINT StartInstanceLocation;
}
enum D3D11_BIND_FLAG
{
    D3D11_BIND_VERTEX_BUFFER = 0x1,
    D3D11_BIND_INDEX_BUFFER = 0x2,
    D3D11_BIND_CONSTANT_BUFFER = 0x4,
    D3D11_BIND_SHADER_RESOURCE = 0x8,
    D3D11_BIND_STREAM_OUTPUT = 0x10,
    D3D11_BIND_RENDER_TARGET = 0x20,
    D3D11_BIND_DEPTH_STENCIL = 0x40,
    D3D11_BIND_UNORDERED_ACCESS = 0x80,
    D3D11_BIND_DECODER = 0x200,
    D3D11_BIND_VIDEO_ENCODER = 0x400,
}
enum D3D11_CPU_ACCESS_FLAG
{
    D3D11_CPU_ACCESS_WRITE = 0x10000,
    D3D11_CPU_ACCESS_READ = 0x20000,
}
enum D3D11_RESOURCE_MISC_FLAG
{
    D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
    D3D11_RESOURCE_MISC_SHARED = 0x2,
    D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800,
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
    D3D11_RESOURCE_MISC_GUARDED = 0x8000,
    D3D11_RESOURCE_MISC_TILE_POOL = 0x20000,
    D3D11_RESOURCE_MISC_TILED = 0x40000,
    D3D11_RESOURCE_MISC_HW_PROTECTED = 0x80000,
}
enum D3D11_MAP_FLAG
{
    D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000,
}
enum D3D11_RAISE_FLAG
{
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1,
}
enum D3D11_CLEAR_FLAG
{
    D3D11_CLEAR_DEPTH = 0x1,
    D3D11_CLEAR_STENCIL = 0x2,
}
enum D3D11_COLOR_WRITE_ENABLE
{
    D3D11_COLOR_WRITE_ENABLE_RED = 0x1,
    D3D11_COLOR_WRITE_ENABLE_GREEN = 0x2,
    D3D11_COLOR_WRITE_ENABLE_BLUE = 0x4,
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 0x8,
    D3D11_COLOR_WRITE_ENABLE_ALL = 0xf,
}
enum D3D11_TEXTURECUBE_FACE
{
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0x0,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 0x1,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 0x2,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 0x3,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 0x4,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 0x5,
}
enum D3D11_BUFFEREX_SRV_FLAG
{
    D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1,
}
enum D3D11_DSV_FLAG
{
    D3D11_DSV_READ_ONLY_DEPTH = 0x1,
    D3D11_DSV_READ_ONLY_STENCIL = 0x2,
}
enum D3D11_BUFFER_UAV_FLAG
{
    D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
    D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
    D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4,
}
enum D3D11_FILTER_TYPE
{
    D3D11_FILTER_TYPE_POINT = 0x0,
    D3D11_FILTER_TYPE_LINEAR = 0x1,
}
enum D3D11_FILTER_REDUCTION_TYPE
{
    D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0x0,
    D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 0x1,
    D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 0x2,
    D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 0x3,
}
enum D3D11_FORMAT_SUPPORT
{
    D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
    D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
    D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
    D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
    D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
    D3D11_FORMAT_SUPPORT_MIP = 0x1000,
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
    D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
    D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000,
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 0x8000000,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 0x20000000,
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 0x40000000,
}
enum D3D11_FORMAT_SUPPORT2
{
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
    D3D11_FORMAT_SUPPORT2_TILED = 0x200,
    D3D11_FORMAT_SUPPORT2_SHAREABLE = 0x400,
    D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000,
}
enum D3D11_ASYNC_GETDATA_FLAG
{
    D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1,
}
enum D3D11_QUERY_MISC_FLAG
{
    D3D11_QUERY_MISC_PREDICATEHINT = 0x1,
}
struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
    UINT64 Frequency;
    BOOL Disjoint;
}
struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
{
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
}
struct D3D11_QUERY_DATA_SO_STATISTICS
{
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
}
enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
{
    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe,
}
struct D3D11_FEATURE_DATA_THREADING
{
    BOOL DriverConcurrentCreates;
    BOOL DriverCommandLists;
}
struct D3D11_FEATURE_DATA_DOUBLES
{
    BOOL DoublePrecisionFloatShaderOps;
}
struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport;
}
struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
{
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport2;
}
struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
{
    BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS
{
    BOOL OutputMergerLogicOp;
    BOOL UAVOnlyRenderingForcedSampleCount;
    BOOL DiscardAPIsSeenByDriver;
    BOOL FlagsForUpdateAndCopySeenByDriver;
    BOOL ClearView;
    BOOL CopyWithOverlap;
    BOOL ConstantBufferPartialUpdate;
    BOOL ConstantBufferOffsetting;
    BOOL MapNoOverwriteOnDynamicConstantBuffer;
    BOOL MapNoOverwriteOnDynamicBufferSRV;
    BOOL MultisampleRTVWithForcedSampleCountOne;
    BOOL SAD4ShaderInstructions;
    BOOL ExtendedDoublesShaderInstructions;
    BOOL ExtendedResourceSharing;
}
struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
{
    BOOL TileBasedDeferredRenderer;
}
struct D3D11_FEATURE_DATA_D3D9_OPTIONS
{
    BOOL FullNonPow2TextureSupport;
}
struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
{
    BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
}
enum D3D11_SHADER_MIN_PRECISION_SUPPORT
{
    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2,
}
struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
{
    UINT PixelShaderMinPrecision;
    UINT AllOtherShaderStagesMinPrecision;
}
enum D3D11_TILED_RESOURCES_TIER
{
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0x0,
    D3D11_TILED_RESOURCES_TIER_1 = 0x1,
    D3D11_TILED_RESOURCES_TIER_2 = 0x2,
    D3D11_TILED_RESOURCES_TIER_3 = 0x3,
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
{
    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    BOOL MinMaxFiltering;
    BOOL ClearViewAlsoSupportsDepthOnlyFormats;
    BOOL MapOnDefaultBuffers;
}
struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
{
    BOOL SimpleInstancingSupported;
}
struct D3D11_FEATURE_DATA_MARKER_SUPPORT
{
    BOOL Profile;
}
struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
{
    BOOL FullNonPow2TextureSupported;
    BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
    BOOL SimpleInstancingSupported;
    BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}
enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
{
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0x0,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 0x1,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 0x2,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 0x3,
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
{
    BOOL PSSpecifiedStencilRefSupported;
    BOOL TypedUAVLoadAdditionalFormats;
    BOOL ROVsSupported;
    D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    BOOL MapOnDefaultTextures;
    BOOL StandardSwizzle;
    BOOL UnifiedMemoryArchitecture;
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
{
    BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}
struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
    UINT MaxGPUVirtualAddressBitsPerResource;
    UINT MaxGPUVirtualAddressBitsPerProcess;
}
enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
{
    D3D11_SHADER_CACHE_SUPPORT_NONE = 0x0,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x1,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x2,
}
struct D3D11_FEATURE_DATA_SHADER_CACHE
{
    UINT SupportFlags;
}
enum D3D11_SHARED_RESOURCE_TIER
{
    D3D11_SHARED_RESOURCE_TIER_0 = 0x0,
    D3D11_SHARED_RESOURCE_TIER_1 = 0x1,
    D3D11_SHARED_RESOURCE_TIER_2 = 0x2,
}
struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
{
    D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
}
struct _D3D11_AES_CTR_IV
{
    UINT64 IV;
    UINT64 Count;
}
alias D3D11_AES_CTR_IV = _D3D11_AES_CTR_IV;
enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
{
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x1,
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x2,
}
enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
{
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 0x1,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 0x2,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 0x4,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x8,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 0x10,
}
enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
{
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 0x1,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 0x2,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 0x4,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 0x8,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 0x10,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 0x20,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 0x40,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 0x80,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 0x100,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 0x200,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 0x400,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 0x800,
}
enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
{
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 0x1,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 0x2,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 0x4,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 0x8,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 0x10,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 0x20,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 0x40,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 0x80,
}
enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
{
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 0x1,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 0x2,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 0x4,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 0x8,
}
enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
{
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 0x1,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 0x2,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 0x4,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 0x8,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 0x10,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 0x20,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 0x40,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 0x80,
}
enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
{
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 0x1,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 0x2,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 0x4,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 0x8,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 0x10,
}
enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
{
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 0x1,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 0x2,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 0x4,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x8,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 0x10,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 0x20,
}
enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
{
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 0x1,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 0x2,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 0x4,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 0x8,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 0x10,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 0x20,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 0x40,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 0x80,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 0x100,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = 0x80000000,
}
enum D3D11_CONTENT_PROTECTION_CAPS
{
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 0x1,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 0x2,
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 0x4,
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 0x8,
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 0x10,
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 0x20,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 0x40,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 0x80,
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 0x100,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 0x200,
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 0x400,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 0x800,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x1000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 0x2000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 0x4000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 0x8000,
}
enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
{
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0x0,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 0x1,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 0x2,
}
struct D3D11_AUTHENTICATED_QUERY_INPUT
{
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT
{
    D3D11_OMAC omac;
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
}
struct D3D11_AUTHENTICATED_PROTECTION_FLAGS
{
    __MIDL___MIDL_itf_d3d11_0000_0034_0001 Flags;
    UINT Value;
}
struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
{
    UINT ProtectionEnabled;
    UINT OverlayOrFullscreenRequired;
    UINT Reserved;
}
struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}
struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}
struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
}
struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DecoderHandle;
}
struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT RestrictedSharedResourceProcessCount;
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT ProcessIndex;
}
enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
{
    D3D11_PROCESSIDTYPE_UNKNOWN = 0x0,
    D3D11_PROCESSIDTYPE_DWM = 0x1,
    D3D11_PROCESSIDTYPE_HANDLE = 0x2,
}
struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT ProcessIndex;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    HANDLE ProcessHandle;
}
struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT UnrestrictedProtectedSharedResourceCount;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDCount;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
}
struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
    UINT64 OutputID;
}
enum D3D11_BUS_TYPE
{
    D3D11_BUS_TYPE_OTHER = 0x0,
    D3D11_BUS_TYPE_PCI = 0x1,
    D3D11_BUS_TYPE_PCIX = 0x2,
    D3D11_BUS_TYPE_PCIEXPRESS = 0x3,
    D3D11_BUS_TYPE_AGP = 0x4,
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x10000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x20000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x30000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x40000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x50000,
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = 0x80000000,
}
struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_BUS_TYPE BusType;
    BOOL AccessibleInContiguousBlocks;
    BOOL AccessibleInNonContiguousBlocks;
}
alias D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT;
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidCount;
}
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT EncryptionGuidIndex;
}
struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidIndex;
    GUID EncryptionGuid;
}
struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    GUID EncryptionGuid;
}
struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
{
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
}
struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    UINT StartSequenceQuery;
    UINT StartSequenceConfigure;
}
struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}
struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}
struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    HANDLE ProcessHandle;
    BOOL AllowAccess;
}
struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    GUID EncryptionGuid;
}
enum D3D11_CREATE_DEVICE_FLAG
{
    D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
    D3D11_CREATE_DEVICE_DEBUG = 0x2,
    D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
    D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
    D3D11_CREATE_DEVICE_DEBUGGABLE = 0x40,
    D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x100,
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x800,
}
alias PFN_D3D11_CREATE_DEVICE = void*;
extern(C) HRESULT D3D11CreateDevice(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, D3D_FEATURE_LEVEL* pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device* ppDevice, D3D_FEATURE_LEVEL* pFeatureLevel, ID3D11DeviceContext* ppImmediateContext);
alias PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = void*;
extern(C) HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, D3D_FEATURE_LEVEL* pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, IDXGISwapChain* ppSwapChain, ID3D11Device* ppDevice, D3D_FEATURE_LEVEL* pFeatureLevel, ID3D11DeviceContext* ppImmediateContext);
