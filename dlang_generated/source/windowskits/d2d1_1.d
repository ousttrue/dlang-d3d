// This source code was generated by regenerator
module windowskits.d2d1_1;
import windowskits.d2d1;
import core.sys.windows.windef;
import core.sys.windows.basetsd;
import windowskits.dcommon;
import windowskits.minwindef;
import core.sys.windows.winnt;
import windowskits.dxgi;
import windowskits.wincodec;
import windowskits.winnt;
import windowskits.guiddef;
import core.sys.windows.basetyps;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.dwrite;
import windowskits.d2dbasetypes;
import windowskits.dxgitype;
import windowskits.dxgiformat;
import windowskits.documenttarget;
import windowskits.objidlbase;
import windowskits.windef;
import windowskits.d2d1effectauthor;
interface ID2D1Device: ID2D1Resource
{
    static const iidof = parseGUID("47dd575d-ac05-4cdd-8049-9b02cd16f44c");
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext* deviceContext);
    HRESULT CreatePrintControl(IWICImagingFactory wicFactory, IPrintDocumentPackageTarget documentTarget, const(D2D1_PRINT_CONTROL_PROPERTIES)* printControlProperties, ID2D1PrintControl* printControl);
    void SetMaximumTextureMemory(UINT64 maximumInBytes);
    UINT64 GetMaximumTextureMemory();
    void ClearResources(UINT32 millisecondsSinceUse=0);
}
enum D2D1_DEVICE_CONTEXT_OPTIONS
{
    _NONE = 0x0,
    _ENABLE_MULTITHREADED_OPTIMIZATIONS = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1DeviceContext: ID2D1RenderTarget
{
    static const iidof = parseGUID("e8f7fe7a-191c-466d-ad95-975678bda998");
    HRESULT CreateBitmap(D2D1_SIZE_U size, const(void)* sourceData, UINT32 pitch, const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, ID2D1Bitmap1* bitmap);
    HRESULT CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, ID2D1Bitmap1* bitmap);
    HRESULT CreateColorContext(D2D1_COLOR_SPACE space, const(BYTE)* profile, UINT32 profileSize, ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromFilename(PCWSTR filename, ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromWicColorContext(IWICColorContext wicColorContext, ID2D1ColorContext* colorContext);
    HRESULT CreateBitmapFromDxgiSurface(IDXGISurface surface, const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, ID2D1Bitmap1* bitmap);
    HRESULT CreateEffect(ref IID effectId, ID2D1Effect* effect);
    HRESULT CreateGradientStopCollection(const(D2D1_GRADIENT_STOP)* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1* gradientStopCollection1);
    HRESULT CreateImageBrush(ID2D1Image image, const(D2D1_IMAGE_BRUSH_PROPERTIES)* imageBrushProperties, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1ImageBrush* imageBrush);
    HRESULT CreateBitmapBrush(ID2D1Bitmap bitmap, const(D2D1_BITMAP_BRUSH_PROPERTIES1)* bitmapBrushProperties, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1BitmapBrush1* bitmapBrush);
    HRESULT CreateCommandList(ID2D1CommandList* commandList);
    BOOL IsDxgiFormatSupported(DXGI_FORMAT format);
    BOOL IsBufferPrecisionSupported(D2D1_BUFFER_PRECISION bufferPrecision);
    HRESULT GetImageLocalBounds(ID2D1Image image, D2D1_RECT_F* localBounds);
    HRESULT GetImageWorldBounds(ID2D1Image image, D2D1_RECT_F* worldBounds);
    HRESULT GetGlyphRunWorldBounds(D2D1_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D1_RECT_F* bounds);
    void GetDevice(ID2D1Device* device);
    void SetTarget(ID2D1Image image);
    void GetTarget(ID2D1Image* image);
    void SetRenderingControls(const(D2D1_RENDERING_CONTROLS)* renderingControls);
    void GetRenderingControls(D2D1_RENDERING_CONTROLS* renderingControls);
    void SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    D2D1_PRIMITIVE_BLEND GetPrimitiveBlend();
    void SetUnitMode(D2D1_UNIT_MODE unitMode);
    D2D1_UNIT_MODE GetUnitMode();
    void DrawGlyphRun(D2D1_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode=DWRITE_MEASURING_MODE._NATURAL);
    void DrawImage(ID2D1Image image, const(D2D1_POINT_2F)* targetOffset=null, const(D2D1_RECT_F)* imageRectangle=null, D2D1_INTERPOLATION_MODE interpolationMode=D2D1_INTERPOLATION_MODE._LINEAR, D2D1_COMPOSITE_MODE compositeMode=D2D1_COMPOSITE_MODE._SOURCE_OVER);
    void DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D1_POINT_2F)* targetOffset=null);
    void DrawBitmap(ID2D1Bitmap bitmap, const(D2D1_RECT_F)* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const(D2D1_RECT_F)* sourceRectangle=null, const(D2D1_MATRIX_4X4_F)* perspectiveTransform=null);
    void PushLayer(const(D2D1_LAYER_PARAMETERS1)* layerParameters, ID2D1Layer layer);
    HRESULT InvalidateEffectInputRectangle(ID2D1Effect effect, UINT32 input, const(D2D1_RECT_F)* inputRectangle);
    HRESULT GetEffectInvalidRectangleCount(ID2D1Effect effect, UINT32* rectangleCount);
    HRESULT GetEffectInvalidRectangles(ID2D1Effect effect, D2D1_RECT_F* rectangles, UINT32 rectanglesCount);
    HRESULT GetEffectRequiredInputRectangles(ID2D1Effect renderEffect, const(D2D1_RECT_F)* renderImageRectangle, const(D2D1_EFFECT_INPUT_DESCRIPTION)* inputDescriptions, D2D1_RECT_F* requiredInputRects, UINT32 inputCount);
    void FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, const(D2D1_RECT_F)* destinationRectangle=null, const(D2D1_RECT_F)* sourceRectangle=null);
}
struct D2D1_BITMAP_PROPERTIES1
{
    D2D1_PIXEL_FORMAT pixelFormat;
    FLOAT dpiX;
    FLOAT dpiY;
    D2D1_BITMAP_OPTIONS bitmapOptions;
    ID2D1ColorContext colorContext;
}
enum D2D1_BITMAP_OPTIONS
{
    _NONE = 0x0,
    _TARGET = 0x1,
    _CANNOT_DRAW = 0x2,
    _CPU_READ = 0x4,
    _GDI_COMPATIBLE = 0x8,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1ColorContext: ID2D1Resource
{
    static const iidof = parseGUID("1c4820bb-5771-4518-a581-2fe4dd0ec657");
    D2D1_COLOR_SPACE GetColorSpace();
    UINT32 GetProfileSize();
    HRESULT GetProfile(BYTE* profile, UINT32 profileSize);
}
enum D2D1_COLOR_SPACE
{
    _CUSTOM = 0x0,
    _SRGB = 0x1,
    _SCRGB = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1Bitmap1: ID2D1Bitmap
{
    static const iidof = parseGUID("a898a84c-3873-4588-b08b-ebbf978df041");
    void GetColorContext(ID2D1ColorContext* colorContext);
    D2D1_BITMAP_OPTIONS GetOptions();
    HRESULT GetSurface(IDXGISurface* dxgiSurface);
    HRESULT Map(D2D1_MAP_OPTIONS options, D2D1_MAPPED_RECT* mappedRect);
    HRESULT Unmap();
}
enum D2D1_MAP_OPTIONS
{
    _NONE = 0x0,
    _READ = 0x1,
    _WRITE = 0x2,
    _DISCARD = 0x4,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_MAPPED_RECT
{
    UINT32 pitch;
    BYTE* bits;
}
interface ID2D1Effect: ID2D1Properties
{
    static const iidof = parseGUID("28211a43-7d89-476f-8181-2d6159b220ad");
    void SetInput(UINT32 index, ID2D1Image input, BOOL invalidate=TRUE);
    HRESULT SetInputCount(UINT32 inputCount);
    void GetInput(UINT32 index, ID2D1Image* input);
    UINT32 GetInputCount();
    void GetOutput(ID2D1Image* outputImage);
}
interface ID2D1Properties: IUnknown
{
    static const iidof = parseGUID("483473d7-cd46-4f9d-9d3a-3112aa80159d");
    UINT32 GetPropertyCount();
    HRESULT GetPropertyName(UINT32 index, PWSTR name, UINT32 nameCount);
    UINT32 GetPropertyNameLength(UINT32 index);
    D2D1_PROPERTY_TYPE GetType(UINT32 index);
    UINT32 GetPropertyIndex(PCWSTR name);
    HRESULT SetValueByName(PCWSTR name, D2D1_PROPERTY_TYPE type, const(BYTE)* data, UINT32 dataSize);
    HRESULT SetValue(UINT32 index, D2D1_PROPERTY_TYPE type, const(BYTE)* data, UINT32 dataSize);
    HRESULT GetValueByName(PCWSTR name, D2D1_PROPERTY_TYPE type, BYTE* data, UINT32 dataSize);
    HRESULT GetValue(UINT32 index, D2D1_PROPERTY_TYPE type, BYTE* data, UINT32 dataSize);
    UINT32 GetValueSize(UINT32 index);
    HRESULT GetSubProperties(UINT32 index, ID2D1Properties* subProperties);
}
enum D2D1_PROPERTY_TYPE
{
    _UNKNOWN = 0x0,
    _STRING = 0x1,
    _BOOL = 0x2,
    _UINT32 = 0x3,
    _INT32 = 0x4,
    _FLOAT = 0x5,
    _VECTOR2 = 0x6,
    _VECTOR3 = 0x7,
    _VECTOR4 = 0x8,
    _BLOB = 0x9,
    _IUNKNOWN = 0xa,
    _ENUM = 0xb,
    _ARRAY = 0xc,
    _CLSID = 0xd,
    _MATRIX_3X2 = 0xe,
    _MATRIX_4X3 = 0xf,
    _MATRIX_4X4 = 0x10,
    _MATRIX_5X4 = 0x11,
    _COLOR_CONTEXT = 0x12,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_BUFFER_PRECISION
{
    _UNKNOWN = 0x0,
    _8BPC_UNORM = 0x1,
    _8BPC_UNORM_SRGB = 0x2,
    _16BPC_UNORM = 0x3,
    _16BPC_FLOAT = 0x4,
    _32BPC_FLOAT = 0x5,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_COLOR_INTERPOLATION_MODE
{
    _STRAIGHT = 0x0,
    _PREMULTIPLIED = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1GradientStopCollection1: ID2D1GradientStopCollection
{
    static const iidof = parseGUID("ae1572f4-5dd0-4777-998b-9279472ae63b");
    void GetGradientStops1(D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount);
    D2D1_COLOR_SPACE GetPreInterpolationSpace();
    D2D1_COLOR_SPACE GetPostInterpolationSpace();
    D2D1_BUFFER_PRECISION GetBufferPrecision();
    D2D1_COLOR_INTERPOLATION_MODE GetColorInterpolationMode();
}
struct D2D1_IMAGE_BRUSH_PROPERTIES
{
    D2D1_RECT_F sourceRectangle;
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
}
enum D2D1_INTERPOLATION_MODE
{
    _NEAREST_NEIGHBOR = 0x0,
    _LINEAR = 0x1,
    _CUBIC = 0x2,
    _MULTI_SAMPLE_LINEAR = 0x3,
    _ANISOTROPIC = 0x4,
    _HIGH_QUALITY_CUBIC = 0x5,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1ImageBrush: ID2D1Brush
{
    static const iidof = parseGUID("fe9e984d-3f95-407c-b5db-cb94d4e8f87c");
    void SetImage(ID2D1Image image);
    void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    void SetInterpolationMode(D2D1_INTERPOLATION_MODE interpolationMode);
    void SetSourceRectangle(const(D2D1_RECT_F)* sourceRectangle);
    void GetImage(ID2D1Image* image);
    D2D1_EXTEND_MODE GetExtendModeX();
    D2D1_EXTEND_MODE GetExtendModeY();
    D2D1_INTERPOLATION_MODE GetInterpolationMode();
    void GetSourceRectangle(D2D1_RECT_F* sourceRectangle);
}
struct D2D1_BITMAP_BRUSH_PROPERTIES1
{
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
}
interface ID2D1BitmapBrush1: ID2D1BitmapBrush
{
    static const iidof = parseGUID("41343a53-e41a-49a2-91cd-21793bbb62e5");
    void SetInterpolationMode1(D2D1_INTERPOLATION_MODE interpolationMode);
    D2D1_INTERPOLATION_MODE GetInterpolationMode1();
}
interface ID2D1CommandList: ID2D1Image
{
    static const iidof = parseGUID("b4f34a19-2383-4d76-94f6-ec343657c3dc");
    HRESULT Stream(ID2D1CommandSink sink);
    HRESULT Close();
}
interface ID2D1CommandSink: IUnknown
{
    static const iidof = parseGUID("54d7898a-a061-40a7-bec7-e465bcba2c4f");
    HRESULT BeginDraw();
    HRESULT EndDraw();
    HRESULT SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    HRESULT SetTags(D2D1_TAG tag1, D2D1_TAG tag2);
    HRESULT SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);
    HRESULT SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);
    HRESULT SetTransform(const(D2D1_MATRIX_3X2_F)* transform);
    HRESULT SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    HRESULT SetUnitMode(D2D1_UNIT_MODE unitMode);
    HRESULT Clear(const(D2D1_COLOR_F)* color);
    HRESULT DrawGlyphRun(D2D1_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);
    HRESULT DrawLine(D2D1_POINT_2F point0, D2D1_POINT_2F point1, ID2D1Brush brush, FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle);
    HRESULT DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle);
    HRESULT DrawRectangle(const(D2D1_RECT_F)* rect, ID2D1Brush brush, FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle);
    HRESULT DrawBitmap(ID2D1Bitmap bitmap, const(D2D1_RECT_F)* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const(D2D1_RECT_F)* sourceRectangle, const(D2D1_MATRIX_4X4_F)* perspectiveTransform);
    HRESULT DrawImage(ID2D1Image image, const(D2D1_POINT_2F)* targetOffset, const(D2D1_RECT_F)* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    HRESULT DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D1_POINT_2F)* targetOffset);
    HRESULT FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);
    HRESULT FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, const(D2D1_RECT_F)* destinationRectangle, const(D2D1_RECT_F)* sourceRectangle);
    HRESULT FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    HRESULT FillRectangle(const(D2D1_RECT_F)* rect, ID2D1Brush brush);
    HRESULT PushAxisAlignedClip(const(D2D1_RECT_F)* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    HRESULT PushLayer(const(D2D1_LAYER_PARAMETERS1)* layerParameters1, ID2D1Layer layer);
    HRESULT PopAxisAlignedClip();
    HRESULT PopLayer();
}
enum D2D1_PRIMITIVE_BLEND
{
    _SOURCE_OVER = 0x0,
    _COPY = 0x1,
    _MIN = 0x2,
    _ADD = 0x3,
    _MAX = 0x4,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_UNIT_MODE
{
    _DIPS = 0x0,
    _PIXELS = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
alias D2D1_MATRIX_4X4_F = D2D_MATRIX_4X4_F;
enum D2D1_COMPOSITE_MODE
{
    _SOURCE_OVER = 0x0,
    _DESTINATION_OVER = 0x1,
    _SOURCE_IN = 0x2,
    _DESTINATION_IN = 0x3,
    _SOURCE_OUT = 0x4,
    _DESTINATION_OUT = 0x5,
    _SOURCE_ATOP = 0x6,
    _DESTINATION_ATOP = 0x7,
    _XOR = 0x8,
    _PLUS = 0x9,
    _SOURCE_COPY = 0xa,
    _BOUNDED_SOURCE_COPY = 0xb,
    _MASK_INVERT = 0xc,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1GdiMetafile: ID2D1Resource
{
    static const iidof = parseGUID("2f543dc3-cfc1-4211-864f-cfd91c6f3395");
    HRESULT Stream(ID2D1GdiMetafileSink sink);
    HRESULT GetBounds(D2D1_RECT_F* bounds);
}
interface ID2D1GdiMetafileSink: IUnknown
{
    static const iidof = parseGUID("82237326-8111-4f7c-bcf4-b5c1175564fe");
    HRESULT ProcessRecord(DWORD recordType, const(void)* recordData, DWORD recordDataSize);
}
struct D2D1_LAYER_PARAMETERS1
{
    D2D1_RECT_F contentBounds;
    ID2D1Geometry geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D1_MATRIX_3X2_F maskTransform;
    FLOAT opacity;
    ID2D1Brush opacityBrush;
    D2D1_LAYER_OPTIONS1 layerOptions;
}
enum D2D1_LAYER_OPTIONS1
{
    _NONE = 0x0,
    _INITIALIZE_FROM_BACKGROUND = 0x1,
    _IGNORE_ALPHA = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_RENDERING_CONTROLS
{
    D2D1_BUFFER_PRECISION bufferPrecision;
    D2D1_SIZE_U tileSize;
}
struct D2D1_EFFECT_INPUT_DESCRIPTION
{
    ID2D1Effect effect;
    UINT32 inputIndex;
    D2D1_RECT_F inputRectangle;
}
struct D2D1_PRINT_CONTROL_PROPERTIES
{
    D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
    FLOAT rasterDPI;
    D2D1_COLOR_SPACE colorSpace;
}
enum D2D1_PRINT_FONT_SUBSET_MODE
{
    _DEFAULT = 0x0,
    _EACHPAGE = 0x1,
    _NONE = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1PrintControl: IUnknown
{
    static const iidof = parseGUID("2c1d867d-c290-41c8-ae7e-34a98702e9a5");
    HRESULT AddPage(ID2D1CommandList commandList, D2D_SIZE_F pageSize, IStream pagePrintTicketStream, D2D1_TAG* tag1=null, D2D1_TAG* tag2=null);
    HRESULT Close();
}
alias D2D1_POINT_2L = D2D_POINT_2L;
alias D2D1_RECT_L = D2D_RECT_L;
interface ID2D1Factory1: ID2D1Factory
{
    static const iidof = parseGUID("bb12d362-daee-4b9a-aa1d-14ba401cfa1f");
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device* d2dDevice);
    HRESULT CreateStrokeStyle(const(D2D1_STROKE_STYLE_PROPERTIES1)* strokeStyleProperties, const(FLOAT)* dashes, UINT32 dashesCount, ID2D1StrokeStyle1* strokeStyle);
    HRESULT CreatePathGeometry(ID2D1PathGeometry1* pathGeometry);
    HRESULT CreateDrawingStateBlock(const(D2D1_DRAWING_STATE_DESCRIPTION1)* drawingStateDescription, IDWriteRenderingParams textRenderingParams, ID2D1DrawingStateBlock1* drawingStateBlock);
    HRESULT CreateGdiMetafile(IStream metafileStream, ID2D1GdiMetafile* metafile);
    HRESULT RegisterEffectFromStream(ref IID classId, IStream propertyXml, const(D2D1_PROPERTY_BINDING)* bindings, UINT32 bindingsCount, const(PD2D1_EFFECT_FACTORY) effectFactory);
    HRESULT RegisterEffectFromString(ref IID classId, PCWSTR propertyXml, const(D2D1_PROPERTY_BINDING)* bindings, UINT32 bindingsCount, const(PD2D1_EFFECT_FACTORY) effectFactory);
    HRESULT UnregisterEffect(ref IID classId);
    HRESULT GetRegisteredEffects(CLSID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered);
    HRESULT GetEffectProperties(ref IID effectId, ID2D1Properties* properties);
}
struct D2D1_STROKE_STYLE_PROPERTIES1
{
    D2D1_CAP_STYLE startCap;
    D2D1_CAP_STYLE endCap;
    D2D1_CAP_STYLE dashCap;
    D2D1_LINE_JOIN lineJoin;
    FLOAT miterLimit;
    D2D1_DASH_STYLE dashStyle;
    FLOAT dashOffset;
    D2D1_STROKE_TRANSFORM_TYPE transformType;
}
enum D2D1_STROKE_TRANSFORM_TYPE
{
    _NORMAL = 0x0,
    _FIXED = 0x1,
    _HAIRLINE = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1StrokeStyle1: ID2D1StrokeStyle
{
    static const iidof = parseGUID("10a72a66-e91c-43f4-993f-ddf4b82b0b4a");
    D2D1_STROKE_TRANSFORM_TYPE GetStrokeTransformType();
}
interface ID2D1PathGeometry1: ID2D1PathGeometry
{
    static const iidof = parseGUID("62baa2d2-ab54-41b7-b872-787e0106a421");
    HRESULT ComputePointAndSegmentAtLength(FLOAT length, UINT32 startSegment, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, D2D1_POINT_DESCRIPTION* pointDescription);
}
struct D2D1_POINT_DESCRIPTION
{
    D2D1_POINT_2F point;
    D2D1_POINT_2F unitTangentVector;
    UINT32 endSegment;
    UINT32 endFigure;
    FLOAT lengthToEndSegment;
}
struct D2D1_DRAWING_STATE_DESCRIPTION1
{
    D2D1_ANTIALIAS_MODE antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    D2D1_TAG tag1;
    D2D1_TAG tag2;
    D2D1_MATRIX_3X2_F transform;
    D2D1_PRIMITIVE_BLEND primitiveBlend;
    D2D1_UNIT_MODE unitMode;
}
interface ID2D1DrawingStateBlock1: ID2D1DrawingStateBlock
{
    static const iidof = parseGUID("689f1f85-c72e-4e33-8f19-85754efd5ace");
    void GetDescription(D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription);
    void SetDescription(const(D2D1_DRAWING_STATE_DESCRIPTION1)* stateDescription);
}
alias PD2D1_EFFECT_FACTORY = extern(C) HRESULT function(IUnknown* effectImpl);
