// This source code was generated by regenerator
module windowskits.dwrite;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.minwindef;
import core.sys.windows.windef;
import core.sys.windows.winnt;
import windowskits.intsafe;
import windowskits.dcommon;
import windowskits.d2d1;
import windowskits.winnt;
import windowskits.windef;
import windowskits.wingdi;
import core.sys.windows.basetyps;
// macro function: DWRITE_DECLARE_INTERFACE ( iid ) DECLSPEC_UUID ( iid ) DECLSPEC_NOVTABLE;
// enum DWRITE_EXPORT = __declspec ( dllimport ) WINAPI;
// macro function: DWRITE_MAKE_OPENTYPE_TAG ( a , b , c , d ) ( ( static_cast < UINT32 > ( static_cast < UINT8 > ( d ) ) << 24 ) | ( static_cast < UINT32 > ( static_cast < UINT8 > ( c ) ) << 16 ) | ( static_cast < UINT32 > ( static_cast < UINT8 > ( b ) ) << 8 ) | static_cast < UINT32 > ( static_cast < UINT8 > ( a ) ) );
// macro function: DWRITE_MAKE_FONT_FEATURE_TAG ( a , b , c , d ) ( static_cast < DWRITE_FONT_FEATURE_TAG > ( DWRITE_MAKE_OPENTYPE_TAG ( a , b , c , d ) ) );
enum DWRITE_ALPHA_MAX = 255;
enum FACILITY_DWRITE = 0x898;
enum DWRITE_ERR_BASE = 0x5000;
// macro function: MAKE_DWRITE_HR ( severity , code ) MAKE_HRESULT ( severity , FACILITY_DWRITE , ( DWRITE_ERR_BASE + code ) );
// macro function: MAKE_DWRITE_HR_ERR ( code ) MAKE_DWRITE_HR ( SEVERITY_ERROR , code );
interface IDWriteRenderingParams: IUnknown
{
    static const iidof = parseGUID("2f0da53a-2add-47cd-82ee-d9ec34688e75");
    FLOAT GetGamma();
    FLOAT GetEnhancedContrast();
    FLOAT GetClearTypeLevel();
    DWRITE_PIXEL_GEOMETRY GetPixelGeometry();
    DWRITE_RENDERING_MODE GetRenderingMode();
}
enum DWRITE_PIXEL_GEOMETRY
{
    _FLAT = 0x0,
    _RGB = 0x1,
    _BGR = 0x2,
}
enum DWRITE_RENDERING_MODE
{
    _DEFAULT = 0x0,
    _ALIASED = 0x1,
    _GDI_CLASSIC = 0x2,
    _GDI_NATURAL = 0x3,
    _NATURAL = 0x4,
    _NATURAL_SYMMETRIC = 0x5,
    _OUTLINE = 0x6,
    _CLEARTYPE_GDI_CLASSIC = 0x2,
    _CLEARTYPE_GDI_NATURAL = 0x3,
    _CLEARTYPE_NATURAL = 0x4,
    _CLEARTYPE_NATURAL_SYMMETRIC = 0x5,
}
interface IDWriteTextFormat: IUnknown
{
    static const iidof = parseGUID("9c906818-31d7-4fd3-a151-7c5e225db55a");
    HRESULT SetTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment);
    HRESULT SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment);
    HRESULT SetWordWrapping(DWRITE_WORD_WRAPPING wordWrapping);
    HRESULT SetReadingDirection(DWRITE_READING_DIRECTION readingDirection);
    HRESULT SetFlowDirection(DWRITE_FLOW_DIRECTION flowDirection);
    HRESULT SetIncrementalTabStop(FLOAT incrementalTabStop);
    HRESULT SetTrimming(const(DWRITE_TRIMMING)* trimmingOptions, IDWriteInlineObject trimmingSign);
    HRESULT SetLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline);
    DWRITE_TEXT_ALIGNMENT GetTextAlignment();
    DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment();
    DWRITE_WORD_WRAPPING GetWordWrapping();
    DWRITE_READING_DIRECTION GetReadingDirection();
    DWRITE_FLOW_DIRECTION GetFlowDirection();
    FLOAT GetIncrementalTabStop();
    HRESULT GetTrimming(DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign);
    HRESULT GetLineSpacing(DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline);
    HRESULT GetFontCollection(IDWriteFontCollection* fontCollection);
    UINT32 GetFontFamilyNameLength();
    HRESULT GetFontFamilyName(WCHAR* fontFamilyName, UINT32 nameSize);
    DWRITE_FONT_WEIGHT GetFontWeight();
    DWRITE_FONT_STYLE GetFontStyle();
    DWRITE_FONT_STRETCH GetFontStretch();
    FLOAT GetFontSize();
    UINT32 GetLocaleNameLength();
    HRESULT GetLocaleName(WCHAR* localeName, UINT32 nameSize);
}
enum DWRITE_TEXT_ALIGNMENT
{
    _LEADING = 0x0,
    _TRAILING = 0x1,
    _CENTER = 0x2,
    _JUSTIFIED = 0x3,
}
enum DWRITE_PARAGRAPH_ALIGNMENT
{
    _NEAR = 0x0,
    _FAR = 0x1,
    _CENTER = 0x2,
}
enum DWRITE_WORD_WRAPPING
{
    _WRAP = 0x0,
    _NO_WRAP = 0x1,
    _EMERGENCY_BREAK = 0x2,
    _WHOLE_WORD = 0x3,
    _CHARACTER = 0x4,
}
enum DWRITE_READING_DIRECTION
{
    _LEFT_TO_RIGHT = 0x0,
    _RIGHT_TO_LEFT = 0x1,
    _TOP_TO_BOTTOM = 0x2,
    _BOTTOM_TO_TOP = 0x3,
}
enum DWRITE_FLOW_DIRECTION
{
    _TOP_TO_BOTTOM = 0x0,
    _BOTTOM_TO_TOP = 0x1,
    _LEFT_TO_RIGHT = 0x2,
    _RIGHT_TO_LEFT = 0x3,
}
struct DWRITE_TRIMMING
{
    DWRITE_TRIMMING_GRANULARITY granularity;
    UINT32 delimiter;
    UINT32 delimiterCount;
}
enum DWRITE_TRIMMING_GRANULARITY
{
    _NONE = 0x0,
    _CHARACTER = 0x1,
    _WORD = 0x2,
}
interface IDWriteInlineObject: IUnknown
{
    static const iidof = parseGUID("8339fde3-106f-47ab-8373-1c6295eb10b3");
    HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer renderer, FLOAT originX, FLOAT originY, BOOL isSideways, BOOL isRightToLeft, IUnknown clientDrawingEffect);
    HRESULT GetMetrics(DWRITE_INLINE_OBJECT_METRICS* metrics);
    HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs);
    HRESULT GetBreakConditions(DWRITE_BREAK_CONDITION* breakConditionBefore, DWRITE_BREAK_CONDITION* breakConditionAfter);
}
interface IDWriteTextRenderer: IDWritePixelSnapping
{
    static const iidof = parseGUID("ef8a8135-5cc6-45fe-8825-c5a0724eb819");
    HRESULT DrawGlyphRun(void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, IUnknown clientDrawingEffect);
    HRESULT DrawUnderline(void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const(DWRITE_UNDERLINE)* underline, IUnknown clientDrawingEffect);
    HRESULT DrawStrikethrough(void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const(DWRITE_STRIKETHROUGH)* strikethrough, IUnknown clientDrawingEffect);
    HRESULT DrawInlineObject(void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown clientDrawingEffect);
}
interface IDWritePixelSnapping: IUnknown
{
    static const iidof = parseGUID("eaf3a2da-ecf4-4d24-b644-b34f6842024b");
    HRESULT IsPixelSnappingDisabled(void* clientDrawingContext, BOOL* isDisabled);
    HRESULT GetCurrentTransform(void* clientDrawingContext, DWRITE_MATRIX* transform);
    HRESULT GetPixelsPerDip(void* clientDrawingContext, FLOAT* pixelsPerDip);
}
struct DWRITE_MATRIX
{
    FLOAT m11;
    FLOAT m12;
    FLOAT m21;
    FLOAT m22;
    FLOAT dx;
    FLOAT dy;
}
struct DWRITE_GLYPH_RUN
{
    IDWriteFontFace fontFace;
    FLOAT fontEmSize;
    UINT32 glyphCount;
    const(UINT16)* glyphIndices;
    const(FLOAT)* glyphAdvances;
    const(DWRITE_GLYPH_OFFSET)* glyphOffsets;
    BOOL isSideways;
    UINT32 bidiLevel;
}
interface IDWriteFontFace: IUnknown
{
    static const iidof = parseGUID("5f49804d-7024-4d43-bfa9-d25984f53849");
    DWRITE_FONT_FACE_TYPE GetType();
    HRESULT GetFiles(UINT32* numberOfFiles, IDWriteFontFile* fontFiles);
    UINT32 GetIndex();
    DWRITE_FONT_SIMULATIONS GetSimulations();
    BOOL IsSymbolFont();
    void GetMetrics(DWRITE_FONT_METRICS* fontFaceMetrics);
    UINT16 GetGlyphCount();
    HRESULT GetDesignGlyphMetrics(const(UINT16)* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways=FALSE);
    HRESULT GetGlyphIndicesA(const(UINT32)* codePoints, UINT32 codePointCount, UINT16* glyphIndices);
    HRESULT TryGetFontTable(UINT32 openTypeTableTag, const(void)** tableData, UINT32* tableSize, void** tableContext, BOOL* exists);
    void ReleaseFontTable(void* tableContext);
    HRESULT GetGlyphRunOutline(FLOAT emSize, const(UINT16)* glyphIndices, const(FLOAT)* glyphAdvances, const(DWRITE_GLYPH_OFFSET)* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, IDWriteGeometrySink geometrySink);
    HRESULT GetRecommendedRenderingMode(FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams renderingParams, DWRITE_RENDERING_MODE* renderingMode);
    HRESULT GetGdiCompatibleMetrics(FLOAT emSize, FLOAT pixelsPerDip, const(DWRITE_MATRIX)* transform, DWRITE_FONT_METRICS* fontFaceMetrics);
    HRESULT GetGdiCompatibleGlyphMetrics(FLOAT emSize, FLOAT pixelsPerDip, const(DWRITE_MATRIX)* transform, BOOL useGdiNatural, const(UINT16)* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways=FALSE);
}
enum DWRITE_FONT_FACE_TYPE
{
    _CFF = 0x0,
    _TRUETYPE = 0x1,
    _OPENTYPE_COLLECTION = 0x2,
    _TYPE1 = 0x3,
    _VECTOR = 0x4,
    _BITMAP = 0x5,
    _UNKNOWN = 0x6,
    _RAW_CFF = 0x7,
    _TRUETYPE_COLLECTION = 0x2,
}
interface IDWriteFontFile: IUnknown
{
    static const iidof = parseGUID("739d886a-cef5-47dc-8769-1a8b41bebbb0");
    HRESULT GetReferenceKey(const(void)** fontFileReferenceKey, UINT32* fontFileReferenceKeySize);
    HRESULT GetLoader(IDWriteFontFileLoader* fontFileLoader);
    HRESULT Analyze(BOOL* isSupportedFontType, DWRITE_FONT_FILE_TYPE* fontFileType, DWRITE_FONT_FACE_TYPE* fontFaceType, UINT32* numberOfFaces);
}
interface IDWriteFontFileLoader: IUnknown
{
    static const iidof = parseGUID("727cad4e-d6af-4c9e-8a08-d695b11caa49");
    HRESULT CreateStreamFromKey(const(void)* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileStream* fontFileStream);
}
interface IDWriteFontFileStream: IUnknown
{
    static const iidof = parseGUID("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0");
    HRESULT ReadFileFragment(const(void)** fragmentStart, UINT64 fileOffset, UINT64 fragmentSize, void** fragmentContext);
    void ReleaseFileFragment(void* fragmentContext);
    HRESULT GetFileSize(UINT64* fileSize);
    HRESULT GetLastWriteTime(UINT64* lastWriteTime);
}
enum DWRITE_FONT_FILE_TYPE
{
    _UNKNOWN = 0x0,
    _CFF = 0x1,
    _TRUETYPE = 0x2,
    _OPENTYPE_COLLECTION = 0x3,
    _TYPE1_PFM = 0x4,
    _TYPE1_PFB = 0x5,
    _VECTOR = 0x6,
    _BITMAP = 0x7,
    _TRUETYPE_COLLECTION = 0x3,
}
enum DWRITE_FONT_SIMULATIONS
{
    _NONE = 0x0,
    _BOLD = 0x1,
    _OBLIQUE = 0x2,
}
struct DWRITE_FONT_METRICS
{
    UINT16 designUnitsPerEm;
    UINT16 ascent;
    UINT16 descent;
    INT16 lineGap;
    UINT16 capHeight;
    UINT16 xHeight;
    INT16 underlinePosition;
    UINT16 underlineThickness;
    INT16 strikethroughPosition;
    UINT16 strikethroughThickness;
}
struct DWRITE_GLYPH_METRICS
{
    INT32 leftSideBearing;
    UINT32 advanceWidth;
    INT32 rightSideBearing;
    INT32 topSideBearing;
    UINT32 advanceHeight;
    INT32 bottomSideBearing;
    INT32 verticalOriginY;
}
struct DWRITE_GLYPH_OFFSET
{
    FLOAT advanceOffset;
    FLOAT ascenderOffset;
}
alias IDWriteGeometrySink = ID2D1SimplifiedGeometrySink;
struct DWRITE_GLYPH_RUN_DESCRIPTION
{
    const(WCHAR)* localeName;
    const(WCHAR)* string;
    UINT32 stringLength;
    const(UINT16)* clusterMap;
    UINT32 textPosition;
}
struct DWRITE_UNDERLINE
{
    FLOAT width;
    FLOAT thickness;
    FLOAT offset;
    FLOAT runHeight;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION flowDirection;
    const(WCHAR)* localeName;
    DWRITE_MEASURING_MODE measuringMode;
}
struct DWRITE_STRIKETHROUGH
{
    FLOAT width;
    FLOAT thickness;
    FLOAT offset;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION flowDirection;
    const(WCHAR)* localeName;
    DWRITE_MEASURING_MODE measuringMode;
}
struct DWRITE_INLINE_OBJECT_METRICS
{
    FLOAT width;
    FLOAT height;
    FLOAT baseline;
    BOOL supportsSideways;
}
struct DWRITE_OVERHANG_METRICS
{
    FLOAT left;
    FLOAT top;
    FLOAT right;
    FLOAT bottom;
}
enum DWRITE_BREAK_CONDITION
{
    _NEUTRAL = 0x0,
    _CAN_BREAK = 0x1,
    _MAY_NOT_BREAK = 0x2,
    _MUST_BREAK = 0x3,
}
enum DWRITE_LINE_SPACING_METHOD
{
    _DEFAULT = 0x0,
    _UNIFORM = 0x1,
    _PROPORTIONAL = 0x2,
}
interface IDWriteFontCollection: IUnknown
{
    static const iidof = parseGUID("a84cee02-3eea-4eee-a827-87c1a02a0fcc");
    UINT32 GetFontFamilyCount();
    HRESULT GetFontFamily(UINT32 index, IDWriteFontFamily* fontFamily);
    HRESULT FindFamilyName(const(WCHAR)* familyName, UINT32* index, BOOL* exists);
    HRESULT GetFontFromFontFace(IDWriteFontFace fontFace, IDWriteFont* font);
}
interface IDWriteFontFamily: IDWriteFontList
{
    static const iidof = parseGUID("da20d8ef-812a-4c43-9802-62ec4abd7add");
    HRESULT GetFamilyNames(IDWriteLocalizedStrings* names);
    HRESULT GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont* matchingFont);
    HRESULT GetMatchingFonts(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList* matchingFonts);
}
interface IDWriteFontList: IUnknown
{
    static const iidof = parseGUID("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb");
    HRESULT GetFontCollection(IDWriteFontCollection* fontCollection);
    UINT32 GetFontCount();
    HRESULT GetFont(UINT32 index, IDWriteFont* font);
}
interface IDWriteFont: IUnknown
{
    static const iidof = parseGUID("acd16696-8c14-4f5d-877e-fe3fc1d32737");
    HRESULT GetFontFamily(IDWriteFontFamily* fontFamily);
    DWRITE_FONT_WEIGHT GetWeight();
    DWRITE_FONT_STRETCH GetStretch();
    DWRITE_FONT_STYLE GetStyle();
    BOOL IsSymbolFont();
    HRESULT GetFaceNames(IDWriteLocalizedStrings* names);
    HRESULT GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings* informationalStrings, BOOL* exists);
    DWRITE_FONT_SIMULATIONS GetSimulations();
    void GetMetrics(DWRITE_FONT_METRICS* fontMetrics);
    HRESULT HasCharacter(UINT32 unicodeValue, BOOL* exists);
    HRESULT CreateFontFace(IDWriteFontFace* fontFace);
}
enum DWRITE_FONT_WEIGHT
{
    _THIN = 0x64,
    _EXTRA_LIGHT = 0xc8,
    _ULTRA_LIGHT = 0xc8,
    _LIGHT = 0x12c,
    _SEMI_LIGHT = 0x15e,
    _NORMAL = 0x190,
    _REGULAR = 0x190,
    _MEDIUM = 0x1f4,
    _DEMI_BOLD = 0x258,
    _SEMI_BOLD = 0x258,
    _BOLD = 0x2bc,
    _EXTRA_BOLD = 0x320,
    _ULTRA_BOLD = 0x320,
    _BLACK = 0x384,
    _HEAVY = 0x384,
    _EXTRA_BLACK = 0x3b6,
    _ULTRA_BLACK = 0x3b6,
}
enum DWRITE_FONT_STRETCH
{
    _UNDEFINED = 0x0,
    _ULTRA_CONDENSED = 0x1,
    _EXTRA_CONDENSED = 0x2,
    _CONDENSED = 0x3,
    _SEMI_CONDENSED = 0x4,
    _NORMAL = 0x5,
    _MEDIUM = 0x5,
    _SEMI_EXPANDED = 0x6,
    _EXPANDED = 0x7,
    _EXTRA_EXPANDED = 0x8,
    _ULTRA_EXPANDED = 0x9,
}
enum DWRITE_FONT_STYLE
{
    _NORMAL = 0x0,
    _OBLIQUE = 0x1,
    _ITALIC = 0x2,
}
interface IDWriteLocalizedStrings: IUnknown
{
    static const iidof = parseGUID("08256209-099a-4b34-b86d-c22b110e7771");
    UINT32 GetCount();
    HRESULT FindLocaleName(const(WCHAR)* localeName, UINT32* index, BOOL* exists);
    HRESULT GetLocaleNameLength(UINT32 index, UINT32* length);
    HRESULT GetLocaleName(UINT32 index, WCHAR* localeName, UINT32 size);
    HRESULT GetStringLength(UINT32 index, UINT32* length);
    HRESULT GetString(UINT32 index, WCHAR* stringBuffer, UINT32 size);
}
enum DWRITE_INFORMATIONAL_STRING_ID
{
    _NONE = 0x0,
    _COPYRIGHT_NOTICE = 0x1,
    _VERSION_STRINGS = 0x2,
    _TRADEMARK = 0x3,
    _MANUFACTURER = 0x4,
    _DESIGNER = 0x5,
    _DESIGNER_URL = 0x6,
    _DESCRIPTION = 0x7,
    _FONT_VENDOR_URL = 0x8,
    _LICENSE_DESCRIPTION = 0x9,
    _LICENSE_INFO_URL = 0xa,
    _WIN32_FAMILY_NAMES = 0xb,
    _WIN32_SUBFAMILY_NAMES = 0xc,
    _TYPOGRAPHIC_FAMILY_NAMES = 0xd,
    _TYPOGRAPHIC_SUBFAMILY_NAMES = 0xe,
    _SAMPLE_TEXT = 0xf,
    _FULL_NAME = 0x10,
    _POSTSCRIPT_NAME = 0x11,
    _POSTSCRIPT_CID_NAME = 0x12,
    _WEIGHT_STRETCH_STYLE_FAMILY_NAME = 0x13,
    _DESIGN_SCRIPT_LANGUAGE_TAG = 0x14,
    _SUPPORTED_SCRIPT_LANGUAGE_TAG = 0x15,
    _PREFERRED_FAMILY_NAMES = 0xd,
    _PREFERRED_SUBFAMILY_NAMES = 0xe,
    _WWS_FAMILY_NAME = 0x13,
}
interface IDWriteTextLayout: IDWriteTextFormat
{
    static const iidof = parseGUID("53737037-6d14-410b-9bfe-0b182bb70961");
    HRESULT SetMaxWidth(FLOAT maxWidth);
    HRESULT SetMaxHeight(FLOAT maxHeight);
    HRESULT SetFontCollection(IDWriteFontCollection fontCollection, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontFamilyName(const(WCHAR)* fontFamilyName, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontSize(FLOAT fontSize, DWRITE_TEXT_RANGE textRange);
    HRESULT SetUnderline(BOOL hasUnderline, DWRITE_TEXT_RANGE textRange);
    HRESULT SetStrikethrough(BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange);
    HRESULT SetDrawingEffect(IUnknown drawingEffect, DWRITE_TEXT_RANGE textRange);
    HRESULT SetInlineObject(IDWriteInlineObject inlineObject, DWRITE_TEXT_RANGE textRange);
    HRESULT SetTypography(IDWriteTypography typography, DWRITE_TEXT_RANGE textRange);
    HRESULT SetLocaleName(const(WCHAR)* localeName, DWRITE_TEXT_RANGE textRange);
    FLOAT GetMaxWidth();
    FLOAT GetMaxHeight();
    HRESULT GetFontCollection(UINT32 currentPosition, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontFamilyNameLength(UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontFamilyName(UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontWeight(UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontStyle(UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontStretch(UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetFontSize(UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetUnderline(UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetStrikethrough(UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetDrawingEffect(UINT32 currentPosition, IUnknown* drawingEffect, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetInlineObject(UINT32 currentPosition, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetTypography(UINT32 currentPosition, IDWriteTypography* typography, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetLocaleNameLength(UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT GetLocaleName(UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange=null);
    HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer renderer, FLOAT originX, FLOAT originY);
    HRESULT GetLineMetrics(DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount);
    HRESULT GetMetrics(DWRITE_TEXT_METRICS* textMetrics);
    HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs);
    HRESULT GetClusterMetrics(DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount);
    HRESULT DetermineMinWidth(FLOAT* minWidth);
    HRESULT HitTestPoint(FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics);
    HRESULT HitTestTextPosition(UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics);
    HRESULT HitTestTextRange(UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount);
}
struct DWRITE_TEXT_RANGE
{
    UINT32 startPosition;
    UINT32 length;
}
interface IDWriteTypography: IUnknown
{
    static const iidof = parseGUID("55f1112b-1dc2-4b3c-9541-f46894ed85b6");
    HRESULT AddFontFeature(DWRITE_FONT_FEATURE fontFeature);
    UINT32 GetFontFeatureCount();
    HRESULT GetFontFeature(UINT32 fontFeatureIndex, DWRITE_FONT_FEATURE* fontFeature);
}
struct DWRITE_FONT_FEATURE
{
    DWRITE_FONT_FEATURE_TAG nameTag;
    UINT32 parameter;
}
enum DWRITE_FONT_FEATURE_TAG
{
    _ALTERNATIVE_FRACTIONS = 0x63726661,
    _PETITE_CAPITALS_FROM_CAPITALS = 0x63703263,
    _SMALL_CAPITALS_FROM_CAPITALS = 0x63733263,
    _CONTEXTUAL_ALTERNATES = 0x746c6163,
    _CASE_SENSITIVE_FORMS = 0x65736163,
    _GLYPH_COMPOSITION_DECOMPOSITION = 0x706d6363,
    _CONTEXTUAL_LIGATURES = 0x67696c63,
    _CAPITAL_SPACING = 0x70737063,
    _CONTEXTUAL_SWASH = 0x68777363,
    _CURSIVE_POSITIONING = 0x73727563,
    _DEFAULT = 0x746c6664,
    _DISCRETIONARY_LIGATURES = 0x67696c64,
    _EXPERT_FORMS = 0x74707865,
    _FRACTIONS = 0x63617266,
    _FULL_WIDTH = 0x64697766,
    _HALF_FORMS = 0x666c6168,
    _HALANT_FORMS = 0x6e6c6168,
    _ALTERNATE_HALF_WIDTH = 0x746c6168,
    _HISTORICAL_FORMS = 0x74736968,
    _HORIZONTAL_KANA_ALTERNATES = 0x616e6b68,
    _HISTORICAL_LIGATURES = 0x67696c68,
    _HALF_WIDTH = 0x64697768,
    _HOJO_KANJI_FORMS = 0x6f6a6f68,
    _JIS04_FORMS = 0x3430706a,
    _JIS78_FORMS = 0x3837706a,
    _JIS83_FORMS = 0x3338706a,
    _JIS90_FORMS = 0x3039706a,
    _KERNING = 0x6e72656b,
    _STANDARD_LIGATURES = 0x6167696c,
    _LINING_FIGURES = 0x6d756e6c,
    _LOCALIZED_FORMS = 0x6c636f6c,
    _MARK_POSITIONING = 0x6b72616d,
    _MATHEMATICAL_GREEK = 0x6b72676d,
    _MARK_TO_MARK_POSITIONING = 0x6b6d6b6d,
    _ALTERNATE_ANNOTATION_FORMS = 0x746c616e,
    _NLC_KANJI_FORMS = 0x6b636c6e,
    _OLD_STYLE_FIGURES = 0x6d756e6f,
    _ORDINALS = 0x6e64726f,
    _PROPORTIONAL_ALTERNATE_WIDTH = 0x746c6170,
    _PETITE_CAPITALS = 0x70616370,
    _PROPORTIONAL_FIGURES = 0x6d756e70,
    _PROPORTIONAL_WIDTHS = 0x64697770,
    _QUARTER_WIDTHS = 0x64697771,
    _REQUIRED_LIGATURES = 0x67696c72,
    _RUBY_NOTATION_FORMS = 0x79627572,
    _STYLISTIC_ALTERNATES = 0x746c6173,
    _SCIENTIFIC_INFERIORS = 0x666e6973,
    _SMALL_CAPITALS = 0x70636d73,
    _SIMPLIFIED_FORMS = 0x6c706d73,
    _STYLISTIC_SET_1 = 0x31307373,
    _STYLISTIC_SET_2 = 0x32307373,
    _STYLISTIC_SET_3 = 0x33307373,
    _STYLISTIC_SET_4 = 0x34307373,
    _STYLISTIC_SET_5 = 0x35307373,
    _STYLISTIC_SET_6 = 0x36307373,
    _STYLISTIC_SET_7 = 0x37307373,
    _STYLISTIC_SET_8 = 0x38307373,
    _STYLISTIC_SET_9 = 0x39307373,
    _STYLISTIC_SET_10 = 0x30317373,
    _STYLISTIC_SET_11 = 0x31317373,
    _STYLISTIC_SET_12 = 0x32317373,
    _STYLISTIC_SET_13 = 0x33317373,
    _STYLISTIC_SET_14 = 0x34317373,
    _STYLISTIC_SET_15 = 0x35317373,
    _STYLISTIC_SET_16 = 0x36317373,
    _STYLISTIC_SET_17 = 0x37317373,
    _STYLISTIC_SET_18 = 0x38317373,
    _STYLISTIC_SET_19 = 0x39317373,
    _STYLISTIC_SET_20 = 0x30327373,
    _SUBSCRIPT = 0x73627573,
    _SUPERSCRIPT = 0x73707573,
    _SWASH = 0x68737773,
    _TITLING = 0x6c746974,
    _TRADITIONAL_NAME_FORMS = 0x6d616e74,
    _TABULAR_FIGURES = 0x6d756e74,
    _TRADITIONAL_FORMS = 0x64617274,
    _THIRD_WIDTHS = 0x64697774,
    _UNICASE = 0x63696e75,
    _VERTICAL_WRITING = 0x74726576,
    _VERTICAL_ALTERNATES_AND_ROTATION = 0x32747276,
    _SLASHED_ZERO = 0x6f72657a,
}
struct DWRITE_LINE_METRICS
{
    UINT32 length;
    UINT32 trailingWhitespaceLength;
    UINT32 newlineLength;
    FLOAT height;
    FLOAT baseline;
    BOOL isTrimmed;
}
struct DWRITE_TEXT_METRICS
{
    FLOAT left;
    FLOAT top;
    FLOAT width;
    FLOAT widthIncludingTrailingWhitespace;
    FLOAT height;
    FLOAT layoutWidth;
    FLOAT layoutHeight;
    UINT32 maxBidiReorderingDepth;
    UINT32 lineCount;
}
struct DWRITE_CLUSTER_METRICS
{
    FLOAT width;
    UINT16 length;
    UINT16 canWrapLineAfter;
    UINT16 isWhitespace;
    UINT16 isNewline;
    UINT16 isSoftHyphen;
    UINT16 isRightToLeft;
    UINT16 padding;
}
struct DWRITE_HIT_TEST_METRICS
{
    UINT32 textPosition;
    UINT32 length;
    FLOAT left;
    FLOAT top;
    FLOAT width;
    FLOAT height;
    UINT32 bidiLevel;
    BOOL isText;
    BOOL isTrimmed;
}
enum DWRITE_FACTORY_TYPE
{
    _SHARED = 0x0,
    _ISOLATED = 0x1,
}
interface IDWriteLocalFontFileLoader: IDWriteFontFileLoader
{
    static const iidof = parseGUID("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2");
    HRESULT GetFilePathLengthFromKey(const(void)* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, UINT32* filePathLength);
    HRESULT GetFilePathFromKey(const(void)* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, WCHAR* filePath, UINT32 filePathSize);
    HRESULT GetLastWriteTimeFromKey(const(void)* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, FILETIME* lastWriteTime);
}
interface IDWriteFactory: IUnknown
{
    static const iidof = parseGUID("b859ee5a-d838-4b5b-a2e8-1adc7d93db48");
    HRESULT GetSystemFontCollection(IDWriteFontCollection* fontCollection, BOOL checkForUpdates=FALSE);
    HRESULT CreateCustomFontCollection(IDWriteFontCollectionLoader collectionLoader, const(void)* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection* fontCollection);
    HRESULT RegisterFontCollectionLoader(IDWriteFontCollectionLoader fontCollectionLoader);
    HRESULT UnregisterFontCollectionLoader(IDWriteFontCollectionLoader fontCollectionLoader);
    HRESULT CreateFontFileReference(const(WCHAR)* filePath, const(FILETIME)* lastWriteTime, IDWriteFontFile* fontFile);
    HRESULT CreateCustomFontFileReference(const(void)* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader fontFileLoader, IDWriteFontFile* fontFile);
    HRESULT CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, const(IDWriteFontFile)* fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace* fontFace);
    HRESULT CreateRenderingParams(IDWriteRenderingParams* renderingParams);
    HRESULT CreateMonitorRenderingParams(HMONITOR monitor, IDWriteRenderingParams* renderingParams);
    HRESULT CreateCustomRenderingParams(FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams* renderingParams);
    HRESULT RegisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    HRESULT UnregisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    HRESULT CreateTextFormat(const(WCHAR)* fontFamilyName, IDWriteFontCollection fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const(WCHAR)* localeName, IDWriteTextFormat* textFormat);
    HRESULT CreateTypography(IDWriteTypography* typography);
    HRESULT GetGdiInterop(IDWriteGdiInterop* gdiInterop);
    HRESULT CreateTextLayout(const(WCHAR)* string, UINT32 stringLength, IDWriteTextFormat textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout* textLayout);
    HRESULT CreateGdiCompatibleTextLayout(const(WCHAR)* string, UINT32 stringLength, IDWriteTextFormat textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const(DWRITE_MATRIX)* transform, BOOL useGdiNatural, IDWriteTextLayout* textLayout);
    HRESULT CreateEllipsisTrimmingSign(IDWriteTextFormat textFormat, IDWriteInlineObject* trimmingSign);
    HRESULT CreateTextAnalyzer(IDWriteTextAnalyzer* textAnalyzer);
    HRESULT CreateNumberSubstitution(DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const(WCHAR)* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution* numberSubstitution);
    HRESULT CreateGlyphRunAnalysis(const(DWRITE_GLYPH_RUN)* glyphRun, FLOAT pixelsPerDip, const(DWRITE_MATRIX)* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis* glyphRunAnalysis);
}
interface IDWriteFontCollectionLoader: IUnknown
{
    static const iidof = parseGUID("cca920e4-52f0-492b-bfa8-29c72ee0a468");
    HRESULT CreateEnumeratorFromKey(IDWriteFactory factory, const(void)* collectionKey, UINT32 collectionKeySize, IDWriteFontFileEnumerator* fontFileEnumerator);
}
interface IDWriteFontFileEnumerator: IUnknown
{
    static const iidof = parseGUID("72755049-5ff7-435d-8348-4be97cfa6c7c");
    HRESULT MoveNext(BOOL* hasCurrentFile);
    HRESULT GetCurrentFontFile(IDWriteFontFile* fontFile);
}
interface IDWriteGdiInterop: IUnknown
{
    static const iidof = parseGUID("1edd9491-9853-4299-898f-6432983b6f3a");
    HRESULT CreateFontFromLOGFONT(const(LOGFONTW)* logFont, IDWriteFont* font);
    HRESULT ConvertFontToLOGFONT(IDWriteFont font, LOGFONTW* logFont, BOOL* isSystemFont);
    HRESULT ConvertFontFaceToLOGFONT(IDWriteFontFace font, LOGFONTW* logFont);
    HRESULT CreateFontFaceFromHdc(HDC hdc, IDWriteFontFace* fontFace);
    HRESULT CreateBitmapRenderTarget(HDC hdc, UINT32 width, UINT32 height, IDWriteBitmapRenderTarget* renderTarget);
}
interface IDWriteBitmapRenderTarget: IUnknown
{
    static const iidof = parseGUID("5e5a32a3-8dff-4773-9ff6-0696eab77267");
    HRESULT DrawGlyphRun(FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const(DWRITE_GLYPH_RUN)* glyphRun, IDWriteRenderingParams renderingParams, COLORREF textColor, RECT* blackBoxRect=null);
    HDC GetMemoryDC();
    FLOAT GetPixelsPerDip();
    HRESULT SetPixelsPerDip(FLOAT pixelsPerDip);
    HRESULT GetCurrentTransform(DWRITE_MATRIX* transform);
    HRESULT SetCurrentTransform(const(DWRITE_MATRIX)* transform);
    HRESULT GetSize(SIZE* size);
    HRESULT Resize(UINT32 width, UINT32 height);
}
interface IDWriteTextAnalyzer: IUnknown
{
    static const iidof = parseGUID("b7e6163e-7f46-43b4-84b3-e4e6249c365d");
    HRESULT AnalyzeScript(IDWriteTextAnalysisSource analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeBidi(IDWriteTextAnalysisSource analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeNumberSubstitution(IDWriteTextAnalysisSource analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeLineBreakpoints(IDWriteTextAnalysisSource analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink analysisSink);
    HRESULT GetGlyphs(const(WCHAR)* textString, UINT32 textLength, IDWriteFontFace fontFace, BOOL isSideways, BOOL isRightToLeft, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, const(WCHAR)* localeName, IDWriteNumberSubstitution numberSubstitution, const(DWRITE_TYPOGRAPHIC_FEATURES)** features, const(UINT32)* featureRangeLengths, UINT32 featureRanges, UINT32 maxGlyphCount, UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32* actualGlyphCount);
    HRESULT GetGlyphPlacements(const(WCHAR)* textString, const(UINT16)* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const(UINT16)* glyphIndices, const(DWRITE_SHAPING_GLYPH_PROPERTIES)* glyphProps, UINT32 glyphCount, IDWriteFontFace fontFace, FLOAT fontEmSize, BOOL isSideways, BOOL isRightToLeft, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, const(WCHAR)* localeName, const(DWRITE_TYPOGRAPHIC_FEATURES)** features, const(UINT32)* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets);
    HRESULT GetGdiCompatibleGlyphPlacements(const(WCHAR)* textString, const(UINT16)* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const(UINT16)* glyphIndices, const(DWRITE_SHAPING_GLYPH_PROPERTIES)* glyphProps, UINT32 glyphCount, IDWriteFontFace fontFace, FLOAT fontEmSize, FLOAT pixelsPerDip, const(DWRITE_MATRIX)* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, const(WCHAR)* localeName, const(DWRITE_TYPOGRAPHIC_FEATURES)** features, const(UINT32)* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets);
}
interface IDWriteTextAnalysisSource: IUnknown
{
    static const iidof = parseGUID("688e1a58-5094-47c8-adc8-fbcea60ae92b");
    HRESULT GetTextAtPosition(UINT32 textPosition, const(WCHAR)** textString, UINT32* textLength);
    HRESULT GetTextBeforePosition(UINT32 textPosition, const(WCHAR)** textString, UINT32* textLength);
    DWRITE_READING_DIRECTION GetParagraphReadingDirection();
    HRESULT GetLocaleName(UINT32 textPosition, UINT32* textLength, const(WCHAR)** localeName);
    HRESULT GetNumberSubstitution(UINT32 textPosition, UINT32* textLength, IDWriteNumberSubstitution* numberSubstitution);
}
interface IDWriteNumberSubstitution: IUnknown
{
    static const iidof = parseGUID("14885cc9-bab0-4f90-b6ed-5c366a2cd03d");
}
interface IDWriteTextAnalysisSink: IUnknown
{
    static const iidof = parseGUID("5810cd44-0ca0-4701-b3fa-bec5182ae4f6");
    HRESULT SetScriptAnalysis(UINT32 textPosition, UINT32 textLength, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis);
    HRESULT SetLineBreakpoints(UINT32 textPosition, UINT32 textLength, const(DWRITE_LINE_BREAKPOINT)* lineBreakpoints);
    HRESULT SetBidiLevel(UINT32 textPosition, UINT32 textLength, UINT8 explicitLevel, UINT8 resolvedLevel);
    HRESULT SetNumberSubstitution(UINT32 textPosition, UINT32 textLength, IDWriteNumberSubstitution numberSubstitution);
}
struct DWRITE_SCRIPT_ANALYSIS
{
    UINT16 script;
    DWRITE_SCRIPT_SHAPES shapes;
}
enum DWRITE_SCRIPT_SHAPES
{
    _DEFAULT = 0x0,
    _NO_VISUAL = 0x1,
}
struct DWRITE_LINE_BREAKPOINT
{
    UINT8 breakConditionBefore;
    UINT8 breakConditionAfter;
    UINT8 isWhitespace;
    UINT8 isSoftHyphen;
    UINT8 padding;
}
struct DWRITE_TYPOGRAPHIC_FEATURES
{
    DWRITE_FONT_FEATURE* features;
    UINT32 featureCount;
}
struct DWRITE_SHAPING_TEXT_PROPERTIES
{
    UINT16 isShapedAlone;
    UINT16 reserved1;
    UINT16 canBreakShapingAfter;
    UINT16 reserved;
}
struct DWRITE_SHAPING_GLYPH_PROPERTIES
{
    UINT16 justification;
    UINT16 isClusterStart;
    UINT16 isDiacritic;
    UINT16 isZeroWidthSpace;
    UINT16 reserved;
}
enum DWRITE_NUMBER_SUBSTITUTION_METHOD
{
    _FROM_CULTURE = 0x0,
    _CONTEXTUAL = 0x1,
    _NONE = 0x2,
    _NATIONAL = 0x3,
    _TRADITIONAL = 0x4,
}
interface IDWriteGlyphRunAnalysis: IUnknown
{
    static const iidof = parseGUID("7d97dbf7-e085-42d4-81e3-6a883bded118");
    HRESULT GetAlphaTextureBounds(DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds);
    HRESULT CreateAlphaTexture(DWRITE_TEXTURE_TYPE textureType, const(RECT)* textureBounds, BYTE* alphaValues, UINT32 bufferSize);
    HRESULT GetAlphaBlendParams(IDWriteRenderingParams renderingParams, FLOAT* blendGamma, FLOAT* blendEnhancedContrast, FLOAT* blendClearTypeLevel);
}
enum DWRITE_TEXTURE_TYPE
{
    _ALIASED_1x1 = 0x0,
    _CLEARTYPE_3x1 = 0x1,
}
extern(C++) HRESULT DWriteCreateFactory(DWRITE_FACTORY_TYPE factoryType, ref IID iid, IUnknown* factory);
