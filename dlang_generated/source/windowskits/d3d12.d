// This source code was generated by regenerator
module windowskits.d3d12;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.winnt;
import core.sys.windows.windef;
import core.sys.windows.basetsd;
import core.sys.windows.winnt;
import windowskits.guiddef;
import core.sys.windows.basetyps;
import windowskits.minwindef;
import windowskits.dxgiformat;
import windowskits.dxgicommon;
import windowskits.d3dcommon;
import windowskits.windef;
import windowskits.minwinbase;
enum D3D12_16BIT_INDEX_STRIP_CUT_VALUE = ( 0xffff );
enum D3D12_32BIT_INDEX_STRIP_CUT_VALUE = ( 0xffffffff );
enum D3D12_8BIT_INDEX_STRIP_CUT_VALUE = ( 0xff );
enum D3D12_APPEND_ALIGNED_ELEMENT = ( 0xffffffff );
enum D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
enum D3D12_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
enum D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
enum D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
enum D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
enum D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
enum D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
enum D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
enum D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
enum D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
enum D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( - 10 );
enum D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( - 8 );
enum D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
enum D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = ( 256 );
enum D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
enum D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
enum D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
enum D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
enum D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
enum D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
enum D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
enum D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
enum D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
enum D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
enum D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
enum D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
enum D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
enum D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
enum D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
enum D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
enum D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
enum D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
enum D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
enum D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
enum D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
enum D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
enum D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
enum D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
enum D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
enum D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
enum D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
enum D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
enum D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
enum D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
enum D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
enum D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
enum D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
enum D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
enum D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
enum D3D12_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
enum D3D12_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
enum D3D12_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
enum D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
enum D3D12_CS_TGSM_REGISTER_COUNT = ( 8192 );
enum D3D12_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
enum D3D12_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
enum D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
enum D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
enum D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
enum D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
enum D3D12_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
enum D3D12_CS_THREADID_REGISTER_COUNT = ( 1 );
enum D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
enum D3D12_CS_THREAD_GROUP_MAX_X = ( 1024 );
enum D3D12_CS_THREAD_GROUP_MAX_Y = ( 1024 );
enum D3D12_CS_THREAD_GROUP_MAX_Z = ( 64 );
enum D3D12_CS_THREAD_GROUP_MIN_X = ( 1 );
enum D3D12_CS_THREAD_GROUP_MIN_Y = ( 1 );
enum D3D12_CS_THREAD_GROUP_MIN_Z = ( 1 );
enum D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
enum D3D12_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
enum D3D12_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
enum D3D12_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
enum D3D12_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
enum D3D12_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D12_DEFAULT_DEPTH_BIAS = ( 0 );
enum D3D12_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
enum D3D12_DEFAULT_MAX_ANISOTROPY = ( 16 );
enum D3D12_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
enum D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = ( 4194304 );
enum D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
enum D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = ( 65536 );
enum D3D12_DEFAULT_SAMPLE_MASK = ( 0xffffffff );
enum D3D12_DEFAULT_SCISSOR_ENDX = ( 0 );
enum D3D12_DEFAULT_SCISSOR_ENDY = ( 0 );
enum D3D12_DEFAULT_SCISSOR_STARTX = ( 0 );
enum D3D12_DEFAULT_SCISSOR_STARTY = ( 0 );
enum D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
enum D3D12_DEFAULT_STENCIL_READ_MASK = ( 0xff );
enum D3D12_DEFAULT_STENCIL_REFERENCE = ( 0 );
enum D3D12_DEFAULT_STENCIL_WRITE_MASK = ( 0xff );
enum D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
enum D3D12_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
enum D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
enum D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
enum D3D12_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
enum D3D12_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
enum D3D12_DEFAULT_VIEWPORT_WIDTH = ( 0 );
enum D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = ( 0xffffffff );
enum D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = ( 0xfffffff7 );
enum D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = ( 0xfffffff0 );
enum D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D12_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_DS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
enum D3D12_FLOAT32_MAX = ( 3.402823466e+38f );
enum D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
enum D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
enum D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
enum D3D12_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
enum D3D12_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
enum D3D12_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
enum D3D12_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
enum D3D12_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
enum D3D12_FTOI_INSTRUCTION_MIN_INPUT = ( - 2147483648.999f );
enum D3D12_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
enum D3D12_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
enum D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
enum D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
enum D3D12_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_GS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D12_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_GS_INPUT_REGISTER_VERTICES = ( 32 );
enum D3D12_GS_MAX_INSTANCE_COUNT = ( 32 );
enum D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
enum D3D12_GS_OUTPUT_ELEMENTS = ( 32 );
enum D3D12_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_GS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
enum D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
enum D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
enum D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
enum D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
enum D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
enum D3D12_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
enum D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
enum D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
enum D3D12_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
enum D3D12_IA_VERTEX_ID_BIT_COUNT = ( 32 );
enum D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
enum D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
enum D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
enum D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( 0xffffffff );
enum D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( 0xffffffff );
enum D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( 0xffffffff );
enum D3D12_KEEP_UNORDERED_ACCESS_VIEWS = ( 0xffffffff );
enum D3D12_LINEAR_GAMMA = ( 1.0f );
enum D3D12_MAJOR_VERSION = ( 12 );
enum D3D12_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
enum D3D12_MAX_DEPTH = ( 1.0f );
enum D3D12_MAX_LIVE_STATIC_SAMPLERS = ( 2032 );
enum D3D12_MAX_MAXANISOTROPY = ( 16 );
enum D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
enum D3D12_MAX_POSITION_VALUE = ( 3.402823466e+34f );
enum D3D12_MAX_ROOT_COST = ( 64 );
enum D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = ( 1000000 );
enum D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = ( 1000000 );
enum D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = ( 2048 );
enum D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
enum D3D12_MAX_VIEW_INSTANCE_COUNT = ( 4 );
enum D3D12_MINOR_VERSION = ( 0 );
enum D3D12_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D12_MIN_DEPTH = ( 0.0f );
enum D3D12_MIN_MAXANISOTROPY = ( 0 );
enum D3D12_MIP_LOD_BIAS_MAX = ( 15.99f );
enum D3D12_MIP_LOD_BIAS_MIN = ( - 16.0f );
enum D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D12_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
enum D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
enum D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
enum D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = ( 0xffffffff );
enum D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = ( 0xfffffff8 );
enum D3D12_PACKED_TILE = ( 0xffffffff );
enum D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
enum D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D12_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
enum D3D12_PS_CS_UAV_REGISTER_COUNT = ( 8 );
enum D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
enum D3D12_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
enum D3D12_PS_FRONTFACING_DEFAULT_VALUE = ( 0xffffffff );
enum D3D12_PS_FRONTFACING_FALSE_VALUE = ( 0 );
enum D3D12_PS_FRONTFACING_TRUE_VALUE = ( 0xffffffff );
enum D3D12_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_PS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D12_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
enum D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
enum D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
enum D3D12_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_PS_OUTPUT_REGISTER_COUNT = ( 8 );
enum D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
enum D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
enum D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = ( 8 );
enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = ( 256 );
enum D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = ( 16 );
enum D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = ( 32 );
enum D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = ( 31 );
enum D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = ( 16777216 );
enum D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = ( 16777216 );
enum D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = ( 536870912 );
enum D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = ( 1073741824 );
enum D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = ( 4096 );
enum D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = ( 32 );
enum D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = ( 64 );
enum D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = ( 16 );
enum D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
enum D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
enum D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
enum D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
enum D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
enum D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D12_REQ_MAXANISOTROPY = ( 16 );
enum D3D12_REQ_MIP_LEVELS = ( 15 );
enum D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
enum D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
enum D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
enum D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
enum D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D12_REQ_SUBRESOURCES = ( 30720 );
enum D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D12_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
enum D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
enum D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
enum D3D12_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
enum D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
enum D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = ( 0xffffffff );
enum D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = ( 2 );
enum D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = ( 32 );
enum D3D12_SHADER_MAJOR_VERSION = ( 5 );
enum D3D12_SHADER_MAX_INSTANCES = ( 65535 );
enum D3D12_SHADER_MAX_INTERFACES = ( 253 );
enum D3D12_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
enum D3D12_SHADER_MAX_TYPES = ( 65535 );
enum D3D12_SHADER_MINOR_VERSION = ( 1 );
enum D3D12_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
enum D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
enum D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
enum D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = ( 65536 );
enum D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = ( 4096 );
enum D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
enum D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
enum D3D12_SO_BUFFER_SLOT_COUNT = ( 4 );
enum D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( 0xffffffff );
enum D3D12_SO_NO_RASTERIZED_STREAM = ( 0xffffffff );
enum D3D12_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
enum D3D12_SO_STREAM_COUNT = ( 4 );
enum D3D12_SPEC_DATE_DAY = ( 14 );
enum D3D12_SPEC_DATE_MONTH = ( 11 );
enum D3D12_SPEC_DATE_YEAR = ( 2014 );
enum D3D12_SPEC_VERSION = ( 1.16 );
enum D3D12_SRGB_GAMMA = ( 2.2f );
enum D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
enum D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
enum D3D12_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
enum D3D12_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
enum D3D12_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
enum D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
enum D3D12_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
enum D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
enum D3D12_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
enum D3D12_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
enum D3D12_STANDARD_VECTOR_SIZE = ( 4 );
enum D3D12_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
enum D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
enum D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = ( 0xffffffff );
enum D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = ( 0xfffffff0 );
enum D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
enum D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
enum D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
enum D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
enum D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
enum D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
enum D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
enum D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = ( 256 );
enum D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = ( 512 );
enum D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
enum D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = ( 32 );
enum D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = ( 4096 );
enum D3D12_UAV_SLOT_COUNT = ( 64 );
enum D3D12_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
enum D3D12_VIDEO_DECODE_MAX_ARGUMENTS = ( 10 );
enum D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = ( 4 );
enum D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = ( 256 );
enum D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
enum D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = ( 0xffffffff );
enum D3D12_VIDEO_PROCESS_MAX_FILTERS = ( 32 );
enum D3D12_VIDEO_PROCESS_STEREO_VIEWS = ( 2 );
enum D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
enum D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
enum D3D12_VIEWPORT_BOUNDS_MAX = ( 32767 );
enum D3D12_VIEWPORT_BOUNDS_MIN = ( - 32768 );
enum D3D12_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_VS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D12_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D12_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D12_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D12_VS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
enum D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
enum D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
enum D3D12_SHADER_COMPONENT_MAPPING_MASK = 0x7;
enum D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
enum D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = ( 1 << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4 ) );
// macro function: D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING ( Src0 , Src1 , Src2 , Src3 ) ( ( ( ( Src0 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) | ( ( ( Src1 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << D3D12_SHADER_COMPONENT_MAPPING_SHIFT ) | ( ( ( Src2 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2 ) ) | ( ( ( Src3 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3 ) ) | D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES ) );
// macro function: D3D12_DECODE_SHADER_4_COMPONENT_MAPPING ( ComponentToExtract , Mapping ) ( ( D3D12_SHADER_COMPONENT_MAPPING ) ( Mapping >> ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) );
enum D3D12_FILTER_REDUCTION_TYPE_MASK = ( 0x3 );
enum D3D12_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
enum D3D12_FILTER_TYPE_MASK = ( 0x3 );
enum D3D12_MIN_FILTER_SHIFT = ( 4 );
enum D3D12_MAG_FILTER_SHIFT = ( 2 );
enum D3D12_MIP_FILTER_SHIFT = ( 0 );
enum D3D12_ANISOTROPIC_FILTERING_BIT = ( 0x40 );
// macro function: D3D12_ENCODE_BASIC_FILTER ( min , mag , mip , reduction ) ( ( D3D12_FILTER ) ( ( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT ) | ( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT ) | ( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT ) | ( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) );
// macro function: D3D12_ENCODE_ANISOTROPIC_FILTER ( reduction ) ( ( D3D12_FILTER ) ( D3D12_ANISOTROPIC_FILTERING_BIT | D3D12_ENCODE_BASIC_FILTER ( D3D12_FILTER_TYPE_LINEAR , D3D12_FILTER_TYPE_LINEAR , D3D12_FILTER_TYPE_LINEAR , reduction ) ) );
// macro function: D3D12_DECODE_MIN_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) );
// macro function: D3D12_DECODE_MAG_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) );
// macro function: D3D12_DECODE_MIP_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) );
// macro function: D3D12_DECODE_FILTER_REDUCTION ( D3D12Filter ) ( ( D3D12_FILTER_REDUCTION_TYPE ) ( ( ( D3D12Filter ) >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) );
// macro function: D3D12_DECODE_IS_COMPARISON_FILTER ( D3D12Filter ) ( D3D12_DECODE_FILTER_REDUCTION ( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON );
// macro function: D3D12_DECODE_IS_ANISOTROPIC_FILTER ( D3D12Filter ) ( ( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER ( D3D12Filter ) ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER ( D3D12Filter ) ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER ( D3D12Filter ) ) );
enum D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
enum D3D12_SHADING_RATE_VALID_MASK = 3;
// macro function: D3D12_MAKE_COARSE_SHADING_RATE ( x , y ) ( ( x ) << D3D12_SHADING_RATE_X_AXIS_SHIFT | ( y ) );
// macro function: D3D12_GET_COARSE_SHADING_RATE_X_AXIS ( x ) ( ( ( x ) >> D3D12_SHADING_RATE_X_AXIS_SHIFT ) & D3D12_SHADING_RATE_VALID_MASK );
// macro function: D3D12_GET_COARSE_SHADING_RATE_Y_AXIS ( y ) ( ( y ) & D3D12_SHADING_RATE_VALID_MASK );
struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_362
{
    UINT Slot;
}
struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_363
{
    UINT RootParameterIndex;
    UINT DestOffsetIn32BitValues;
    UINT Num32BitValuesToSet;
}
struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_364
{
    UINT RootParameterIndex;
}
struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_365
{
    UINT RootParameterIndex;
}
struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_366
{
    UINT RootParameterIndex;
}
interface ID3D12Object: IUnknown
{
    static const iidof = parseGUID("c4fec28f-7966-4e95-9f94-f431cb56c3b8");
    HRESULT GetPrivateData(ref GUID guid, UINT* pDataSize, void* pData);
    HRESULT SetPrivateData(ref GUID guid, UINT DataSize, const(void)* pData);
    HRESULT SetPrivateDataInterface(ref GUID guid, const(IUnknown) pData);
    HRESULT SetName(LPCWSTR Name);
}
interface ID3D12DeviceChild: ID3D12Object
{
    static const iidof = parseGUID("905db94b-a00c-4140-9df5-2b64ca9ea357");
    HRESULT GetDevice(ref IID riid, void** ppvDevice);
}
interface ID3D12RootSignature: ID3D12DeviceChild
{
    static const iidof = parseGUID("c54a6b66-72df-4ee8-8be5-a946a1429214");
}
interface ID3D12RootSignatureDeserializer: IUnknown
{
    static const iidof = parseGUID("34ab647b-3cc8-46ac-841b-c0965645c046");
    const(D3D12_ROOT_SIGNATURE_DESC)* GetRootSignatureDesc();
}
struct D3D12_ROOT_SIGNATURE_DESC
{
    UINT NumParameters;
    const(D3D12_ROOT_PARAMETER)* pParameters;
    UINT NumStaticSamplers;
    const(D3D12_STATIC_SAMPLER_DESC)* pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}
struct D3D12_ROOT_PARAMETER
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union {
        D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
        D3D12_ROOT_CONSTANTS Constants;
        D3D12_ROOT_DESCRIPTOR Descriptor;
    }
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}
enum D3D12_ROOT_PARAMETER_TYPE
{
    _DESCRIPTOR_TABLE = 0x0,
    _32BIT_CONSTANTS = 0x1,
    _CBV = 0x2,
    _SRV = 0x3,
    _UAV = 0x4,
}
struct D3D12_ROOT_DESCRIPTOR_TABLE
{
    UINT NumDescriptorRanges;
    const(D3D12_DESCRIPTOR_RANGE)* pDescriptorRanges;
}
struct D3D12_DESCRIPTOR_RANGE
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    UINT NumDescriptors;
    UINT BaseShaderRegister;
    UINT RegisterSpace;
    UINT OffsetInDescriptorsFromTableStart;
}
enum D3D12_DESCRIPTOR_RANGE_TYPE
{
    _SRV = 0x0,
    _UAV = 0x1,
    _CBV = 0x2,
    _SAMPLER = 0x3,
}
struct D3D12_ROOT_CONSTANTS
{
    UINT ShaderRegister;
    UINT RegisterSpace;
    UINT Num32BitValues;
}
struct D3D12_ROOT_DESCRIPTOR
{
    UINT ShaderRegister;
    UINT RegisterSpace;
}
enum D3D12_SHADER_VISIBILITY
{
    _ALL = 0x0,
    _VERTEX = 0x1,
    _HULL = 0x2,
    _DOMAIN = 0x3,
    _GEOMETRY = 0x4,
    _PIXEL = 0x5,
}
struct D3D12_STATIC_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    D3D12_STATIC_BORDER_COLOR BorderColor;
    FLOAT MinLOD;
    FLOAT MaxLOD;
    UINT ShaderRegister;
    UINT RegisterSpace;
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}
enum D3D12_FILTER
{
    _MIN_MAG_MIP_POINT = 0x0,
    _MIN_MAG_POINT_MIP_LINEAR = 0x1,
    _MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    _MIN_POINT_MAG_MIP_LINEAR = 0x5,
    _MIN_LINEAR_MAG_MIP_POINT = 0x10,
    _MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    _MIN_MAG_LINEAR_MIP_POINT = 0x14,
    _MIN_MAG_MIP_LINEAR = 0x15,
    _ANISOTROPIC = 0x55,
    _COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    _COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    _COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    _COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    _COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    _COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    _COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    _COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    _COMPARISON_ANISOTROPIC = 0xd5,
    _MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    _MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    _MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    _MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    _MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    _MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    _MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    _MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    _MINIMUM_ANISOTROPIC = 0x155,
    _MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    _MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    _MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    _MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    _MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    _MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    _MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    _MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    _MAXIMUM_ANISOTROPIC = 0x1d5,
}
enum D3D12_TEXTURE_ADDRESS_MODE
{
    _WRAP = 0x1,
    _MIRROR = 0x2,
    _CLAMP = 0x3,
    _BORDER = 0x4,
    _MIRROR_ONCE = 0x5,
}
enum D3D12_COMPARISON_FUNC
{
    _NEVER = 0x1,
    _LESS = 0x2,
    _EQUAL = 0x3,
    _LESS_EQUAL = 0x4,
    _GREATER = 0x5,
    _NOT_EQUAL = 0x6,
    _GREATER_EQUAL = 0x7,
    _ALWAYS = 0x8,
}
enum D3D12_STATIC_BORDER_COLOR
{
    _TRANSPARENT_BLACK = 0x0,
    _OPAQUE_BLACK = 0x1,
    _OPAQUE_WHITE = 0x2,
}
enum D3D12_ROOT_SIGNATURE_FLAGS
{
    _NONE = 0x0,
    _ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
    _DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
    _DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
    _DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
    _DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
    _DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
    _ALLOW_STREAM_OUTPUT = 0x40,
    _LOCAL_ROOT_SIGNATURE = 0x80,
}
interface ID3D12VersionedRootSignatureDeserializer: IUnknown
{
    static const iidof = parseGUID("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0");
    HRESULT GetRootSignatureDescAtVersion(D3D_ROOT_SIGNATURE_VERSION convertToVersion, const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)** ppDesc);
    const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)* GetUnconvertedRootSignatureDesc();
}
enum D3D_ROOT_SIGNATURE_VERSION
{
    _1 = 0x1,
    _1_0 = 0x1,
    _1_1 = 0x2,
}
struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
{
    D3D_ROOT_SIGNATURE_VERSION Version;
    union {
        D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
        D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
    }
}
struct D3D12_ROOT_SIGNATURE_DESC1
{
    UINT NumParameters;
    const(D3D12_ROOT_PARAMETER1)* pParameters;
    UINT NumStaticSamplers;
    const(D3D12_STATIC_SAMPLER_DESC)* pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}
struct D3D12_ROOT_PARAMETER1
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union {
        D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
        D3D12_ROOT_CONSTANTS Constants;
        D3D12_ROOT_DESCRIPTOR1 Descriptor;
    }
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}
struct D3D12_ROOT_DESCRIPTOR_TABLE1
{
    UINT NumDescriptorRanges;
    const(D3D12_DESCRIPTOR_RANGE1)* pDescriptorRanges;
}
struct D3D12_DESCRIPTOR_RANGE1
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    UINT NumDescriptors;
    UINT BaseShaderRegister;
    UINT RegisterSpace;
    D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
    UINT OffsetInDescriptorsFromTableStart;
}
enum D3D12_DESCRIPTOR_RANGE_FLAGS
{
    _NONE = 0x0,
    _DESCRIPTORS_VOLATILE = 0x1,
    _DATA_VOLATILE = 0x2,
    _DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
    _DATA_STATIC = 0x8,
    _DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 0x10000,
}
struct D3D12_ROOT_DESCRIPTOR1
{
    UINT ShaderRegister;
    UINT RegisterSpace;
    D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
}
enum D3D12_ROOT_DESCRIPTOR_FLAGS
{
    _NONE = 0x0,
    _DATA_VOLATILE = 0x2,
    _DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
    _DATA_STATIC = 0x8,
}
interface ID3D12Pageable: ID3D12DeviceChild
{
    static const iidof = parseGUID("63ee58fb-1268-4835-86da-f008ce62f0d6");
}
interface ID3D12Heap: ID3D12Pageable
{
    static const iidof = parseGUID("6b3b2502-6e51-45b3-90ee-9884265e8df3");
    D3D12_HEAP_DESC GetDesc();
}
struct D3D12_HEAP_DESC
{
    UINT64 SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    UINT64 Alignment;
    D3D12_HEAP_FLAGS Flags;
}
struct D3D12_HEAP_PROPERTIES
{
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL MemoryPoolPreference;
    UINT CreationNodeMask;
    UINT VisibleNodeMask;
}
enum D3D12_HEAP_TYPE
{
    _DEFAULT = 0x1,
    _UPLOAD = 0x2,
    _READBACK = 0x3,
    _CUSTOM = 0x4,
}
enum D3D12_CPU_PAGE_PROPERTY
{
    _UNKNOWN = 0x0,
    _NOT_AVAILABLE = 0x1,
    _WRITE_COMBINE = 0x2,
    _WRITE_BACK = 0x3,
}
enum D3D12_MEMORY_POOL
{
    _UNKNOWN = 0x0,
    _L0 = 0x1,
    _L1 = 0x2,
}
enum D3D12_HEAP_FLAGS
{
    _NONE = 0x0,
    _SHARED = 0x1,
    _DENY_BUFFERS = 0x4,
    _ALLOW_DISPLAY = 0x8,
    _SHARED_CROSS_ADAPTER = 0x20,
    _DENY_RT_DS_TEXTURES = 0x40,
    _DENY_NON_RT_DS_TEXTURES = 0x80,
    _HARDWARE_PROTECTED = 0x100,
    _ALLOW_WRITE_WATCH = 0x200,
    _ALLOW_SHADER_ATOMICS = 0x400,
    _ALLOW_ALL_BUFFERS_AND_TEXTURES = 0x0,
    _ALLOW_ONLY_BUFFERS = 0xc0,
    _ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
    _ALLOW_ONLY_RT_DS_TEXTURES = 0x84,
}
interface ID3D12Resource: ID3D12Pageable
{
    static const iidof = parseGUID("696442be-a72e-4059-bc79-5b5c98040fad");
    HRESULT Map(UINT Subresource, const(D3D12_RANGE)* pReadRange, void** ppData);
    void Unmap(UINT Subresource, const(D3D12_RANGE)* pWrittenRange);
    D3D12_RESOURCE_DESC GetDesc();
    D3D12_GPU_VIRTUAL_ADDRESS GetGPUVirtualAddress();
    HRESULT WriteToSubresource(UINT DstSubresource, const(D3D12_BOX)* pDstBox, const(void)* pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch);
    HRESULT ReadFromSubresource(void* pDstData, UINT DstRowPitch, UINT DstDepthPitch, UINT SrcSubresource, const(D3D12_BOX)* pSrcBox);
    HRESULT GetHeapProperties(D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS* pHeapFlags);
}
struct D3D12_RANGE
{
    SIZE_T Begin;
    SIZE_T End;
}
struct D3D12_RESOURCE_DESC
{
    D3D12_RESOURCE_DIMENSION Dimension;
    UINT64 Alignment;
    UINT64 Width;
    UINT Height;
    UINT16 DepthOrArraySize;
    UINT16 MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
}
enum D3D12_RESOURCE_DIMENSION
{
    _UNKNOWN = 0x0,
    _BUFFER = 0x1,
    _TEXTURE1D = 0x2,
    _TEXTURE2D = 0x3,
    _TEXTURE3D = 0x4,
}
enum D3D12_TEXTURE_LAYOUT
{
    _UNKNOWN = 0x0,
    _ROW_MAJOR = 0x1,
    _64KB_UNDEFINED_SWIZZLE = 0x2,
    _64KB_STANDARD_SWIZZLE = 0x3,
}
enum D3D12_RESOURCE_FLAGS
{
    _NONE = 0x0,
    _ALLOW_RENDER_TARGET = 0x1,
    _ALLOW_DEPTH_STENCIL = 0x2,
    _ALLOW_UNORDERED_ACCESS = 0x4,
    _DENY_SHADER_RESOURCE = 0x8,
    _ALLOW_CROSS_ADAPTER = 0x10,
    _ALLOW_SIMULTANEOUS_ACCESS = 0x20,
    _VIDEO_DECODE_REFERENCE_ONLY = 0x40,
}
alias D3D12_GPU_VIRTUAL_ADDRESS = UINT64;
struct D3D12_BOX
{
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
}
interface ID3D12CommandAllocator: ID3D12Pageable
{
    static const iidof = parseGUID("6102dee4-af59-4b09-b999-b44d73f09b24");
    HRESULT Reset();
}
interface ID3D12Fence: ID3D12Pageable
{
    static const iidof = parseGUID("0a753dcf-c4d8-4b91-adf6-be5a60d95a76");
    UINT64 GetCompletedValue();
    HRESULT SetEventOnCompletion(UINT64 Value, HANDLE hEvent);
    HRESULT Signal(UINT64 Value);
}
interface ID3D12Fence1: ID3D12Fence
{
    static const iidof = parseGUID("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a");
    D3D12_FENCE_FLAGS GetCreationFlags();
}
enum D3D12_FENCE_FLAGS
{
    _NONE = 0x0,
    _SHARED = 0x1,
    _SHARED_CROSS_ADAPTER = 0x2,
    _NON_MONITORED = 0x4,
}
interface ID3D12PipelineState: ID3D12Pageable
{
    static const iidof = parseGUID("765a30f3-f624-4c6f-a828-ace948622445");
    HRESULT GetCachedBlob(ID3DBlob* ppBlob);
}
interface ID3D12DescriptorHeap: ID3D12Pageable
{
    static const iidof = parseGUID("8efb471d-616c-4f49-90f7-127bb763fa51");
    D3D12_DESCRIPTOR_HEAP_DESC GetDesc();
    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();
    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
}
struct D3D12_DESCRIPTOR_HEAP_DESC
{
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    UINT NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    UINT NodeMask;
}
enum D3D12_DESCRIPTOR_HEAP_TYPE
{
    _CBV_SRV_UAV = 0x0,
    _SAMPLER = 0x1,
    _RTV = 0x2,
    _DSV = 0x3,
    _NUM_TYPES = 0x4,
}
enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
    _NONE = 0x0,
    _SHADER_VISIBLE = 0x1,
}
struct D3D12_CPU_DESCRIPTOR_HANDLE
{
    SIZE_T ptr;
}
struct D3D12_GPU_DESCRIPTOR_HANDLE
{
    UINT64 ptr;
}
interface ID3D12QueryHeap: ID3D12Pageable
{
    static const iidof = parseGUID("0d9658ae-ed45-469e-a61d-970ec583cab4");
}
interface ID3D12CommandSignature: ID3D12Pageable
{
    static const iidof = parseGUID("c36a797c-ec80-4f0a-8985-a7b2475082d1");
}
interface ID3D12CommandList: ID3D12DeviceChild
{
    static const iidof = parseGUID("7116d91c-e7e4-47ce-b8c6-ec8168f437e5");
    D3D12_COMMAND_LIST_TYPE GetType();
}
enum D3D12_COMMAND_LIST_TYPE
{
    _DIRECT = 0x0,
    _BUNDLE = 0x1,
    _COMPUTE = 0x2,
    _COPY = 0x3,
    _VIDEO_DECODE = 0x4,
    _VIDEO_PROCESS = 0x5,
    _VIDEO_ENCODE = 0x6,
}
interface ID3D12GraphicsCommandList: ID3D12CommandList
{
    static const iidof = parseGUID("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455");
    HRESULT Close();
    HRESULT Reset(ID3D12CommandAllocator pAllocator, ID3D12PipelineState pInitialState);
    void ClearState(ID3D12PipelineState pPipelineState);
    void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation);
    void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation);
    void Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ);
    void CopyBufferRegion(ID3D12Resource pDstBuffer, UINT64 DstOffset, ID3D12Resource pSrcBuffer, UINT64 SrcOffset, UINT64 NumBytes);
    void CopyTextureRegion(const(D3D12_TEXTURE_COPY_LOCATION)* pDst, UINT DstX, UINT DstY, UINT DstZ, const(D3D12_TEXTURE_COPY_LOCATION)* pSrc, const(D3D12_BOX)* pSrcBox);
    void CopyResource(ID3D12Resource pDstResource, ID3D12Resource pSrcResource);
    void CopyTiles(ID3D12Resource pTiledResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pTileRegionStartCoordinate, const(D3D12_TILE_REGION_SIZE)* pTileRegionSize, ID3D12Resource pBuffer, UINT64 BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);
    void ResolveSubresource(ID3D12Resource pDstResource, UINT DstSubresource, ID3D12Resource pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format);
    void IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology);
    void RSSetViewports(UINT NumViewports, const(D3D12_VIEWPORT)* pViewports);
    void RSSetScissorRects(UINT NumRects, const(D3D12_RECT)* pRects);
    void OMSetBlendFactor(FLOAT[4] BlendFactor);
    void OMSetStencilRef(UINT StencilRef);
    void SetPipelineState(ID3D12PipelineState pPipelineState);
    void ResourceBarrier(UINT NumBarriers, const(D3D12_RESOURCE_BARRIER)* pBarriers);
    void ExecuteBundle(ID3D12GraphicsCommandList pCommandList);
    void SetDescriptorHeaps(UINT NumDescriptorHeaps, const(ID3D12DescriptorHeap)* ppDescriptorHeaps);
    void SetComputeRootSignature(ID3D12RootSignature pRootSignature);
    void SetGraphicsRootSignature(ID3D12RootSignature pRootSignature);
    void SetComputeRootDescriptorTable(UINT RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetGraphicsRootDescriptorTable(UINT RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetComputeRoot32BitConstant(UINT RootParameterIndex, UINT SrcData, UINT DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstant(UINT RootParameterIndex, UINT SrcData, UINT DestOffsetIn32BitValues);
    void SetComputeRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const(void)* pSrcData, UINT DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const(void)* pSrcData, UINT DestOffsetIn32BitValues);
    void SetComputeRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetComputeRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetComputeRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void IASetIndexBuffer(const(D3D12_INDEX_BUFFER_VIEW)* pView);
    void IASetVertexBuffers(UINT StartSlot, UINT NumViews, const(D3D12_VERTEX_BUFFER_VIEW)* pViews);
    void SOSetTargets(UINT StartSlot, UINT NumViews, const(D3D12_STREAM_OUTPUT_BUFFER_VIEW)* pViews);
    void OMSetRenderTargets(UINT NumRenderTargetDescriptors, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pDepthStencilDescriptor);
    void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const(D3D12_RECT)* pRects);
    void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, FLOAT[4] ColorRGBA, UINT NumRects, const(D3D12_RECT)* pRects);
    void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, UINT[4] Values, UINT NumRects, const(D3D12_RECT)* pRects);
    void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, FLOAT[4] Values, UINT NumRects, const(D3D12_RECT)* pRects);
    void DiscardResource(ID3D12Resource pResource, const(D3D12_DISCARD_REGION)* pRegion);
    void BeginQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, UINT Index);
    void EndQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, UINT Index);
    void ResolveQueryData(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, UINT StartIndex, UINT NumQueries, ID3D12Resource pDestinationBuffer, UINT64 AlignedDestinationBufferOffset);
    void SetPredication(ID3D12Resource pBuffer, UINT64 AlignedBufferOffset, D3D12_PREDICATION_OP Operation);
    void SetMarker(UINT Metadata, const(void)* pData, UINT Size);
    void BeginEvent(UINT Metadata, const(void)* pData, UINT Size);
    void EndEvent();
    void ExecuteIndirect(ID3D12CommandSignature pCommandSignature, UINT MaxCommandCount, ID3D12Resource pArgumentBuffer, UINT64 ArgumentBufferOffset, ID3D12Resource pCountBuffer, UINT64 CountBufferOffset);
}
struct D3D12_TEXTURE_COPY_LOCATION
{
    ID3D12Resource pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    union {
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        UINT SubresourceIndex;
    }
}
enum D3D12_TEXTURE_COPY_TYPE
{
    _SUBRESOURCE_INDEX = 0x0,
    _PLACED_FOOTPRINT = 0x1,
}
struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
    UINT64 Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
}
struct D3D12_SUBRESOURCE_FOOTPRINT
{
    DXGI_FORMAT Format;
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT RowPitch;
}
struct D3D12_TILED_RESOURCE_COORDINATE
{
    UINT X;
    UINT Y;
    UINT Z;
    UINT Subresource;
}
struct D3D12_TILE_REGION_SIZE
{
    UINT NumTiles;
    BOOL UseBox;
    UINT Width;
    UINT16 Height;
    UINT16 Depth;
}
enum D3D12_TILE_COPY_FLAGS
{
    _NONE = 0x0,
    _NO_HAZARD = 0x1,
    _LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    _SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4,
}
alias D3D12_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
struct D3D12_VIEWPORT
{
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
}
alias D3D12_RECT = RECT;
struct D3D12_RESOURCE_BARRIER
{
    D3D12_RESOURCE_BARRIER_TYPE Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    union {
        D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
        D3D12_RESOURCE_UAV_BARRIER UAV;
    }
}
enum D3D12_RESOURCE_BARRIER_TYPE
{
    _TRANSITION = 0x0,
    _ALIASING = 0x1,
    _UAV = 0x2,
}
enum D3D12_RESOURCE_BARRIER_FLAGS
{
    _NONE = 0x0,
    _BEGIN_ONLY = 0x1,
    _END_ONLY = 0x2,
}
struct D3D12_RESOURCE_TRANSITION_BARRIER
{
    ID3D12Resource pResource;
    UINT Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
}
enum D3D12_RESOURCE_STATES
{
    _COMMON = 0x0,
    _VERTEX_AND_CONSTANT_BUFFER = 0x1,
    _INDEX_BUFFER = 0x2,
    _RENDER_TARGET = 0x4,
    _UNORDERED_ACCESS = 0x8,
    _DEPTH_WRITE = 0x10,
    _DEPTH_READ = 0x20,
    _NON_PIXEL_SHADER_RESOURCE = 0x40,
    _PIXEL_SHADER_RESOURCE = 0x80,
    _STREAM_OUT = 0x100,
    _INDIRECT_ARGUMENT = 0x200,
    _COPY_DEST = 0x400,
    _COPY_SOURCE = 0x800,
    _RESOLVE_DEST = 0x1000,
    _RESOLVE_SOURCE = 0x2000,
    _RAYTRACING_ACCELERATION_STRUCTURE = 0x400000,
    _SHADING_RATE_SOURCE = 0x1000000,
    _GENERIC_READ = 0xac3,
    _PRESENT = 0x0,
    _PREDICATION = 0x200,
    _VIDEO_DECODE_READ = 0x10000,
    _VIDEO_DECODE_WRITE = 0x20000,
    _VIDEO_PROCESS_READ = 0x40000,
    _VIDEO_PROCESS_WRITE = 0x80000,
    _VIDEO_ENCODE_READ = 0x200000,
    _VIDEO_ENCODE_WRITE = 0x800000,
}
struct D3D12_RESOURCE_ALIASING_BARRIER
{
    ID3D12Resource pResourceBefore;
    ID3D12Resource pResourceAfter;
}
struct D3D12_RESOURCE_UAV_BARRIER
{
    ID3D12Resource pResource;
}
struct D3D12_INDEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT SizeInBytes;
    DXGI_FORMAT Format;
}
struct D3D12_VERTEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT SizeInBytes;
    UINT StrideInBytes;
}
struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT64 SizeInBytes;
    D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
}
enum D3D12_CLEAR_FLAGS
{
    _DEPTH = 0x1,
    _STENCIL = 0x2,
}
struct D3D12_DISCARD_REGION
{
    UINT NumRects;
    const(D3D12_RECT)* pRects;
    UINT FirstSubresource;
    UINT NumSubresources;
}
enum D3D12_QUERY_TYPE
{
    _OCCLUSION = 0x0,
    _BINARY_OCCLUSION = 0x1,
    _TIMESTAMP = 0x2,
    _PIPELINE_STATISTICS = 0x3,
    _SO_STATISTICS_STREAM0 = 0x4,
    _SO_STATISTICS_STREAM1 = 0x5,
    _SO_STATISTICS_STREAM2 = 0x6,
    _SO_STATISTICS_STREAM3 = 0x7,
    _VIDEO_DECODE_STATISTICS = 0x8,
}
enum D3D12_PREDICATION_OP
{
    _EQUAL_ZERO = 0x0,
    _NOT_EQUAL_ZERO = 0x1,
}
interface ID3D12GraphicsCommandList1: ID3D12GraphicsCommandList
{
    static const iidof = parseGUID("553103fb-1fe7-4557-bb38-946d7d0e7ca7");
    void AtomicCopyBufferUINT(ID3D12Resource pDstBuffer, UINT64 DstOffset, ID3D12Resource pSrcBuffer, UINT64 SrcOffset, UINT Dependencies, const(ID3D12Resource)* ppDependentResources, const(D3D12_SUBRESOURCE_RANGE_UINT64)* pDependentSubresourceRanges);
    void AtomicCopyBufferUINT64(ID3D12Resource pDstBuffer, UINT64 DstOffset, ID3D12Resource pSrcBuffer, UINT64 SrcOffset, UINT Dependencies, const(ID3D12Resource)* ppDependentResources, const(D3D12_SUBRESOURCE_RANGE_UINT64)* pDependentSubresourceRanges);
    void OMSetDepthBounds(FLOAT Min, FLOAT Max);
    void SetSamplePositions(UINT NumSamplesPerPixel, UINT NumPixels, D3D12_SAMPLE_POSITION* pSamplePositions);
    void ResolveSubresourceRegion(ID3D12Resource pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, ID3D12Resource pSrcResource, UINT SrcSubresource, D3D12_RECT* pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode);
    void SetViewInstanceMask(UINT Mask);
}
struct D3D12_SUBRESOURCE_RANGE_UINT64
{
    UINT Subresource;
    D3D12_RANGE_UINT64 Range;
}
struct D3D12_RANGE_UINT64
{
    UINT64 Begin;
    UINT64 End;
}
struct D3D12_SAMPLE_POSITION
{
    INT8 X;
    INT8 Y;
}
enum D3D12_RESOLVE_MODE
{
    _DECOMPRESS = 0x0,
    _MIN = 0x1,
    _MAX = 0x2,
    _AVERAGE = 0x3,
}
interface ID3D12GraphicsCommandList2: ID3D12GraphicsCommandList1
{
    static const iidof = parseGUID("38c3e585-ff17-412c-9150-4fc6f9d72a28");
    void WriteBufferImmediate(UINT Count, const(D3D12_WRITEBUFFERIMMEDIATE_PARAMETER)* pParams, const(D3D12_WRITEBUFFERIMMEDIATE_MODE)* pModes);
}
struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
{
    D3D12_GPU_VIRTUAL_ADDRESS Dest;
    UINT32 Value;
}
enum D3D12_WRITEBUFFERIMMEDIATE_MODE
{
    _DEFAULT = 0x0,
    _MARKER_IN = 0x1,
    _MARKER_OUT = 0x2,
}
interface ID3D12CommandQueue: ID3D12Pageable
{
    static const iidof = parseGUID("0ec870a6-5d7e-4c22-8cfc-5baae07616ed");
    void UpdateTileMappings(ID3D12Resource pResource, UINT NumResourceRegions, const(D3D12_TILED_RESOURCE_COORDINATE)* pResourceRegionStartCoordinates, const(D3D12_TILE_REGION_SIZE)* pResourceRegionSizes, ID3D12Heap pHeap, UINT NumRanges, const(D3D12_TILE_RANGE_FLAGS)* pRangeFlags, const(UINT)* pHeapRangeStartOffsets, const(UINT)* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags);
    void CopyTileMappings(ID3D12Resource pDstResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pDstRegionStartCoordinate, ID3D12Resource pSrcResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pSrcRegionStartCoordinate, const(D3D12_TILE_REGION_SIZE)* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags);
    void ExecuteCommandLists(UINT NumCommandLists, const(ID3D12CommandList)* ppCommandLists);
    void SetMarker(UINT Metadata, const(void)* pData, UINT Size);
    void BeginEvent(UINT Metadata, const(void)* pData, UINT Size);
    void EndEvent();
    HRESULT Signal(ID3D12Fence pFence, UINT64 Value);
    HRESULT Wait(ID3D12Fence pFence, UINT64 Value);
    HRESULT GetTimestampFrequency(UINT64* pFrequency);
    HRESULT GetClockCalibration(UINT64* pGpuTimestamp, UINT64* pCpuTimestamp);
    D3D12_COMMAND_QUEUE_DESC GetDesc();
}
enum D3D12_TILE_RANGE_FLAGS
{
    _NONE = 0x0,
    _NULL = 0x1,
    _SKIP = 0x2,
    _REUSE_SINGLE_TILE = 0x4,
}
enum D3D12_TILE_MAPPING_FLAGS
{
    _NONE = 0x0,
    _NO_HAZARD = 0x1,
}
struct D3D12_COMMAND_QUEUE_DESC
{
    D3D12_COMMAND_LIST_TYPE Type;
    INT Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    UINT NodeMask;
}
enum D3D12_COMMAND_QUEUE_FLAGS
{
    _NONE = 0x0,
    _DISABLE_GPU_TIMEOUT = 0x1,
}
interface ID3D12Device: ID3D12Object
{
    static const iidof = parseGUID("189819f1-1db6-4b57-be54-1821339b85f7");
    UINT GetNodeCount();
    HRESULT CreateCommandQueue(const(D3D12_COMMAND_QUEUE_DESC)* pDesc, ref IID riid, void** ppCommandQueue);
    HRESULT CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE type, ref IID riid, void** ppCommandAllocator);
    HRESULT CreateGraphicsPipelineState(const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)* pDesc, ref IID riid, void** ppPipelineState);
    HRESULT CreateComputePipelineState(const(D3D12_COMPUTE_PIPELINE_STATE_DESC)* pDesc, ref IID riid, void** ppPipelineState);
    HRESULT CreateCommandList(UINT nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator pCommandAllocator, ID3D12PipelineState pInitialState, ref IID riid, void** ppCommandList);
    HRESULT CheckFeatureSupport(D3D12_FEATURE Feature, void* pFeatureSupportData, UINT FeatureSupportDataSize);
    HRESULT CreateDescriptorHeap(const(D3D12_DESCRIPTOR_HEAP_DESC)* pDescriptorHeapDesc, ref IID riid, void** ppvHeap);
    UINT GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);
    HRESULT CreateRootSignature(UINT nodeMask, const(void)* pBlobWithRootSignature, SIZE_T blobLengthInBytes, ref IID riid, void** ppvRootSignature);
    void CreateConstantBufferView(const(D3D12_CONSTANT_BUFFER_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateShaderResourceView(ID3D12Resource pResource, const(D3D12_SHADER_RESOURCE_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateUnorderedAccessView(ID3D12Resource pResource, ID3D12Resource pCounterResource, const(D3D12_UNORDERED_ACCESS_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateRenderTargetView(ID3D12Resource pResource, const(D3D12_RENDER_TARGET_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateDepthStencilView(ID3D12Resource pResource, const(D3D12_DEPTH_STENCIL_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateSampler(const(D3D12_SAMPLER_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CopyDescriptors(UINT NumDestDescriptorRanges, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pDestDescriptorRangeStarts, const(UINT)* pDestDescriptorRangeSizes, UINT NumSrcDescriptorRanges, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pSrcDescriptorRangeStarts, const(UINT)* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    void CopyDescriptorsSimple(UINT NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(UINT visibleMask, UINT numResourceDescs, const(D3D12_RESOURCE_DESC)* pResourceDescs);
    D3D12_HEAP_PROPERTIES GetCustomHeapProperties(UINT nodeMask, D3D12_HEAP_TYPE heapType);
    HRESULT CreateCommittedResource(const(D3D12_HEAP_PROPERTIES)* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialResourceState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ref IID riidResource, void** ppvResource);
    HRESULT CreateHeap(const(D3D12_HEAP_DESC)* pDesc, ref IID riid, void** ppvHeap);
    HRESULT CreatePlacedResource(ID3D12Heap pHeap, UINT64 HeapOffset, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ref IID riid, void** ppvResource);
    HRESULT CreateReservedResource(const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ref IID riid, void** ppvResource);
    HRESULT CreateSharedHandle(ID3D12DeviceChild pObject, const(SECURITY_ATTRIBUTES)* pAttributes, DWORD Access, LPCWSTR Name, HANDLE* pHandle);
    HRESULT OpenSharedHandle(HANDLE NTHandle, ref IID riid, void** ppvObj);
    HRESULT OpenSharedHandleByName(LPCWSTR Name, DWORD Access, HANDLE* pNTHandle);
    HRESULT MakeResident(UINT NumObjects, const(ID3D12Pageable)* ppObjects);
    HRESULT Evict(UINT NumObjects, const(ID3D12Pageable)* ppObjects);
    HRESULT CreateFence(UINT64 InitialValue, D3D12_FENCE_FLAGS Flags, ref IID riid, void** ppFence);
    HRESULT GetDeviceRemovedReason();
    void GetCopyableFootprints(const(D3D12_RESOURCE_DESC)* pResourceDesc, UINT FirstSubresource, UINT NumSubresources, UINT64 BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, UINT* pNumRows, UINT64* pRowSizeInBytes, UINT64* pTotalBytes);
    HRESULT CreateQueryHeap(const(D3D12_QUERY_HEAP_DESC)* pDesc, ref IID riid, void** ppvHeap);
    HRESULT SetStablePowerState(BOOL Enable);
    HRESULT CreateCommandSignature(const(D3D12_COMMAND_SIGNATURE_DESC)* pDesc, ID3D12RootSignature pRootSignature, ref IID riid, void** ppvCommandSignature);
    void GetResourceTiling(ID3D12Resource pTiledResource, UINT* pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO* pPackedMipDesc, D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, UINT* pNumSubresourceTilings, UINT FirstSubresourceTilingToGet, D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);
    LUID GetAdapterLuid();
}
struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE VS;
    D3D12_SHADER_BYTECODE PS;
    D3D12_SHADER_BYTECODE DS;
    D3D12_SHADER_BYTECODE HS;
    D3D12_SHADER_BYTECODE GS;
    D3D12_STREAM_OUTPUT_DESC StreamOutput;
    D3D12_BLEND_DESC BlendState;
    UINT SampleMask;
    D3D12_RASTERIZER_DESC RasterizerState;
    D3D12_DEPTH_STENCIL_DESC DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    UINT NumRenderTargets;
    DXGI_FORMAT[8] RTVFormats;
    DXGI_FORMAT DSVFormat;
    DXGI_SAMPLE_DESC SampleDesc;
    UINT NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}
struct D3D12_SHADER_BYTECODE
{
    const(void)* pShaderBytecode;
    SIZE_T BytecodeLength;
}
struct D3D12_STREAM_OUTPUT_DESC
{
    const(D3D12_SO_DECLARATION_ENTRY)* pSODeclaration;
    UINT NumEntries;
    const(UINT)* pBufferStrides;
    UINT NumStrides;
    UINT RasterizedStream;
}
struct D3D12_SO_DECLARATION_ENTRY
{
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
}
struct D3D12_BLEND_DESC
{
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}
struct D3D12_RENDER_TARGET_BLEND_DESC
{
    BOOL BlendEnable;
    BOOL LogicOpEnable;
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    UINT8 RenderTargetWriteMask;
}
enum D3D12_BLEND
{
    _ZERO = 0x1,
    _ONE = 0x2,
    _SRC_COLOR = 0x3,
    _INV_SRC_COLOR = 0x4,
    _SRC_ALPHA = 0x5,
    _INV_SRC_ALPHA = 0x6,
    _DEST_ALPHA = 0x7,
    _INV_DEST_ALPHA = 0x8,
    _DEST_COLOR = 0x9,
    _INV_DEST_COLOR = 0xa,
    _SRC_ALPHA_SAT = 0xb,
    _BLEND_FACTOR = 0xe,
    _INV_BLEND_FACTOR = 0xf,
    _SRC1_COLOR = 0x10,
    _INV_SRC1_COLOR = 0x11,
    _SRC1_ALPHA = 0x12,
    _INV_SRC1_ALPHA = 0x13,
}
enum D3D12_BLEND_OP
{
    _ADD = 0x1,
    _SUBTRACT = 0x2,
    _REV_SUBTRACT = 0x3,
    _MIN = 0x4,
    _MAX = 0x5,
}
enum D3D12_LOGIC_OP
{
    _CLEAR = 0x0,
    _SET = 0x1,
    _COPY = 0x2,
    _COPY_INVERTED = 0x3,
    _NOOP = 0x4,
    _INVERT = 0x5,
    _AND = 0x6,
    _NAND = 0x7,
    _OR = 0x8,
    _NOR = 0x9,
    _XOR = 0xa,
    _EQUIV = 0xb,
    _AND_REVERSE = 0xc,
    _AND_INVERTED = 0xd,
    _OR_REVERSE = 0xe,
    _OR_INVERTED = 0xf,
}
struct D3D12_RASTERIZER_DESC
{
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    UINT ForcedSampleCount;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
}
enum D3D12_FILL_MODE
{
    _WIREFRAME = 0x2,
    _SOLID = 0x3,
}
enum D3D12_CULL_MODE
{
    _NONE = 0x1,
    _FRONT = 0x2,
    _BACK = 0x3,
}
enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
    _OFF = 0x0,
    _ON = 0x1,
}
struct D3D12_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
}
enum D3D12_DEPTH_WRITE_MASK
{
    _ZERO = 0x0,
    _ALL = 0x1,
}
struct D3D12_DEPTH_STENCILOP_DESC
{
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
}
enum D3D12_STENCIL_OP
{
    _KEEP = 0x1,
    _ZERO = 0x2,
    _REPLACE = 0x3,
    _INCR_SAT = 0x4,
    _DECR_SAT = 0x5,
    _INVERT = 0x6,
    _INCR = 0x7,
    _DECR = 0x8,
}
struct D3D12_INPUT_LAYOUT_DESC
{
    const(D3D12_INPUT_ELEMENT_DESC)* pInputElementDescs;
    UINT NumElements;
}
struct D3D12_INPUT_ELEMENT_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
}
enum D3D12_INPUT_CLASSIFICATION
{
    _VERTEX_DATA = 0x0,
    _INSTANCE_DATA = 0x1,
}
enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
    _DISABLED = 0x0,
    _0xFFFF = 0x1,
    _0xFFFFFFFF = 0x2,
}
enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
    _UNDEFINED = 0x0,
    _POINT = 0x1,
    _LINE = 0x2,
    _TRIANGLE = 0x3,
    _PATCH = 0x4,
}
struct D3D12_CACHED_PIPELINE_STATE
{
    const(void)* pCachedBlob;
    SIZE_T CachedBlobSizeInBytes;
}
enum D3D12_PIPELINE_STATE_FLAGS
{
    _NONE = 0x0,
    _TOOL_DEBUG = 0x1,
}
struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE CS;
    UINT NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}
enum D3D12_FEATURE
{
    _D3D12_OPTIONS = 0x0,
    _ARCHITECTURE = 0x1,
    _FEATURE_LEVELS = 0x2,
    _FORMAT_SUPPORT = 0x3,
    _MULTISAMPLE_QUALITY_LEVELS = 0x4,
    _FORMAT_INFO = 0x5,
    _GPU_VIRTUAL_ADDRESS_SUPPORT = 0x6,
    _SHADER_MODEL = 0x7,
    _D3D12_OPTIONS1 = 0x8,
    _PROTECTED_RESOURCE_SESSION_SUPPORT = 0xa,
    _ROOT_SIGNATURE = 0xc,
    _ARCHITECTURE1 = 0x10,
    _D3D12_OPTIONS2 = 0x12,
    _SHADER_CACHE = 0x13,
    _COMMAND_QUEUE_PRIORITY = 0x14,
    _D3D12_OPTIONS3 = 0x15,
    _EXISTING_HEAPS = 0x16,
    _D3D12_OPTIONS4 = 0x17,
    _SERIALIZATION = 0x18,
    _CROSS_NODE = 0x19,
    _D3D12_OPTIONS5 = 0x1b,
    _D3D12_OPTIONS6 = 0x1e,
    _QUERY_META_COMMAND = 0x1f,
}
struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT SizeInBytes;
}
struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;
    UINT Shader4ComponentMapping;
    union {
        D3D12_BUFFER_SRV Buffer;
        D3D12_TEX1D_SRV Texture1D;
        D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        D3D12_TEX2D_SRV Texture2D;
        D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        D3D12_TEX2DMS_SRV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV Texture3D;
        D3D12_TEXCUBE_SRV TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
    }
}
enum D3D12_SRV_DIMENSION
{
    _UNKNOWN = 0x0,
    _BUFFER = 0x1,
    _TEXTURE1D = 0x2,
    _TEXTURE1DARRAY = 0x3,
    _TEXTURE2D = 0x4,
    _TEXTURE2DARRAY = 0x5,
    _TEXTURE2DMS = 0x6,
    _TEXTURE2DMSARRAY = 0x7,
    _TEXTURE3D = 0x8,
    _TEXTURECUBE = 0x9,
    _TEXTURECUBEARRAY = 0xa,
    _RAYTRACING_ACCELERATION_STRUCTURE = 0xb,
}
struct D3D12_BUFFER_SRV
{
    UINT64 FirstElement;
    UINT NumElements;
    UINT StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
}
enum D3D12_BUFFER_SRV_FLAGS
{
    _NONE = 0x0,
    _RAW = 0x1,
}
struct D3D12_TEX1D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEX1D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEX2D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT PlaneSlice;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEX2D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    UINT PlaneSlice;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEX2DMS_SRV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D12_TEX2DMS_ARRAY_SRV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX3D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEXCUBE_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_TEXCUBE_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    FLOAT ResourceMinLODClamp;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
{
    D3D12_GPU_VIRTUAL_ADDRESS Location;
}
struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_UAV Buffer;
        D3D12_TEX1D_UAV Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV Texture3D;
    }
}
enum D3D12_UAV_DIMENSION
{
    _UNKNOWN = 0x0,
    _BUFFER = 0x1,
    _TEXTURE1D = 0x2,
    _TEXTURE1DARRAY = 0x3,
    _TEXTURE2D = 0x4,
    _TEXTURE2DARRAY = 0x5,
    _TEXTURE3D = 0x8,
}
struct D3D12_BUFFER_UAV
{
    UINT64 FirstElement;
    UINT NumElements;
    UINT StructureByteStride;
    UINT64 CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
}
enum D3D12_BUFFER_UAV_FLAGS
{
    _NONE = 0x0,
    _RAW = 0x1,
}
struct D3D12_TEX1D_UAV
{
    UINT MipSlice;
}
struct D3D12_TEX1D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX2D_UAV
{
    UINT MipSlice;
    UINT PlaneSlice;
}
struct D3D12_TEX2D_ARRAY_UAV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    UINT PlaneSlice;
}
struct D3D12_TEX3D_UAV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}
struct D3D12_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_RTV Buffer;
        D3D12_TEX1D_RTV Texture1D;
        D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        D3D12_TEX2D_RTV Texture2D;
        D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        D3D12_TEX2DMS_RTV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV Texture3D;
    }
}
enum D3D12_RTV_DIMENSION
{
    _UNKNOWN = 0x0,
    _BUFFER = 0x1,
    _TEXTURE1D = 0x2,
    _TEXTURE1DARRAY = 0x3,
    _TEXTURE2D = 0x4,
    _TEXTURE2DARRAY = 0x5,
    _TEXTURE2DMS = 0x6,
    _TEXTURE2DMSARRAY = 0x7,
    _TEXTURE3D = 0x8,
}
struct D3D12_BUFFER_RTV
{
    UINT64 FirstElement;
    UINT NumElements;
}
struct D3D12_TEX1D_RTV
{
    UINT MipSlice;
}
struct D3D12_TEX1D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX2D_RTV
{
    UINT MipSlice;
    UINT PlaneSlice;
}
struct D3D12_TEX2D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    UINT PlaneSlice;
}
struct D3D12_TEX2DMS_RTV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D12_TEX2DMS_ARRAY_RTV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX3D_RTV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}
struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    union {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
}
enum D3D12_DSV_DIMENSION
{
    _UNKNOWN = 0x0,
    _TEXTURE1D = 0x1,
    _TEXTURE1DARRAY = 0x2,
    _TEXTURE2D = 0x3,
    _TEXTURE2DARRAY = 0x4,
    _TEXTURE2DMS = 0x5,
    _TEXTURE2DMSARRAY = 0x6,
}
enum D3D12_DSV_FLAGS
{
    _NONE = 0x0,
    _READ_ONLY_DEPTH = 0x1,
    _READ_ONLY_STENCIL = 0x2,
}
struct D3D12_TEX1D_DSV
{
    UINT MipSlice;
}
struct D3D12_TEX1D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX2D_DSV
{
    UINT MipSlice;
}
struct D3D12_TEX2D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_TEX2DMS_DSV
{
    UINT UnusedField_NothingToDefine;
}
struct D3D12_TEX2DMS_ARRAY_DSV
{
    UINT FirstArraySlice;
    UINT ArraySize;
}
struct D3D12_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    FLOAT[4] BorderColor;
    FLOAT MinLOD;
    FLOAT MaxLOD;
}
struct D3D12_RESOURCE_ALLOCATION_INFO
{
    UINT64 SizeInBytes;
    UINT64 Alignment;
}
struct D3D12_CLEAR_VALUE
{
    DXGI_FORMAT Format;
    union {
        FLOAT[4] Color;
        D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    }
}
struct D3D12_DEPTH_STENCIL_VALUE
{
    FLOAT Depth;
    UINT8 Stencil;
}
struct D3D12_QUERY_HEAP_DESC
{
    D3D12_QUERY_HEAP_TYPE Type;
    UINT Count;
    UINT NodeMask;
}
enum D3D12_QUERY_HEAP_TYPE
{
    _OCCLUSION = 0x0,
    _TIMESTAMP = 0x1,
    _PIPELINE_STATISTICS = 0x2,
    _SO_STATISTICS = 0x3,
    _VIDEO_DECODE_STATISTICS = 0x4,
    _COPY_QUEUE_TIMESTAMP = 0x5,
}
struct D3D12_COMMAND_SIGNATURE_DESC
{
    UINT ByteStride;
    UINT NumArgumentDescs;
    const(D3D12_INDIRECT_ARGUMENT_DESC)* pArgumentDescs;
    UINT NodeMask;
}
struct D3D12_INDIRECT_ARGUMENT_DESC
{
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    union {
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_362 __param__10;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_362 VertexBuffer;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_363 __param__11;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_363 Constant;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_364 __param__12;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_364 ConstantBufferView;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_365 __param__13;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_365 ShaderResourceView;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_366 __param__14;
        D3D12_INDIRECT_ARGUMENT_DESC___anonymous_366 UnorderedAccessView;
    }
}
enum D3D12_INDIRECT_ARGUMENT_TYPE
{
    _DRAW = 0x0,
    _DRAW_INDEXED = 0x1,
    _DISPATCH = 0x2,
    _VERTEX_BUFFER_VIEW = 0x3,
    _INDEX_BUFFER_VIEW = 0x4,
    _CONSTANT = 0x5,
    _CONSTANT_BUFFER_VIEW = 0x6,
    _SHADER_RESOURCE_VIEW = 0x7,
    _UNORDERED_ACCESS_VIEW = 0x8,
}
struct D3D12_PACKED_MIP_INFO
{
    UINT8 NumStandardMips;
    UINT8 NumPackedMips;
    UINT NumTilesForPackedMips;
    UINT StartTileIndexInOverallResource;
}
struct D3D12_TILE_SHAPE
{
    UINT WidthInTexels;
    UINT HeightInTexels;
    UINT DepthInTexels;
}
struct D3D12_SUBRESOURCE_TILING
{
    UINT WidthInTiles;
    UINT16 HeightInTiles;
    UINT16 DepthInTiles;
    UINT StartTileIndexInOverallResource;
}
interface ID3D12PipelineLibrary: ID3D12DeviceChild
{
    static const iidof = parseGUID("c64226a8-9201-46af-b4cc-53fb9ff7414f");
    HRESULT StorePipeline(LPCWSTR pName, ID3D12PipelineState pPipeline);
    HRESULT LoadGraphicsPipeline(LPCWSTR pName, const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)* pDesc, ref IID riid, void** ppPipelineState);
    HRESULT LoadComputePipeline(LPCWSTR pName, const(D3D12_COMPUTE_PIPELINE_STATE_DESC)* pDesc, ref IID riid, void** ppPipelineState);
    SIZE_T GetSerializedSize();
    HRESULT Serialize(void* pData, SIZE_T DataSizeInBytes);
}
interface ID3D12PipelineLibrary1: ID3D12PipelineLibrary
{
    static const iidof = parseGUID("80eabf42-2568-4e5e-bd82-c37f86961dc3");
    HRESULT LoadPipeline(LPCWSTR pName, const(D3D12_PIPELINE_STATE_STREAM_DESC)* pDesc, ref IID riid, void** ppPipelineState);
}
struct D3D12_PIPELINE_STATE_STREAM_DESC
{
    SIZE_T SizeInBytes;
    void* pPipelineStateSubobjectStream;
}
interface ID3D12Device1: ID3D12Device
{
    static const iidof = parseGUID("77acce80-638e-4e65-8895-c1f23386863e");
    HRESULT CreatePipelineLibrary(const(void)* pLibraryBlob, SIZE_T BlobLength, ref IID riid, void** ppPipelineLibrary);
    HRESULT SetEventOnMultipleFenceCompletion(const(ID3D12Fence)* ppFences, const(UINT64)* pFenceValues, UINT NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, HANDLE hEvent);
    HRESULT SetResidencyPriority(UINT NumObjects, const(ID3D12Pageable)* ppObjects, const(D3D12_RESIDENCY_PRIORITY)* pPriorities);
}
enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS
{
    _NONE = 0x0,
    _ANY = 0x1,
    _ALL = 0x0,
}
enum D3D12_RESIDENCY_PRIORITY
{
    _MINIMUM = 0x28000000,
    _LOW = 0x50000000,
    _NORMAL = 0x78000000,
    _HIGH = 0xa0010000,
    _MAXIMUM = 0xc8000000,
}
interface ID3D12Device2: ID3D12Device1
{
    static const iidof = parseGUID("30baa41e-b15b-475c-a0bb-1af5c5b64328");
    HRESULT CreatePipelineState(const(D3D12_PIPELINE_STATE_STREAM_DESC)* pDesc, ref IID riid, void** ppPipelineState);
}
interface ID3D12Device3: ID3D12Device2
{
    static const iidof = parseGUID("81dadc15-2bad-4392-93c5-101345c4aa98");
    HRESULT OpenExistingHeapFromAddress(const(void)* pAddress, ref IID riid, void** ppvHeap);
    HRESULT OpenExistingHeapFromFileMapping(HANDLE hFileMapping, ref IID riid, void** ppvHeap);
    HRESULT EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, UINT NumObjects, const(ID3D12Pageable)* ppObjects, ID3D12Fence pFenceToSignal, UINT64 FenceValueToSignal);
}
enum D3D12_RESIDENCY_FLAGS
{
    _NONE = 0x0,
    _DENY_OVERBUDGET = 0x1,
}
interface ID3D12ProtectedSession: ID3D12DeviceChild
{
    static const iidof = parseGUID("a1533d18-0ac1-4084-85b9-89a96116806b");
    HRESULT GetStatusFence(ref IID riid, void** ppFence);
    D3D12_PROTECTED_SESSION_STATUS GetSessionStatus();
}
enum D3D12_PROTECTED_SESSION_STATUS
{
    _OK = 0x0,
    _INVALID = 0x1,
}
interface ID3D12ProtectedResourceSession: ID3D12ProtectedSession
{
    static const iidof = parseGUID("6cd696f4-f289-40cc-8091-5a6c0a099c3d");
    D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc();
}
struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
{
    UINT NodeMask;
    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
}
enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
{
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0x0,
}
interface ID3D12Device4: ID3D12Device3
{
    static const iidof = parseGUID("e865df17-a9ee-46f9-a463-3098315aa2e5");
    HRESULT CreateCommandList1(UINT nodeMask, D3D12_COMMAND_LIST_TYPE type, D3D12_COMMAND_LIST_FLAGS flags, ref IID riid, void** ppCommandList);
    HRESULT CreateProtectedResourceSession(const(D3D12_PROTECTED_RESOURCE_SESSION_DESC)* pDesc, ref IID riid, void** ppSession);
    HRESULT CreateCommittedResource1(const(D3D12_HEAP_PROPERTIES)* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialResourceState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, ref IID riidResource, void** ppvResource);
    HRESULT CreateHeap1(const(D3D12_HEAP_DESC)* pDesc, ID3D12ProtectedResourceSession pProtectedSession, ref IID riid, void** ppvHeap);
    HRESULT CreateReservedResource1(const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, ref IID riid, void** ppvResource);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1(UINT visibleMask, UINT numResourceDescs, const(D3D12_RESOURCE_DESC)* pResourceDescs, D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);
}
enum D3D12_COMMAND_LIST_FLAGS
{
    D3D12_COMMAND_LIST_FLAG_NONE = 0x0,
}
struct D3D12_RESOURCE_ALLOCATION_INFO1
{
    UINT64 Offset;
    UINT64 Alignment;
    UINT64 SizeInBytes;
}
interface ID3D12LifetimeOwner: IUnknown
{
    static const iidof = parseGUID("e667af9f-cd56-4f46-83ce-032e595d70a8");
    void LifetimeStateUpdated(D3D12_LIFETIME_STATE NewState);
}
enum D3D12_LIFETIME_STATE
{
    _IN_USE = 0x0,
    _NOT_IN_USE = 0x1,
}
interface ID3D12SwapChainAssistant: IUnknown
{
    static const iidof = parseGUID("f1df64b6-57fd-49cd-8807-c0eb88b45c8f");
    LUID GetLUID();
    HRESULT GetSwapChainObject(ref IID riid, void** ppv);
    HRESULT GetCurrentResourceAndCommandQueue(ref IID riidResource, void** ppvResource, ref IID riidQueue, void** ppvQueue);
    HRESULT InsertImplicitSync();
}
interface ID3D12LifetimeTracker: ID3D12DeviceChild
{
    static const iidof = parseGUID("3fd03d36-4eb1-424a-a582-494ecb8ba813");
    HRESULT DestroyOwnedObject(ID3D12DeviceChild pObject);
}
interface ID3D12StateObject: ID3D12Pageable
{
    static const iidof = parseGUID("47016943-fca8-4594-93ea-af258b55346d");
}
interface ID3D12StateObjectProperties: IUnknown
{
    static const iidof = parseGUID("de5fa827-9bf9-4f26-89ff-d7f56fde3860");
    void* GetShaderIdentifier(LPCWSTR pExportName);
    UINT64 GetShaderStackSize(LPCWSTR pExportName);
    UINT64 GetPipelineStackSize();
    void SetPipelineStackSize(UINT64 PipelineStackSizeInBytes);
}
interface ID3D12Device5: ID3D12Device4
{
    static const iidof = parseGUID("8b4f173b-2fea-4b80-8f58-4307191ab95d");
    HRESULT CreateLifetimeTracker(ID3D12LifetimeOwner pOwner, ref IID riid, void** ppvTracker);
    void RemoveDevice();
    HRESULT EnumerateMetaCommands(UINT* pNumMetaCommands, D3D12_META_COMMAND_DESC* pDescs);
    HRESULT EnumerateMetaCommandParameters(ref GUID CommandId, D3D12_META_COMMAND_PARAMETER_STAGE Stage, UINT* pTotalStructureSizeInBytes, UINT* pParameterCount, D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs);
    HRESULT CreateMetaCommand(ref GUID CommandId, UINT NodeMask, const(void)* pCreationParametersData, SIZE_T CreationParametersDataSizeInBytes, ref IID riid, void** ppMetaCommand);
    HRESULT CreateStateObject(const(D3D12_STATE_OBJECT_DESC)* pDesc, ref IID riid, void** ppStateObject);
    void GetRaytracingAccelerationStructurePrebuildInfo(const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS)* pDesc, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);
    D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier(D3D12_SERIALIZED_DATA_TYPE SerializedDataType, const(D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER)* pIdentifierToCheck);
}
struct D3D12_META_COMMAND_DESC
{
    GUID Id;
    LPCWSTR Name;
    D3D12_GRAPHICS_STATES InitializationDirtyState;
    D3D12_GRAPHICS_STATES ExecutionDirtyState;
}
enum D3D12_GRAPHICS_STATES
{
    _NONE = 0x0,
    _IA_VERTEX_BUFFERS = 0x1,
    _IA_INDEX_BUFFER = 0x2,
    _IA_PRIMITIVE_TOPOLOGY = 0x4,
    _DESCRIPTOR_HEAP = 0x8,
    _GRAPHICS_ROOT_SIGNATURE = 0x10,
    _COMPUTE_ROOT_SIGNATURE = 0x20,
    _RS_VIEWPORTS = 0x40,
    _RS_SCISSOR_RECTS = 0x80,
    _PREDICATION = 0x100,
    _OM_RENDER_TARGETS = 0x200,
    _OM_STENCIL_REF = 0x400,
    _OM_BLEND_FACTOR = 0x800,
    _PIPELINE_STATE = 0x1000,
    _SO_TARGETS = 0x2000,
    _OM_DEPTH_BOUNDS = 0x4000,
    _SAMPLE_POSITIONS = 0x8000,
    _VIEW_INSTANCE_MASK = 0x10000,
}
enum D3D12_META_COMMAND_PARAMETER_STAGE
{
    _CREATION = 0x0,
    _INITIALIZATION = 0x1,
    _EXECUTION = 0x2,
}
struct D3D12_META_COMMAND_PARAMETER_DESC
{
    LPCWSTR Name;
    D3D12_META_COMMAND_PARAMETER_TYPE Type;
    D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
    D3D12_RESOURCE_STATES RequiredResourceState;
    UINT StructureOffset;
}
enum D3D12_META_COMMAND_PARAMETER_TYPE
{
    _FLOAT = 0x0,
    _UINT64 = 0x1,
    _GPU_VIRTUAL_ADDRESS = 0x2,
    _CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 0x3,
    _GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 0x4,
}
enum D3D12_META_COMMAND_PARAMETER_FLAGS
{
    _INPUT = 0x1,
    _OUTPUT = 0x2,
}
struct D3D12_STATE_OBJECT_DESC
{
    D3D12_STATE_OBJECT_TYPE Type;
    UINT NumSubobjects;
    const(D3D12_STATE_SUBOBJECT)* pSubobjects;
}
enum D3D12_STATE_OBJECT_TYPE
{
    _COLLECTION = 0x0,
    _RAYTRACING_PIPELINE = 0x3,
}
struct D3D12_STATE_SUBOBJECT
{
    D3D12_STATE_SUBOBJECT_TYPE Type;
    const(void)* pDesc;
}
enum D3D12_STATE_SUBOBJECT_TYPE
{
    _STATE_OBJECT_CONFIG = 0x0,
    _GLOBAL_ROOT_SIGNATURE = 0x1,
    _LOCAL_ROOT_SIGNATURE = 0x2,
    _NODE_MASK = 0x3,
    _DXIL_LIBRARY = 0x5,
    _EXISTING_COLLECTION = 0x6,
    _SUBOBJECT_TO_EXPORTS_ASSOCIATION = 0x7,
    _DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 0x8,
    _RAYTRACING_SHADER_CONFIG = 0x9,
    _RAYTRACING_PIPELINE_CONFIG = 0xa,
    _HIT_GROUP = 0xb,
    _MAX_VALID = 0xc,
}
struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
    UINT NumDescs;
    D3D12_ELEMENTS_LAYOUT DescsLayout;
    union {
        D3D12_GPU_VIRTUAL_ADDRESS InstanceDescs;
        const(D3D12_RAYTRACING_GEOMETRY_DESC)* pGeometryDescs;
        const(const(D3D12_RAYTRACING_GEOMETRY_DESC)*)* ppGeometryDescs;
    }
}
enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
{
    _TOP_LEVEL = 0x0,
    _BOTTOM_LEVEL = 0x1,
}
enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
{
    _NONE = 0x0,
    _ALLOW_UPDATE = 0x1,
    _ALLOW_COMPACTION = 0x2,
    _PREFER_FAST_TRACE = 0x4,
    _PREFER_FAST_BUILD = 0x8,
    _MINIMIZE_MEMORY = 0x10,
    _PERFORM_UPDATE = 0x20,
}
enum D3D12_ELEMENTS_LAYOUT
{
    _ARRAY = 0x0,
    _ARRAY_OF_POINTERS = 0x1,
}
struct D3D12_RAYTRACING_GEOMETRY_DESC
{
    D3D12_RAYTRACING_GEOMETRY_TYPE Type;
    D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
    union {
        D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
        D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
    }
}
enum D3D12_RAYTRACING_GEOMETRY_TYPE
{
    _TRIANGLES = 0x0,
    _PROCEDURAL_PRIMITIVE_AABBS = 0x1,
}
enum D3D12_RAYTRACING_GEOMETRY_FLAGS
{
    _NONE = 0x0,
    _OPAQUE = 0x1,
    _NO_DUPLICATE_ANYHIT_INVOCATION = 0x2,
}
struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS Transform3x4;
    DXGI_FORMAT IndexFormat;
    DXGI_FORMAT VertexFormat;
    UINT IndexCount;
    UINT VertexCount;
    D3D12_GPU_VIRTUAL_ADDRESS IndexBuffer;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
}
struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    UINT64 StrideInBytes;
}
struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
{
    UINT64 AABBCount;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
{
    UINT64 ResultDataMaxSizeInBytes;
    UINT64 ScratchDataSizeInBytes;
    UINT64 UpdateScratchDataSizeInBytes;
}
enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
{
    _COMPATIBLE_WITH_DEVICE = 0x0,
    _UNSUPPORTED_TYPE = 0x1,
    _UNRECOGNIZED = 0x2,
    _INCOMPATIBLE_VERSION = 0x3,
    _INCOMPATIBLE_TYPE = 0x4,
}
enum D3D12_SERIALIZED_DATA_TYPE
{
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0x0,
}
struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
{
    GUID DriverOpaqueGUID;
    BYTE[16] DriverOpaqueVersioningData;
}
interface ID3D12DeviceRemovedExtendedDataSettings: IUnknown
{
    static const iidof = parseGUID("82bc481c-6b9b-4030-aedb-7ee3d1df1e63");
    void SetAutoBreadcrumbsEnablement(D3D12_DRED_ENABLEMENT __MIDL__ID3D12DeviceRemovedExtendedDataSettings0000);
    void SetPageFaultEnablement(D3D12_DRED_ENABLEMENT __MIDL__ID3D12DeviceRemovedExtendedDataSettings0001);
    void SetWatsonDumpEnablement(D3D12_DRED_ENABLEMENT __MIDL__ID3D12DeviceRemovedExtendedDataSettings0002);
}
enum D3D12_DRED_ENABLEMENT
{
    _SYSTEM_CONTROLLED = 0x0,
    _FORCED_OFF = 0x1,
    _FORCED_ON = 0x2,
}
interface ID3D12DeviceRemovedExtendedData: IUnknown
{
    static const iidof = parseGUID("98931d33-5ae8-4791-aa3c-1a73a2934e71");
    HRESULT GetAutoBreadcrumbsOutput(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput);
    HRESULT GetPageFaultAllocationOutput(D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput);
}
struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
{
    const(D3D12_AUTO_BREADCRUMB_NODE)* pHeadAutoBreadcrumbNode;
}
struct D3D12_AUTO_BREADCRUMB_NODE
{
    const(char)* pCommandListDebugNameA;
    const(ushort)* pCommandListDebugNameW;
    const(char)* pCommandQueueDebugNameA;
    const(ushort)* pCommandQueueDebugNameW;
    ID3D12GraphicsCommandList pCommandList;
    ID3D12CommandQueue pCommandQueue;
    UINT32 BreadcrumbCount;
    const(UINT32)* pLastBreadcrumbValue;
    const(D3D12_AUTO_BREADCRUMB_OP)* pCommandHistory;
    const(D3D12_AUTO_BREADCRUMB_NODE)* pNext;
}
enum D3D12_AUTO_BREADCRUMB_OP
{
    _SETMARKER = 0x0,
    _BEGINEVENT = 0x1,
    _ENDEVENT = 0x2,
    _DRAWINSTANCED = 0x3,
    _DRAWINDEXEDINSTANCED = 0x4,
    _EXECUTEINDIRECT = 0x5,
    _DISPATCH = 0x6,
    _COPYBUFFERREGION = 0x7,
    _COPYTEXTUREREGION = 0x8,
    _COPYRESOURCE = 0x9,
    _COPYTILES = 0xa,
    _RESOLVESUBRESOURCE = 0xb,
    _CLEARRENDERTARGETVIEW = 0xc,
    _CLEARUNORDEREDACCESSVIEW = 0xd,
    _CLEARDEPTHSTENCILVIEW = 0xe,
    _RESOURCEBARRIER = 0xf,
    _EXECUTEBUNDLE = 0x10,
    _PRESENT = 0x11,
    _RESOLVEQUERYDATA = 0x12,
    _BEGINSUBMISSION = 0x13,
    _ENDSUBMISSION = 0x14,
    _DECODEFRAME = 0x15,
    _PROCESSFRAMES = 0x16,
    _ATOMICCOPYBUFFERUINT = 0x17,
    _ATOMICCOPYBUFFERUINT64 = 0x18,
    _RESOLVESUBRESOURCEREGION = 0x19,
    _WRITEBUFFERIMMEDIATE = 0x1a,
    _DECODEFRAME1 = 0x1b,
    _SETPROTECTEDRESOURCESESSION = 0x1c,
    _DECODEFRAME2 = 0x1d,
    _PROCESSFRAMES1 = 0x1e,
    _BUILDRAYTRACINGACCELERATIONSTRUCTURE = 0x1f,
    _EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 0x20,
    _COPYRAYTRACINGACCELERATIONSTRUCTURE = 0x21,
    _DISPATCHRAYS = 0x22,
    _INITIALIZEMETACOMMAND = 0x23,
    _EXECUTEMETACOMMAND = 0x24,
    _ESTIMATEMOTION = 0x25,
    _RESOLVEMOTIONVECTORHEAP = 0x26,
    _SETPIPELINESTATE1 = 0x27,
    _INITIALIZEEXTENSIONCOMMAND = 0x28,
    _EXECUTEEXTENSIONCOMMAND = 0x29,
}
struct D3D12_DRED_PAGE_FAULT_OUTPUT
{
    D3D12_GPU_VIRTUAL_ADDRESS PageFaultVA;
    const(D3D12_DRED_ALLOCATION_NODE)* pHeadExistingAllocationNode;
    const(D3D12_DRED_ALLOCATION_NODE)* pHeadRecentFreedAllocationNode;
}
struct D3D12_DRED_ALLOCATION_NODE
{
    const(char)* ObjectNameA;
    const(ushort)* ObjectNameW;
    D3D12_DRED_ALLOCATION_TYPE AllocationType;
    const(D3D12_DRED_ALLOCATION_NODE)* pNext;
}
enum D3D12_DRED_ALLOCATION_TYPE
{
    _COMMAND_QUEUE = 0x13,
    _COMMAND_ALLOCATOR = 0x14,
    _PIPELINE_STATE = 0x15,
    _COMMAND_LIST = 0x16,
    _FENCE = 0x17,
    _DESCRIPTOR_HEAP = 0x18,
    _HEAP = 0x19,
    _QUERY_HEAP = 0x1b,
    _COMMAND_SIGNATURE = 0x1c,
    _PIPELINE_LIBRARY = 0x1d,
    _VIDEO_DECODER = 0x1e,
    _VIDEO_PROCESSOR = 0x20,
    _RESOURCE = 0x22,
    _PASS = 0x23,
    _CRYPTOSESSION = 0x24,
    _CRYPTOSESSIONPOLICY = 0x25,
    _PROTECTEDRESOURCESESSION = 0x26,
    _VIDEO_DECODER_HEAP = 0x27,
    _COMMAND_POOL = 0x28,
    _COMMAND_RECORDER = 0x29,
    _STATE_OBJECT = 0x2a,
    _METACOMMAND = 0x2b,
    _SCHEDULINGGROUP = 0x2c,
    _VIDEO_MOTION_ESTIMATOR = 0x2d,
    _VIDEO_MOTION_VECTOR_HEAP = 0x2e,
    _VIDEO_EXTENSION_COMMAND = 0x2f,
    _INVALID = 0xffffffff,
}
interface ID3D12Device6: ID3D12Device5
{
    static const iidof = parseGUID("c70b221b-40e4-4a17-89af-025a0727a6dc");
    HRESULT SetBackgroundProcessingMode(D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, HANDLE hEventToSignalUponCompletion, BOOL* pbFurtherMeasurementsDesired);
}
enum D3D12_BACKGROUND_PROCESSING_MODE
{
    _ALLOWED = 0x0,
    _ALLOW_INTRUSIVE_MEASUREMENTS = 0x1,
    _DISABLE_BACKGROUND_WORK = 0x2,
    _DISABLE_PROFILING_BY_SYSTEM = 0x3,
}
enum D3D12_MEASUREMENTS_ACTION
{
    _KEEP_ALL = 0x0,
    _COMMIT_RESULTS = 0x1,
    _COMMIT_RESULTS_HIGH_PRIORITY = 0x2,
    _DISCARD_PREVIOUS = 0x3,
}
interface ID3D12Resource1: ID3D12Resource
{
    static const iidof = parseGUID("9d5e227a-4430-4161-88b3-3eca6bb16e19");
    HRESULT GetProtectedResourceSession(ref IID riid, void** ppProtectedSession);
}
interface ID3D12Heap1: ID3D12Heap
{
    static const iidof = parseGUID("572f7389-2168-49e3-9693-d6df5871bf6d");
    HRESULT GetProtectedResourceSession(ref IID riid, void** ppProtectedSession);
}
interface ID3D12GraphicsCommandList3: ID3D12GraphicsCommandList2
{
    static const iidof = parseGUID("6fda83a7-b84c-4e38-9ac8-c7bd22016b3d");
    void SetProtectedResourceSession(ID3D12ProtectedResourceSession pProtectedResourceSession);
}
interface ID3D12MetaCommand: ID3D12Pageable
{
    static const iidof = parseGUID("dbb84c27-36ce-4fc9-b801-f048c46ac570");
    UINT64 GetRequiredParameterResourceSize(D3D12_META_COMMAND_PARAMETER_STAGE Stage, UINT ParameterIndex);
}
interface ID3D12GraphicsCommandList4: ID3D12GraphicsCommandList3
{
    static const iidof = parseGUID("8754318e-d3a9-4541-98cf-645b50dc4874");
    void BeginRenderPass(UINT NumRenderTargets, const(D3D12_RENDER_PASS_RENDER_TARGET_DESC)* pRenderTargets, const(D3D12_RENDER_PASS_DEPTH_STENCIL_DESC)* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);
    void EndRenderPass();
    void InitializeMetaCommand(ID3D12MetaCommand pMetaCommand, const(void)* pInitializationParametersData, SIZE_T InitializationParametersDataSizeInBytes);
    void ExecuteMetaCommand(ID3D12MetaCommand pMetaCommand, const(void)* pExecutionParametersData, SIZE_T ExecutionParametersDataSizeInBytes);
    void BuildRaytracingAccelerationStructure(const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC)* pDesc, UINT NumPostbuildInfoDescs, const(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC)* pPostbuildInfoDescs);
    void EmitRaytracingAccelerationStructurePostbuildInfo(const(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC)* pDesc, UINT NumSourceAccelerationStructures, const(D3D12_GPU_VIRTUAL_ADDRESS)* pSourceAccelerationStructureData);
    void CopyRaytracingAccelerationStructure(D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData, D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);
    void SetPipelineState1(ID3D12StateObject pStateObject);
    void DispatchRays(const(D3D12_DISPATCH_RAYS_DESC)* pDesc);
}
struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
}
struct D3D12_RENDER_PASS_BEGINNING_ACCESS
{
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
    union {
        D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
    }
}
enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
{
    _DISCARD = 0x0,
    _PRESERVE = 0x1,
    _CLEAR = 0x2,
    _NO_ACCESS = 0x3,
}
struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
{
    D3D12_CLEAR_VALUE ClearValue;
}
struct D3D12_RENDER_PASS_ENDING_ACCESS
{
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
    union {
        D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
    }
}
enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
{
    _DISCARD = 0x0,
    _PRESERVE = 0x1,
    _RESOLVE = 0x2,
    _NO_ACCESS = 0x3,
}
struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
{
    ID3D12Resource pSrcResource;
    ID3D12Resource pDstResource;
    UINT SubresourceCount;
    const(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS)* pSubresourceParameters;
    DXGI_FORMAT Format;
    D3D12_RESOLVE_MODE ResolveMode;
    BOOL PreserveResolveSource;
}
struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
{
    UINT SrcSubresource;
    UINT DstSubresource;
    UINT DstX;
    UINT DstY;
    D3D12_RECT SrcRect;
}
struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
    D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
}
enum D3D12_RENDER_PASS_FLAGS
{
    _NONE = 0x0,
    _ALLOW_UAV_WRITES = 0x1,
    _SUSPENDING_PASS = 0x2,
    _RESUMING_PASS = 0x4,
}
struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData;
    D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
    D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData;
    D3D12_GPU_VIRTUAL_ADDRESS ScratchAccelerationStructureData;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS DestBuffer;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
}
enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
{
    _COMPACTED_SIZE = 0x0,
    _TOOLS_VISUALIZATION = 0x1,
    _SERIALIZATION = 0x2,
    _CURRENT_SIZE = 0x3,
}
enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
{
    _CLONE = 0x0,
    _COMPACT = 0x1,
    _VISUALIZATION_DECODE_FOR_TOOLS = 0x2,
    _SERIALIZE = 0x3,
    _DESERIALIZE = 0x4,
}
struct D3D12_DISPATCH_RAYS_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
    UINT Width;
    UINT Height;
    UINT Depth;
}
struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    UINT64 SizeInBytes;
}
struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    UINT64 SizeInBytes;
    UINT64 StrideInBytes;
}
interface ID3D12Tools: IUnknown
{
    static const iidof = parseGUID("7071e1f0-e84b-4b33-974f-12fa49de65c5");
    void EnableShaderInstrumentation(BOOL bEnable);
    BOOL ShaderInstrumentationEnabled();
}
interface ID3D12GraphicsCommandList5: ID3D12GraphicsCommandList4
{
    static const iidof = parseGUID("55050859-4024-474c-87f5-6472eaee44ea");
    void RSSetShadingRate(D3D12_SHADING_RATE baseShadingRate, const(D3D12_SHADING_RATE_COMBINER)* combiners);
    void RSSetShadingRateImage(ID3D12Resource shadingRateImage);
}
enum D3D12_SHADING_RATE
{
    _1X1 = 0x0,
    _1X2 = 0x1,
    _2X1 = 0x4,
    _2X2 = 0x5,
    _2X4 = 0x6,
    _4X2 = 0x9,
    _4X4 = 0xa,
}
enum D3D12_SHADING_RATE_COMBINER
{
    _PASSTHROUGH = 0x0,
    _OVERRIDE = 0x1,
    _MIN = 0x2,
    _MAX = 0x3,
    _SUM = 0x4,
}
enum D3D12_COMMAND_QUEUE_PRIORITY
{
    _NORMAL = 0x0,
    _HIGH = 0x64,
    _GLOBAL_REALTIME = 0x2710,
}
alias D3D12_PRIMITIVE = D3D_PRIMITIVE;
struct D3D12_DEPTH_STENCIL_DESC1
{
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
    BOOL DepthBoundsTestEnable;
}
enum D3D12_COLOR_WRITE_ENABLE
{
    _RED = 0x1,
    _GREEN = 0x2,
    _BLUE = 0x4,
    _ALPHA = 0x8,
    _ALL = 0xf,
}
struct D3D12_RT_FORMAT_ARRAY
{
    DXGI_FORMAT[8] RTFormats;
    UINT NumRenderTargets;
}
enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
{
    _ROOT_SIGNATURE = 0x0,
    _VS = 0x1,
    _PS = 0x2,
    _DS = 0x3,
    _HS = 0x4,
    _GS = 0x5,
    _CS = 0x6,
    _STREAM_OUTPUT = 0x7,
    _BLEND = 0x8,
    _SAMPLE_MASK = 0x9,
    _RASTERIZER = 0xa,
    _DEPTH_STENCIL = 0xb,
    _INPUT_LAYOUT = 0xc,
    _IB_STRIP_CUT_VALUE = 0xd,
    _PRIMITIVE_TOPOLOGY = 0xe,
    _RENDER_TARGET_FORMATS = 0xf,
    _DEPTH_STENCIL_FORMAT = 0x10,
    _SAMPLE_DESC = 0x11,
    _NODE_MASK = 0x12,
    _CACHED_PSO = 0x13,
    _FLAGS = 0x14,
    _DEPTH_STENCIL1 = 0x15,
    _VIEW_INSTANCING = 0x16,
    _MAX_VALID = 0x17,
}
enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
    _NONE = 0x0,
    _10_BIT = 0x1,
    _16_BIT = 0x2,
}
enum D3D12_TILED_RESOURCES_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1 = 0x1,
    _2 = 0x2,
    _3 = 0x3,
    _4 = 0x4,
}
enum D3D12_RESOURCE_BINDING_TIER
{
    _1 = 0x1,
    _2 = 0x2,
    _3 = 0x3,
}
enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1 = 0x1,
    _2 = 0x2,
    _3 = 0x3,
}
enum D3D12_FORMAT_SUPPORT1
{
    _NONE = 0x0,
    _BUFFER = 0x1,
    _IA_VERTEX_BUFFER = 0x2,
    _IA_INDEX_BUFFER = 0x4,
    _SO_BUFFER = 0x8,
    _TEXTURE1D = 0x10,
    _TEXTURE2D = 0x20,
    _TEXTURE3D = 0x40,
    _TEXTURECUBE = 0x80,
    _SHADER_LOAD = 0x100,
    _SHADER_SAMPLE = 0x200,
    _SHADER_SAMPLE_COMPARISON = 0x400,
    _SHADER_SAMPLE_MONO_TEXT = 0x800,
    _MIP = 0x1000,
    _RENDER_TARGET = 0x4000,
    _BLENDABLE = 0x8000,
    _DEPTH_STENCIL = 0x10000,
    _MULTISAMPLE_RESOLVE = 0x40000,
    _DISPLAY = 0x80000,
    _CAST_WITHIN_BIT_LAYOUT = 0x100000,
    _MULTISAMPLE_RENDERTARGET = 0x200000,
    _MULTISAMPLE_LOAD = 0x400000,
    _SHADER_GATHER = 0x800000,
    _BACK_BUFFER_CAST = 0x1000000,
    _TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    _SHADER_GATHER_COMPARISON = 0x4000000,
    _DECODER_OUTPUT = 0x8000000,
    _VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    _VIDEO_PROCESSOR_INPUT = 0x20000000,
    _VIDEO_ENCODER = 0x40000000,
}
enum D3D12_FORMAT_SUPPORT2
{
    _NONE = 0x0,
    _UAV_ATOMIC_ADD = 0x1,
    _UAV_ATOMIC_BITWISE_OPS = 0x2,
    _UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    _UAV_ATOMIC_EXCHANGE = 0x8,
    _UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    _UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    _UAV_TYPED_LOAD = 0x40,
    _UAV_TYPED_STORE = 0x80,
    _OUTPUT_MERGER_LOGIC_OP = 0x100,
    _TILED = 0x200,
    _MULTIPLANE_OVERLAY = 0x4000,
}
enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
    _NONE = 0x0,
    _TILED_RESOURCE = 0x1,
}
enum D3D12_CROSS_NODE_SHARING_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1_EMULATED = 0x1,
    _1 = 0x2,
    _2 = 0x3,
    _3 = 0x4,
}
enum D3D12_RESOURCE_HEAP_TIER
{
    _1 = 0x1,
    _2 = 0x2,
}
enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1 = 0x1,
    _2 = 0x2,
}
enum D3D12_VIEW_INSTANCING_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1 = 0x1,
    _2 = 0x2,
    _3 = 0x3,
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
    BOOL DoublePrecisionFloatShaderOps;
    BOOL OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    BOOL PSSpecifiedStencilRefSupported;
    BOOL TypedUAVLoadAdditionalFormats;
    BOOL ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    UINT MaxGPUVirtualAddressBitsPerResource;
    BOOL StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
    BOOL CrossAdapterRowMajorTextureSupported;
    BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
    BOOL WaveOps;
    UINT WaveLaneCountMin;
    UINT WaveLaneCountMax;
    UINT TotalLaneCount;
    BOOL ExpandedComputeResourceStates;
    BOOL Int64ShaderOps;
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
{
    BOOL DepthBoundsTestSupported;
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
}
struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
    D3D_ROOT_SIGNATURE_VERSION HighestVersion;
}
struct D3D12_FEATURE_DATA_ARCHITECTURE
{
    UINT NodeIndex;
    BOOL TileBasedRenderer;
    BOOL UMA;
    BOOL CacheCoherentUMA;
}
struct D3D12_FEATURE_DATA_ARCHITECTURE1
{
    UINT NodeIndex;
    BOOL TileBasedRenderer;
    BOOL UMA;
    BOOL CacheCoherentUMA;
    BOOL IsolatedMMU;
}
struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
    UINT NumFeatureLevels;
    const(D3D_FEATURE_LEVEL)* pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
}
enum D3D_SHADER_MODEL
{
    _5_1 = 0x51,
    _6_0 = 0x60,
    _6_1 = 0x61,
    _6_2 = 0x62,
    _6_3 = 0x63,
    _6_4 = 0x64,
    _6_5 = 0x65,
}
struct D3D12_FEATURE_DATA_SHADER_MODEL
{
    D3D_SHADER_MODEL HighestShaderModel;
}
struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
}
struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
    DXGI_FORMAT Format;
    UINT SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    UINT NumQualityLevels;
}
struct D3D12_FEATURE_DATA_FORMAT_INFO
{
    DXGI_FORMAT Format;
    UINT8 PlaneCount;
}
struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
    UINT MaxGPUVirtualAddressBitsPerResource;
    UINT MaxGPUVirtualAddressBitsPerProcess;
}
enum D3D12_SHADER_CACHE_SUPPORT_FLAGS
{
    _NONE = 0x0,
    _SINGLE_PSO = 0x1,
    _LIBRARY = 0x2,
    _AUTOMATIC_INPROC_CACHE = 0x4,
    _AUTOMATIC_DISK_CACHE = 0x8,
}
struct D3D12_FEATURE_DATA_SHADER_CACHE
{
    D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
}
struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
{
    D3D12_COMMAND_LIST_TYPE CommandListType;
    UINT Priority;
    BOOL PriorityForTypeIsSupported;
}
enum D3D12_COMMAND_LIST_SUPPORT_FLAGS
{
    _NONE = 0x0,
    _DIRECT = 0x1,
    _BUNDLE = 0x2,
    _COMPUTE = 0x4,
    _COPY = 0x8,
    _VIDEO_DECODE = 0x10,
    _VIDEO_PROCESS = 0x20,
    _VIDEO_ENCODE = 0x40,
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
{
    BOOL CopyQueueTimestampQueriesSupported;
    BOOL CastingFullyTypedFormatSupported;
    D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
    D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
    BOOL BarycentricsSupported;
}
struct D3D12_FEATURE_DATA_EXISTING_HEAPS
{
    BOOL Supported;
}
enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
{
    _0 = 0x0,
    _1 = 0x1,
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
{
    BOOL MSAA64KBAlignedTextureSupported;
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
    BOOL Native16BitShaderOpsSupported;
}
enum D3D12_HEAP_SERIALIZATION_TIER
{
    _0 = 0x0,
    _10 = 0xa,
}
struct D3D12_FEATURE_DATA_SERIALIZATION
{
    UINT NodeIndex;
    D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
}
struct D3D12_FEATURE_DATA_CROSS_NODE
{
    D3D12_CROSS_NODE_SHARING_TIER SharingTier;
    BOOL AtomicShaderInstructions;
}
enum D3D12_RENDER_PASS_TIER
{
    _0 = 0x0,
    _1 = 0x1,
    _2 = 0x2,
}
enum D3D12_RAYTRACING_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1_0 = 0xa,
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
{
    BOOL SRVOnlyTiledResourceTier3;
    D3D12_RENDER_PASS_TIER RenderPassesTier;
    D3D12_RAYTRACING_TIER RaytracingTier;
}
enum D3D12_VARIABLE_SHADING_RATE_TIER
{
    _NOT_SUPPORTED = 0x0,
    _1 = 0x1,
    _2 = 0x2,
}
struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
{
    BOOL AdditionalShadingRatesSupported;
    BOOL PerPrimitiveShadingRateSupportedWithViewportIndexing;
    D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;
    UINT ShadingRateImageTileSize;
    BOOL BackgroundProcessingSupported;
}
struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
{
    GUID CommandId;
    UINT NodeMask;
    const(void)* pQueryInputData;
    SIZE_T QueryInputDataSizeInBytes;
    void* pQueryOutputData;
    SIZE_T QueryOutputDataSizeInBytes;
}
struct D3D12_SUBRESOURCE_INFO
{
    UINT64 Offset;
    UINT RowPitch;
    UINT DepthPitch;
}
struct D3D12_VIEW_INSTANCE_LOCATION
{
    UINT ViewportArrayIndex;
    UINT RenderTargetArrayIndex;
}
enum D3D12_VIEW_INSTANCING_FLAGS
{
    _NONE = 0x0,
    _ENABLE_VIEW_INSTANCE_MASKING = 0x1,
}
struct D3D12_VIEW_INSTANCING_DESC
{
    UINT ViewInstanceCount;
    const(D3D12_VIEW_INSTANCE_LOCATION)* pViewInstanceLocations;
    D3D12_VIEW_INSTANCING_FLAGS Flags;
}
enum D3D12_SHADER_COMPONENT_MAPPING
{
    _FROM_MEMORY_COMPONENT_0 = 0x0,
    _FROM_MEMORY_COMPONENT_1 = 0x1,
    _FROM_MEMORY_COMPONENT_2 = 0x2,
    _FROM_MEMORY_COMPONENT_3 = 0x3,
    _FORCE_VALUE_0 = 0x4,
    _FORCE_VALUE_1 = 0x5,
}
enum D3D12_FILTER_TYPE
{
    _POINT = 0x0,
    _LINEAR = 0x1,
}
enum D3D12_FILTER_REDUCTION_TYPE
{
    _STANDARD = 0x0,
    _COMPARISON = 0x1,
    _MINIMUM = 0x2,
    _MAXIMUM = 0x3,
}
alias PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = extern(C) HRESULT function(const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
alias PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = extern(C) HRESULT function(LPCVOID pSrcData, SIZE_T SrcDataSizeInBytes, ref IID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
alias PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = extern(C) HRESULT function(const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)* pRootSignature, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
alias PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER = extern(C) HRESULT function(LPCVOID pSrcData, SIZE_T SrcDataSizeInBytes, ref IID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
}
struct D3D12_QUERY_DATA_SO_STATISTICS
{
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
}
struct D3D12_DRAW_ARGUMENTS
{
    UINT VertexCountPerInstance;
    UINT InstanceCount;
    UINT StartVertexLocation;
    UINT StartInstanceLocation;
}
struct D3D12_DRAW_INDEXED_ARGUMENTS
{
    UINT IndexCountPerInstance;
    UINT InstanceCount;
    UINT StartIndexLocation;
    INT BaseVertexLocation;
    UINT StartInstanceLocation;
}
struct D3D12_DISPATCH_ARGUMENTS
{
    UINT ThreadGroupCountX;
    UINT ThreadGroupCountY;
    UINT ThreadGroupCountZ;
}
enum D3D12_COMMAND_POOL_FLAGS
{
    D3D12_COMMAND_POOL_FLAG_NONE = 0x0,
}
enum D3D12_COMMAND_RECORDER_FLAGS
{
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0x0,
}
enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
{
    _NONE = 0x0,
    _SUPPORTED = 0x1,
}
struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
{
    UINT NodeIndex;
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
}
enum D3D12_STATE_OBJECT_FLAGS
{
    _NONE = 0x0,
    _ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 0x1,
    _ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 0x2,
}
struct D3D12_STATE_OBJECT_CONFIG
{
    D3D12_STATE_OBJECT_FLAGS Flags;
}
struct D3D12_GLOBAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pGlobalRootSignature;
}
struct D3D12_LOCAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pLocalRootSignature;
}
struct D3D12_NODE_MASK
{
    UINT NodeMask;
}
enum D3D12_EXPORT_FLAGS
{
    D3D12_EXPORT_FLAG_NONE = 0x0,
}
struct D3D12_EXPORT_DESC
{
    LPCWSTR Name;
    LPCWSTR ExportToRename;
    D3D12_EXPORT_FLAGS Flags;
}
struct D3D12_DXIL_LIBRARY_DESC
{
    D3D12_SHADER_BYTECODE DXILLibrary;
    UINT NumExports;
    D3D12_EXPORT_DESC* pExports;
}
struct D3D12_EXISTING_COLLECTION_DESC
{
    ID3D12StateObject pExistingCollection;
    UINT NumExports;
    D3D12_EXPORT_DESC* pExports;
}
struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
    const(D3D12_STATE_SUBOBJECT)* pSubobjectToAssociate;
    UINT NumExports;
    LPCWSTR* pExports;
}
struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
    LPCWSTR SubobjectToAssociate;
    UINT NumExports;
    LPCWSTR* pExports;
}
enum D3D12_HIT_GROUP_TYPE
{
    _TRIANGLES = 0x0,
    _PROCEDURAL_PRIMITIVE = 0x1,
}
struct D3D12_HIT_GROUP_DESC
{
    LPCWSTR HitGroupExport;
    D3D12_HIT_GROUP_TYPE Type;
    LPCWSTR AnyHitShaderImport;
    LPCWSTR ClosestHitShaderImport;
    LPCWSTR IntersectionShaderImport;
}
struct D3D12_RAYTRACING_SHADER_CONFIG
{
    UINT MaxPayloadSizeInBytes;
    UINT MaxAttributeSizeInBytes;
}
struct D3D12_RAYTRACING_PIPELINE_CONFIG
{
    UINT MaxTraceRecursionDepth;
}
enum D3D12_RAYTRACING_INSTANCE_FLAGS
{
    _NONE = 0x0,
    _TRIANGLE_CULL_DISABLE = 0x1,
    _TRIANGLE_FRONT_COUNTERCLOCKWISE = 0x2,
    _FORCE_OPAQUE = 0x4,
    _FORCE_NON_OPAQUE = 0x8,
}
struct D3D12_RAYTRACING_AABB
{
    FLOAT MinX;
    FLOAT MinY;
    FLOAT MinZ;
    FLOAT MaxX;
    FLOAT MaxY;
    FLOAT MaxZ;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    UINT64 CompactedSizeInBytes;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    UINT64 DecodedSizeInBytes;
}
struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    UINT NumDescs;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    UINT64 SerializedSizeInBytes;
    UINT64 NumBottomLevelAccelerationStructurePointers;
}
struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
{
    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
    UINT64 SerializedSizeInBytesIncludingHeader;
    UINT64 DeserializedSizeInBytes;
    UINT64 NumBottomLevelAccelerationStructurePointersAfterHeader;
}
struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    UINT64 CurrentSizeInBytes;
}
struct D3D12_RAYTRACING_INSTANCE_DESC
{
    FLOAT[4][3] Transform;
    UINT InstanceID;
    UINT InstanceMask;
    UINT InstanceContributionToHitGroupIndex;
    UINT Flags;
    D3D12_GPU_VIRTUAL_ADDRESS AccelerationStructure;
}
enum D3D12_RAY_FLAGS
{
    _NONE = 0x0,
    _FORCE_OPAQUE = 0x1,
    _FORCE_NON_OPAQUE = 0x2,
    _ACCEPT_FIRST_HIT_AND_END_SEARCH = 0x4,
    _SKIP_CLOSEST_HIT_SHADER = 0x8,
    _CULL_BACK_FACING_TRIANGLES = 0x10,
    _CULL_FRONT_FACING_TRIANGLES = 0x20,
    _CULL_OPAQUE = 0x40,
    _CULL_NON_OPAQUE = 0x80,
}
enum D3D12_HIT_KIND
{
    _FRONT_FACE = 0xfe,
    _BACK_FACE = 0xff,
}
enum D3D12_DRED_VERSION
{
    _0 = 0x1,
    _1 = 0x2,
}
enum D3D12_DRED_FLAGS
{
    _NONE = 0x0,
    _FORCE_ENABLE = 0x1,
    _DISABLE_AUTOBREADCRUMBS = 0x2,
}
struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_FLAGS Flags;
    D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
}
struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
{
    HRESULT DeviceRemovedReason;
    D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;
    D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
}
struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_VERSION Version;
    union {
        D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
        D3D12_DEVICE_REMOVED_EXTENDED_DATA1 Dred_1_1;
    }
}
struct D3D12_SUBRESOURCE_DATA
{
    const(void)* pData;
    LONG_PTR RowPitch;
    LONG_PTR SlicePitch;
}
struct D3D12_MEMCPY_DEST
{
    void* pData;
    SIZE_T RowPitch;
    SIZE_T SlicePitch;
}
alias PFN_D3D12_CREATE_DEVICE = extern(C) HRESULT function(IUnknown , D3D_FEATURE_LEVEL , ref IID , void** );
alias PFN_D3D12_GET_DEBUG_INTERFACE = extern(C) HRESULT function(ref IID , void** );
enum D3D12_AXIS_SHADING_RATE
{
    _1X = 0x0,
    _2X = 0x1,
    _4X = 0x2,
}
extern(C) HRESULT D3D12SerializeRootSignature(const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
extern(C) HRESULT D3D12CreateDevice(IUnknown pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, ref IID riid, void** ppDevice);
extern(C) HRESULT D3D12GetDebugInterface(ref IID riid, void** ppvDebug);
extern(C) HRESULT D3D12CreateVersionedRootSignatureDeserializer(LPCVOID pSrcData, SIZE_T SrcDataSizeInBytes, ref IID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
extern(C) HRESULT D3D12CreateRootSignatureDeserializer(LPCVOID pSrcData, SIZE_T SrcDataSizeInBytes, ref IID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
extern(C) HRESULT D3D12SerializeVersionedRootSignature(const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)* pRootSignature, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
extern(C) HRESULT D3D12EnableExperimentalFeatures(UINT NumFeatures, const(IID)* pIIDs, void* pConfigurationStructs, UINT* pConfigurationStructSizes);
