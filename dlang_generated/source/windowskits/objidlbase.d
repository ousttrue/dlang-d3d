// This source code was generated by regenerator
module windowskits.objidlbase;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.winnt;
import core.sys.windows.windef;
import core.sys.windows.basetsd;
import core.sys.windows.winnt;
import windowskits.minwindef;
import windowskits.wtypesbase;
import windowskits.guiddef;
import core.sys.windows.basetyps;
interface IStream: ISequentialStream
{
    static const iidof = parseGUID("0000000c-0000-0000-c000-000000000046");
    HRESULT Seek(LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition);
    HRESULT SetSize(ULARGE_INTEGER libNewSize);
    HRESULT CopyTo(IStream pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten);
    HRESULT Commit(DWORD grfCommitFlags);
    HRESULT Revert();
    HRESULT LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
    HRESULT UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
    HRESULT Stat(STATSTG* pstatstg, DWORD grfStatFlag);
    HRESULT Clone(IStream* ppstm);
}
interface ISequentialStream: IUnknown
{
    static const iidof = parseGUID("0c733a30-2a1c-11ce-ade5-00aa0044773d");
    HRESULT Read(void* pv, ULONG cb, ULONG* pcbRead);
    HRESULT Write(const(void)* pv, ULONG cb, ULONG* pcbWritten);
}
alias STATSTG = tagSTATSTG;
struct tagSTATSTG
{
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
}
interface IEnumString: IUnknown
{
    static const iidof = parseGUID("00000101-0000-0000-c000-000000000046");
    HRESULT Next(ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched);
    HRESULT Skip(ULONG celt);
    HRESULT Reset();
    HRESULT Clone(IEnumString* ppenum);
}
interface IEnumUnknown: IUnknown
{
    static const iidof = parseGUID("00000100-0000-0000-c000-000000000046");
    HRESULT Next(ULONG celt, IUnknown* rgelt, ULONG* pceltFetched);
    HRESULT Skip(ULONG celt);
    HRESULT Reset();
    HRESULT Clone(IEnumUnknown* ppenum);
}
interface IRpcStubBuffer: IUnknown
{
    static const iidof = parseGUID("d5f56afc-593b-101a-b569-08002b2dbf7a");
    HRESULT Connect(IUnknown pUnkServer);
    void Disconnect();
    HRESULT Invoke(RPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer _pRpcChannelBuffer);
    IRpcStubBuffer IsIIDSupported(ref IID riid);
    ULONG CountRefs();
    HRESULT DebugServerQueryInterface(void** ppv);
    void DebugServerRelease(void* pv);
}
alias RPCOLEMESSAGE = tagRPCOLEMESSAGE;
struct tagRPCOLEMESSAGE
{
    void* reserved1;
    RPCOLEDATAREP dataRepresentation;
    void* Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void*[5] reserved2;
    ULONG rpcFlags;
}
alias RPCOLEDATAREP = ULONG;
interface IRpcChannelBuffer: IUnknown
{
    static const iidof = parseGUID("d5f56b60-593b-101a-b569-08002b2dbf7a");
    HRESULT GetBuffer(RPCOLEMESSAGE* pMessage, ref IID riid);
    HRESULT SendReceive(RPCOLEMESSAGE* pMessage, ULONG* pStatus);
    HRESULT FreeBuffer(RPCOLEMESSAGE* pMessage);
    HRESULT GetDestCtx(DWORD* pdwDestContext, void** ppvDestContext);
    HRESULT IsConnected();
}
