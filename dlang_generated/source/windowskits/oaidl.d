// This source code was generated by regenerator
module windowskits.oaidl;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.winnt;
import core.sys.windows.windef;
import core.sys.windows.winnt;
import windowskits.minwindef;
import windowskits.wtypes;
import core.sys.windows.basetyps;
import windowskits.wtypesbase;
import windowskits.basetsd;
struct tagVARIANT___anonymous_39
{
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    union {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
        SCODE scode;
        CY cyVal;
        DATE date;
        BSTR bstrVal;
        IUnknown punkVal;
        IDispatch pdispVal;
        SAFEARRAY* parray;
        BYTE* pbVal;
        SHORT* piVal;
        LONG* plVal;
        LONGLONG* pllVal;
        FLOAT* pfltVal;
        DOUBLE* pdblVal;
        VARIANT_BOOL* pboolVal;
        VARIANT_BOOL* __OBSOLETE__VARIANT_PBOOL;
        SCODE* pscode;
        CY* pcyVal;
        DATE* pdate;
        BSTR* pbstrVal;
        IUnknown* ppunkVal;
        IDispatch* ppdispVal;
        SAFEARRAY** pparray;
        VARIANT* pvarVal;
        PVOID byref;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL* pdecVal;
        CHAR* pcVal;
        USHORT* puiVal;
        ULONG* pulVal;
        ULONGLONG* pullVal;
        INT* pintVal;
        UINT* puintVal;
    union {
        PVOID pvRecord;
        IRecordInfo pRecInfo;
    }
    }
}
struct tagVARIANT_____anonymous_43
{
    PVOID pvRecord;
    IRecordInfo pRecInfo;
}
interface IDispatch: IUnknown
{
    static const iidof = parseGUID("00020400-0000-0000-c000-000000000046");
    HRESULT GetTypeInfoCount(UINT* pctinfo);
    HRESULT GetTypeInfo(UINT iTInfo, LCID lcid, ITypeInfo* ppTInfo);
    HRESULT GetIDsOfNames(ref IID riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId);
    HRESULT Invoke(DISPID dispIdMember, ref IID riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr);
}
interface ITypeInfo: IUnknown
{
    static const iidof = parseGUID("00020401-0000-0000-c000-000000000046");
    HRESULT GetTypeAttr(TYPEATTR** ppTypeAttr);
    HRESULT GetTypeComp(ITypeComp* ppTComp);
    HRESULT GetFuncDesc(UINT index, FUNCDESC** ppFuncDesc);
    HRESULT GetVarDesc(UINT index, VARDESC** ppVarDesc);
    HRESULT GetNames(MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames);
    HRESULT GetRefTypeOfImplType(UINT index, HREFTYPE* pRefType);
    HRESULT GetImplTypeFlags(UINT index, INT* pImplTypeFlags);
    HRESULT GetIDsOfNames(LPOLESTR* rgszNames, UINT cNames, MEMBERID* pMemId);
    HRESULT Invoke(PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr);
    HRESULT GetDocumentation(MEMBERID memid, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
    HRESULT GetDllEntry(MEMBERID memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal);
    HRESULT GetRefTypeInfo(HREFTYPE hRefType, ITypeInfo* ppTInfo);
    HRESULT AddressOfMember(MEMBERID memid, INVOKEKIND invKind, PVOID* ppv);
    HRESULT CreateInstance(IUnknown pUnkOuter, ref IID riid, PVOID* ppvObj);
    HRESULT GetMops(MEMBERID memid, BSTR* pBstrMops);
    HRESULT GetContainingTypeLib(ITypeLib* ppTLib, UINT* pIndex);
    void ReleaseTypeAttr(TYPEATTR* pTypeAttr);
    void ReleaseFuncDesc(FUNCDESC* pFuncDesc);
    void ReleaseVarDesc(VARDESC* pVarDesc);
}
alias TYPEATTR = tagTYPEATTR;
struct tagTYPEATTR
{
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
}
alias MEMBERID = DISPID;
alias DISPID = LONG;
alias TYPEKIND = tagTYPEKIND;
enum tagTYPEKIND
{
    _ENUM = 0x0,
    _RECORD = 0x1,
    _MODULE = 0x2,
    _INTERFACE = 0x3,
    _DISPATCH = 0x4,
    _COCLASS = 0x5,
    _ALIAS = 0x6,
    _UNION = 0x7,
    _MAX = 0x8,
}
alias TYPEDESC = tagTYPEDESC;
struct tagTYPEDESC
{
    union {
        tagTYPEDESC* lptdesc;
        tagARRAYDESC* lpadesc;
        HREFTYPE hreftype;
    }
    VARTYPE vt;
}
struct tagARRAYDESC
{
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND[1] rgbounds;
}
alias SAFEARRAYBOUND = tagSAFEARRAYBOUND;
struct tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
}
alias HREFTYPE = DWORD;
alias IDLDESC = tagIDLDESC;
struct tagIDLDESC
{
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
}
interface ITypeComp: IUnknown
{
    static const iidof = parseGUID("00020403-0000-0000-c000-000000000046");
    HRESULT Bind(LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo* ppTInfo, DESCKIND* pDescKind, BINDPTR* pBindPtr);
    HRESULT BindType(LPOLESTR szName, ULONG lHashVal, ITypeInfo* ppTInfo, ITypeComp* ppTComp);
}
alias DESCKIND = tagDESCKIND;
enum tagDESCKIND
{
    _NONE = 0x0,
    _FUNCDESC = 0x1,
    _VARDESC = 0x2,
    _TYPECOMP = 0x3,
    _IMPLICITAPPOBJ = 0x4,
    _MAX = 0x5,
}
alias BINDPTR = tagBINDPTR;
struct tagBINDPTR
{
    FUNCDESC* lpfuncdesc;
    VARDESC* lpvardesc;
    ITypeComp lptcomp;
}
alias FUNCDESC = tagFUNCDESC;
struct tagFUNCDESC
{
    MEMBERID memid;
    SCODE* lprgscode;
    ELEMDESC* lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
}
alias ELEMDESC = tagELEMDESC;
struct tagELEMDESC
{
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    }
}
alias PARAMDESC = tagPARAMDESC;
struct tagPARAMDESC
{
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
}
alias LPPARAMDESCEX = tagPARAMDESCEX*;
struct tagPARAMDESCEX
{
    ULONG cBytes;
    VARIANTARG varDefaultValue;
}
alias VARIANTARG = VARIANT;
alias VARIANT = tagVARIANT;
struct tagVARIANT
{
    union {
        tagVARIANT___anonymous_39 __param__1;
        DECIMAL decVal;
    }
}
alias SAFEARRAY = tagSAFEARRAY;
struct tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND[1] rgsabound;
}
interface IRecordInfo: IUnknown
{
    static const iidof = parseGUID("0000002f-0000-0000-c000-000000000046");
    HRESULT RecordInit(PVOID pvNew);
    HRESULT RecordClear(PVOID pvExisting);
    HRESULT RecordCopy(PVOID pvExisting, PVOID pvNew);
    HRESULT GetGuid(GUID* pguid);
    HRESULT GetName(BSTR* pbstrName);
    HRESULT GetSize(ULONG* pcbSize);
    HRESULT GetTypeInfo(ITypeInfo* ppTypeInfo);
    HRESULT GetField(PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
    HRESULT GetFieldNoCopy(PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField, PVOID* ppvDataCArray);
    HRESULT PutField(ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
    HRESULT PutFieldNoCopy(ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
    HRESULT GetFieldNames(ULONG* pcNames, BSTR* rgBstrNames);
    BOOL IsMatchingType(IRecordInfo pRecordInfo);
    PVOID RecordCreate();
    HRESULT RecordCreateCopy(PVOID pvSource, PVOID* ppvDest);
    HRESULT RecordDestroy(PVOID pvRecord);
}
alias FUNCKIND = tagFUNCKIND;
enum tagFUNCKIND
{
    _VIRTUAL = 0x0,
    _PUREVIRTUAL = 0x1,
    _NONVIRTUAL = 0x2,
    _STATIC = 0x3,
    _DISPATCH = 0x4,
}
alias INVOKEKIND = tagINVOKEKIND;
enum tagINVOKEKIND
{
    _FUNC = 0x1,
    _PROPERTYGET = 0x2,
    _PROPERTYPUT = 0x4,
    _PROPERTYPUTREF = 0x8,
}
alias CALLCONV = tagCALLCONV;
enum tagCALLCONV
{
    _FASTCALL = 0x0,
    _CDECL = 0x1,
    _MSCPASCAL = 0x2,
    _PASCAL = 0x2,
    _MACPASCAL = 0x3,
    _STDCALL = 0x4,
    _FPFASTCALL = 0x5,
    _SYSCALL = 0x6,
    _MPWCDECL = 0x7,
    _MPWPASCAL = 0x8,
    _MAX = 0x9,
}
alias VARDESC = tagVARDESC;
struct tagVARDESC
{
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    union {
        ULONG oInst;
        VARIANT* lpvarValue;
    }
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
}
alias VARKIND = tagVARKIND;
enum tagVARKIND
{
    _PERINSTANCE = 0x0,
    _STATIC = 0x1,
    _CONST = 0x2,
    _DISPATCH = 0x3,
}
alias DISPPARAMS = tagDISPPARAMS;
struct tagDISPPARAMS
{
    VARIANTARG* rgvarg;
    DISPID* rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
}
alias EXCEPINFO = tagEXCEPINFO;
struct tagEXCEPINFO
{
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    extern(C) HRESULT function(tagEXCEPINFO* ) pfnDeferredFillIn;
    SCODE scode;
}
interface ITypeLib: IUnknown
{
    static const iidof = parseGUID("00020402-0000-0000-c000-000000000046");
    UINT GetTypeInfoCount();
    HRESULT GetTypeInfo(UINT index, ITypeInfo* ppTInfo);
    HRESULT GetTypeInfoType(UINT index, TYPEKIND* pTKind);
    HRESULT GetTypeInfoOfGuid(ref GUID guid, ITypeInfo* ppTinfo);
    HRESULT GetLibAttr(TLIBATTR** ppTLibAttr);
    HRESULT GetTypeComp(ITypeComp* ppTComp);
    HRESULT GetDocumentation(INT index, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
    HRESULT IsName(LPOLESTR szNameBuf, ULONG lHashVal, BOOL* pfName);
    HRESULT FindName(LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo* ppTInfo, MEMBERID* rgMemId, USHORT* pcFound);
    void ReleaseTLibAttr(TLIBATTR* pTLibAttr);
}
alias TLIBATTR = tagTLIBATTR;
struct tagTLIBATTR
{
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
}
alias SYSKIND = tagSYSKIND;
enum tagSYSKIND
{
    _WIN16 = 0x0,
    _WIN32 = 0x1,
    _MAC = 0x2,
    _WIN64 = 0x3,
}
alias LPSAFEARRAY = SAFEARRAY*;
interface IErrorLog: IUnknown
{
    static const iidof = parseGUID("3127ca40-446e-11ce-8135-00aa004bb851");
    HRESULT AddError(LPCOLESTR pszPropName, EXCEPINFO* pExcepInfo);
}
