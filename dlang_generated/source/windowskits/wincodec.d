// This source code was generated by regenerator
module windowskits.wincodec;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import windowskits.intsafe;
import core.sys.windows.windef;
import windowskits.minwindef;
import core.sys.windows.winnt;
import core.sys.windows.basetyps;
import windowskits.winnt;
import windowskits.propidlbase;
import windowskits.wtypes;
import windowskits.wtypesbase;
import windowskits.oaidl;
import windowskits.basetsd;
import windowskits.objidlbase;
import windowskits.objidl;
import windowskits.ocidl;
import windowskits.d2d1;
import windowskits.dcommon;
import windowskits.dwrite;
import windowskits.dxgiformat;
import windowskits.d2dbasetypes;
import windowskits.dxgitype;
import windowskits.windef;
import windowskits.dxgi;
import windowskits.d2d1_1;
import windowskits.documenttarget;
import windowskits.rpcdcep;
import windowskits.rpcdce;
import windowskits.rpc;
enum WINCODEC_SDK_VERSION1 = 0x0236;
enum WINCODEC_SDK_VERSION2 = 0x0237;
enum WIC_JPEG_MAX_COMPONENT_COUNT = ( 4 );
enum WIC_JPEG_MAX_TABLE_INDEX = ( 3 );
enum WIC_JPEG_SAMPLE_FACTORS_ONE = ( 0x11 );
enum WIC_JPEG_SAMPLE_FACTORS_THREE_420 = ( 0x111122 );
enum WIC_JPEG_SAMPLE_FACTORS_THREE_422 = ( 0x111121 );
enum WIC_JPEG_SAMPLE_FACTORS_THREE_440 = ( 0x111112 );
enum WIC_JPEG_SAMPLE_FACTORS_THREE_444 = ( 0x111111 );
enum WIC_JPEG_QUANTIZATION_BASELINE_ONE = ( 0 );
enum WIC_JPEG_QUANTIZATION_BASELINE_THREE = ( 0x10100 );
enum WIC_JPEG_HUFFMAN_BASELINE_ONE = ( 0 );
enum WIC_JPEG_HUFFMAN_BASELINE_THREE = ( 0x111100 );
enum FACILITY_WINCODEC_ERR = 0x898;
enum WINCODEC_ERR_BASE = 0x2000;
// macro function: MAKE_WINCODECHR ( sev , code ) MAKE_HRESULT ( sev , FACILITY_WINCODEC_ERR , ( WINCODEC_ERR_BASE + code ) );
// macro function: MAKE_WINCODECHR_ERR ( code ) MAKE_WINCODECHR ( 1 , code );
enum WICRawChangeNotification_ExposureCompensation = 0x00000001;
enum WICRawChangeNotification_NamedWhitePoint = 0x00000002;
enum WICRawChangeNotification_KelvinWhitePoint = 0x00000004;
enum WICRawChangeNotification_RGBWhitePoint = 0x00000008;
enum WICRawChangeNotification_Contrast = 0x00000010;
enum WICRawChangeNotification_Gamma = 0x00000020;
enum WICRawChangeNotification_Sharpness = 0x00000040;
enum WICRawChangeNotification_Saturation = 0x00000080;
enum WICRawChangeNotification_Tint = 0x00000100;
enum WICRawChangeNotification_NoiseReduction = 0x00000200;
enum WICRawChangeNotification_DestinationColorContext = 0x00000400;
enum WICRawChangeNotification_ToneCurve = 0x00000800;
enum WICRawChangeNotification_Rotation = 0x00001000;
enum WICRawChangeNotification_RenderMode = 0x00002000;
interface IWICPalette: IUnknown
{
    static const iidof = parseGUID("00000040-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT InitializePredefined(WICBitmapPaletteType ePaletteType, BOOL fAddTransparentColor);
    HRESULT InitializeCustom(WICColor* pColors, UINT cCount);
    HRESULT InitializeFromBitmap(IWICBitmapSource pISurface, UINT cCount, BOOL fAddTransparentColor);
    HRESULT InitializeFromPalette(IWICPalette pIPalette);
    HRESULT GetType(WICBitmapPaletteType* pePaletteType);
    HRESULT GetColorCount(UINT* pcCount);
    HRESULT GetColors(UINT cCount, WICColor* pColors, UINT* pcActualColors);
    HRESULT IsBlackWhite(BOOL* pfIsBlackWhite);
    HRESULT IsGrayscale(BOOL* pfIsGrayscale);
    HRESULT HasAlpha(BOOL* pfHasAlpha);
}
enum WICBitmapPaletteType
{
    WICBitmapPaletteTypeCustom = 0x0,
    WICBitmapPaletteTypeMedianCut = 0x1,
    WICBitmapPaletteTypeFixedBW = 0x2,
    WICBitmapPaletteTypeFixedHalftone8 = 0x3,
    WICBitmapPaletteTypeFixedHalftone27 = 0x4,
    WICBitmapPaletteTypeFixedHalftone64 = 0x5,
    WICBitmapPaletteTypeFixedHalftone125 = 0x6,
    WICBitmapPaletteTypeFixedHalftone216 = 0x7,
    WICBitmapPaletteTypeFixedWebPalette = 0x7,
    WICBitmapPaletteTypeFixedHalftone252 = 0x8,
    WICBitmapPaletteTypeFixedHalftone256 = 0x9,
    WICBitmapPaletteTypeFixedGray4 = 0xa,
    WICBitmapPaletteTypeFixedGray16 = 0xb,
    WICBitmapPaletteTypeFixedGray256 = 0xc,
    WICBITMAPPALETTETYPE_FORCE_DWORD = 0x7fffffff,
}
alias WICColor = UINT32;
interface IWICBitmapSource: IUnknown
{
    static const iidof = parseGUID("00000120-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT GetSize(UINT* puiWidth, UINT* puiHeight);
    HRESULT GetPixelFormat(WICPixelFormatGUID* pPixelFormat);
    HRESULT GetResolution(double* pDpiX, double* pDpiY);
    HRESULT CopyPalette(IWICPalette pIPalette);
    HRESULT CopyPixels(const(WICRect)* prc, UINT cbStride, UINT cbBufferSize, BYTE* pbBuffer);
}
alias WICPixelFormatGUID = GUID;
struct WICRect
{
    INT X;
    INT Y;
    INT Width;
    INT Height;
}
interface IWICFormatConverter: IWICBitmapSource
{
    static const iidof = parseGUID("00000301-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT Initialize(IWICBitmapSource pISource, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, IWICPalette pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);
    HRESULT CanConvert(REFWICPixelFormatGUID srcPixelFormat, REFWICPixelFormatGUID dstPixelFormat, BOOL* pfCanConvert);
}
alias REFWICPixelFormatGUID = ref GUID;
enum WICBitmapDitherType
{
    WICBitmapDitherTypeNone = 0x0,
    WICBitmapDitherTypeSolid = 0x0,
    WICBitmapDitherTypeOrdered4x4 = 0x1,
    WICBitmapDitherTypeOrdered8x8 = 0x2,
    WICBitmapDitherTypeOrdered16x16 = 0x3,
    WICBitmapDitherTypeSpiral4x4 = 0x4,
    WICBitmapDitherTypeSpiral8x8 = 0x5,
    WICBitmapDitherTypeDualSpiral4x4 = 0x6,
    WICBitmapDitherTypeDualSpiral8x8 = 0x7,
    WICBitmapDitherTypeErrorDiffusion = 0x8,
    WICBITMAPDITHERTYPE_FORCE_DWORD = 0x7fffffff,
}
interface IWICPlanarFormatConverter: IWICBitmapSource
{
    static const iidof = parseGUID("bebee9cb-83b0-4dcc-8132-b0aaa55eac96");
    HRESULT Initialize(IWICBitmapSource* ppPlanes, UINT cPlanes, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, IWICPalette pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);
    HRESULT CanConvert(const(WICPixelFormatGUID)* pSrcPixelFormats, UINT cSrcPlanes, REFWICPixelFormatGUID dstPixelFormat, BOOL* pfCanConvert);
}
interface IWICBitmapScaler: IWICBitmapSource
{
    static const iidof = parseGUID("00000302-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT Initialize(IWICBitmapSource pISource, UINT uiWidth, UINT uiHeight, WICBitmapInterpolationMode mode);
}
enum WICBitmapInterpolationMode
{
    WICBitmapInterpolationModeNearestNeighbor = 0x0,
    WICBitmapInterpolationModeLinear = 0x1,
    WICBitmapInterpolationModeCubic = 0x2,
    WICBitmapInterpolationModeFant = 0x3,
    WICBitmapInterpolationModeHighQualityCubic = 0x4,
    WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapClipper: IWICBitmapSource
{
    static const iidof = parseGUID("e4fbcf03-223d-4e81-9333-d635556dd1b5");
    HRESULT Initialize(IWICBitmapSource pISource, const(WICRect)* prc);
}
interface IWICBitmapFlipRotator: IWICBitmapSource
{
    static const iidof = parseGUID("5009834f-2d6a-41ce-9e1b-17c5aff7a782");
    HRESULT Initialize(IWICBitmapSource pISource, WICBitmapTransformOptions options);
}
enum WICBitmapTransformOptions
{
    WICBitmapTransformRotate0 = 0x0,
    WICBitmapTransformRotate90 = 0x1,
    WICBitmapTransformRotate180 = 0x2,
    WICBitmapTransformRotate270 = 0x3,
    WICBitmapTransformFlipHorizontal = 0x8,
    WICBitmapTransformFlipVertical = 0x10,
    WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapLock: IUnknown
{
    static const iidof = parseGUID("00000123-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT GetSize(UINT* puiWidth, UINT* puiHeight);
    HRESULT GetStride(UINT* pcbStride);
    HRESULT GetDataPointer(UINT* pcbBufferSize, WICInProcPointer* ppbData);
    HRESULT GetPixelFormat(WICPixelFormatGUID* pPixelFormat);
}
alias WICInProcPointer = BYTE*;
interface IWICBitmap: IWICBitmapSource
{
    static const iidof = parseGUID("00000121-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT Lock(const(WICRect)* prcLock, DWORD flags, IWICBitmapLock* ppILock);
    HRESULT SetPalette(IWICPalette pIPalette);
    HRESULT SetResolution(double dpiX, double dpiY);
}
interface IWICColorContext: IUnknown
{
    static const iidof = parseGUID("3c613a02-34b2-44ea-9a7c-45aea9c6fd6d");
    HRESULT InitializeFromFilename(LPCWSTR wzFilename);
    HRESULT InitializeFromMemory(const(BYTE)* pbBuffer, UINT cbBufferSize);
    HRESULT InitializeFromExifColorSpace(UINT value);
    HRESULT GetType(WICColorContextType* pType);
    HRESULT GetProfileBytes(UINT cbBuffer, BYTE* pbBuffer, UINT* pcbActual);
    HRESULT GetExifColorSpace(UINT* pValue);
}
enum WICColorContextType
{
    WICColorContextUninitialized = 0x0,
    WICColorContextProfile = 0x1,
    WICColorContextExifColorSpace = 0x2,
}
interface IWICColorTransform: IWICBitmapSource
{
    static const iidof = parseGUID("b66f034f-d0e2-40ab-b436-6de39e321a94");
    HRESULT Initialize(IWICBitmapSource pIBitmapSource, IWICColorContext pIContextSource, IWICColorContext pIContextDest, REFWICPixelFormatGUID pixelFmtDest);
}
interface IWICFastMetadataEncoder: IUnknown
{
    static const iidof = parseGUID("b84e2c09-78c9-4ac4-8bd3-524ae1663a2f");
    HRESULT Commit();
    HRESULT GetMetadataQueryWriter(IWICMetadataQueryWriter* ppIMetadataQueryWriter);
}
interface IWICMetadataQueryWriter: IWICMetadataQueryReader
{
    static const iidof = parseGUID("a721791a-0def-4d06-bd91-2118bf1db10b");
    HRESULT SetMetadataByName(LPCWSTR wzName, const(PROPVARIANT)* pvarValue);
    HRESULT RemoveMetadataByName(LPCWSTR wzName);
}
interface IWICMetadataQueryReader: IUnknown
{
    static const iidof = parseGUID("30989668-e1c9-4597-b395-458eedb808df");
    HRESULT GetContainerFormat(GUID* pguidContainerFormat);
    HRESULT GetLocation(UINT cchMaxLength, WCHAR* wzNamespace, UINT* pcchActualLength);
    HRESULT GetMetadataByName(LPCWSTR wzName, PROPVARIANT* pvarValue);
    HRESULT GetEnumerator(IEnumString* ppIEnumString);
}
interface IWICStream: IStream
{
    static const iidof = parseGUID("135ff860-22b7-4ddf-b0f6-218f4f299a43");
    HRESULT InitializeFromIStream(IStream pIStream);
    HRESULT InitializeFromFilename(LPCWSTR wzFileName, DWORD dwDesiredAccess);
    HRESULT InitializeFromMemory(WICInProcPointer pbBuffer, DWORD cbBufferSize);
    HRESULT InitializeFromIStreamRegion(IStream pIStream, ULARGE_INTEGER ulOffset, ULARGE_INTEGER ulMaxSize);
}
interface IWICEnumMetadataItem: IUnknown
{
    static const iidof = parseGUID("dc2bb46d-3f07-481e-8625-220c4aedbb33");
    HRESULT Next(ULONG celt, PROPVARIANT* rgeltSchema, PROPVARIANT* rgeltId, PROPVARIANT* rgeltValue, ULONG* pceltFetched);
    HRESULT Skip(ULONG celt);
    HRESULT Reset();
    HRESULT Clone(IWICEnumMetadataItem* ppIEnumMetadataItem);
}
interface IWICBitmapEncoder: IUnknown
{
    static const iidof = parseGUID("00000103-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT Initialize(IStream pIStream, WICBitmapEncoderCacheOption cacheOption);
    HRESULT GetContainerFormat(GUID* pguidContainerFormat);
    HRESULT GetEncoderInfo(IWICBitmapEncoderInfo* ppIEncoderInfo);
    HRESULT SetColorContexts(UINT cCount, IWICColorContext* ppIColorContext);
    HRESULT SetPalette(IWICPalette pIPalette);
    HRESULT SetThumbnail(IWICBitmapSource pIThumbnail);
    HRESULT SetPreview(IWICBitmapSource pIPreview);
    HRESULT CreateNewFrame(IWICBitmapFrameEncode* ppIFrameEncode, IPropertyBag2* ppIEncoderOptions);
    HRESULT Commit();
    HRESULT GetMetadataQueryWriter(IWICMetadataQueryWriter* ppIMetadataQueryWriter);
}
enum WICBitmapEncoderCacheOption
{
    WICBitmapEncoderCacheInMemory = 0x0,
    WICBitmapEncoderCacheTempFile = 0x1,
    WICBitmapEncoderNoCache = 0x2,
    WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapEncoderInfo: IWICBitmapCodecInfo
{
    static const iidof = parseGUID("94c9b4ee-a09f-4f92-8a1e-4a9bce7e76fb");
    HRESULT CreateInstance(IWICBitmapEncoder* ppIBitmapEncoder);
}
interface IWICBitmapCodecInfo: IWICComponentInfo
{
    static const iidof = parseGUID("e87a44c4-b76e-4c47-8b09-298eb12a2714");
    HRESULT GetContainerFormat(GUID* pguidContainerFormat);
    HRESULT GetPixelFormats(UINT cFormats, GUID* pguidPixelFormats, UINT* pcActual);
    HRESULT GetColorManagementVersion(UINT cchColorManagementVersion, WCHAR* wzColorManagementVersion, UINT* pcchActual);
    HRESULT GetDeviceManufacturer(UINT cchDeviceManufacturer, WCHAR* wzDeviceManufacturer, UINT* pcchActual);
    HRESULT GetDeviceModels(UINT cchDeviceModels, WCHAR* wzDeviceModels, UINT* pcchActual);
    HRESULT GetMimeTypes(UINT cchMimeTypes, WCHAR* wzMimeTypes, UINT* pcchActual);
    HRESULT GetFileExtensions(UINT cchFileExtensions, WCHAR* wzFileExtensions, UINT* pcchActual);
    HRESULT DoesSupportAnimation(BOOL* pfSupportAnimation);
    HRESULT DoesSupportChromakey(BOOL* pfSupportChromakey);
    HRESULT DoesSupportLossless(BOOL* pfSupportLossless);
    HRESULT DoesSupportMultiframe(BOOL* pfSupportMultiframe);
    HRESULT MatchesMimeType(LPCWSTR wzMimeType, BOOL* pfMatches);
}
interface IWICComponentInfo: IUnknown
{
    static const iidof = parseGUID("23bc3f0a-698b-4357-886b-f24d50671334");
    HRESULT GetComponentType(WICComponentType* pType);
    HRESULT GetCLSID(CLSID* pclsid);
    HRESULT GetSigningStatus(DWORD* pStatus);
    HRESULT GetAuthor(UINT cchAuthor, WCHAR* wzAuthor, UINT* pcchActual);
    HRESULT GetVendorGUID(GUID* pguidVendor);
    HRESULT GetVersion(UINT cchVersion, WCHAR* wzVersion, UINT* pcchActual);
    HRESULT GetSpecVersion(UINT cchSpecVersion, WCHAR* wzSpecVersion, UINT* pcchActual);
    HRESULT GetFriendlyName(UINT cchFriendlyName, WCHAR* wzFriendlyName, UINT* pcchActual);
}
enum WICComponentType
{
    WICDecoder = 0x1,
    WICEncoder = 0x2,
    WICPixelFormatConverter = 0x4,
    WICMetadataReader = 0x8,
    WICMetadataWriter = 0x10,
    WICPixelFormat = 0x20,
    WICAllComponents = 0x3f,
    WICCOMPONENTTYPE_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapFrameEncode: IUnknown
{
    static const iidof = parseGUID("00000105-a8f2-4877-ba0a-fd2b6645fb94");
    HRESULT Initialize(IPropertyBag2 pIEncoderOptions);
    HRESULT SetSize(UINT uiWidth, UINT uiHeight);
    HRESULT SetResolution(double dpiX, double dpiY);
    HRESULT SetPixelFormat(WICPixelFormatGUID* pPixelFormat);
    HRESULT SetColorContexts(UINT cCount, IWICColorContext* ppIColorContext);
    HRESULT SetPalette(IWICPalette pIPalette);
    HRESULT SetThumbnail(IWICBitmapSource pIThumbnail);
    HRESULT WritePixels(UINT lineCount, UINT cbStride, UINT cbBufferSize, BYTE* pbPixels);
    HRESULT WriteSource(IWICBitmapSource pIBitmapSource, WICRect* prc);
    HRESULT Commit();
    HRESULT GetMetadataQueryWriter(IWICMetadataQueryWriter* ppIMetadataQueryWriter);
}
interface IWICPlanarBitmapFrameEncode: IUnknown
{
    static const iidof = parseGUID("f928b7b8-2221-40c1-b72e-7e82f1974d1a");
    HRESULT WritePixels(UINT lineCount, WICBitmapPlane* pPlanes, UINT cPlanes);
    HRESULT WriteSource(IWICBitmapSource* ppPlanes, UINT cPlanes, WICRect* prcSource);
}
struct WICBitmapPlane
{
    WICPixelFormatGUID Format;
    BYTE* pbBuffer;
    UINT cbStride;
    UINT cbBufferSize;
}
interface IWICImageEncoder: IUnknown
{
    static const iidof = parseGUID("04c75bf8-3ce1-473b-acc5-3cc4f5e94999");
    HRESULT WriteFrame(ID2D1Image pImage, IWICBitmapFrameEncode pFrameEncode, const(WICImageParameters)* pImageParameters);
    HRESULT WriteFrameThumbnail(ID2D1Image pImage, IWICBitmapFrameEncode pFrameEncode, const(WICImageParameters)* pImageParameters);
    HRESULT WriteThumbnail(ID2D1Image pImage, IWICBitmapEncoder pEncoder, const(WICImageParameters)* pImageParameters);
}
struct WICImageParameters
{
    D2D1_PIXEL_FORMAT PixelFormat;
    FLOAT DpiX;
    FLOAT DpiY;
    FLOAT Top;
    FLOAT Left;
    UINT32 PixelWidth;
    UINT32 PixelHeight;
}
interface IWICBitmapDecoder: IUnknown
{
    static const iidof = parseGUID("9edde9e7-8dee-47ea-99df-e6faf2ed44bf");
    HRESULT QueryCapability(IStream pIStream, DWORD* pdwCapability);
    HRESULT Initialize(IStream pIStream, WICDecodeOptions cacheOptions);
    HRESULT GetContainerFormat(GUID* pguidContainerFormat);
    HRESULT GetDecoderInfo(IWICBitmapDecoderInfo* ppIDecoderInfo);
    HRESULT CopyPalette(IWICPalette pIPalette);
    HRESULT GetMetadataQueryReader(IWICMetadataQueryReader* ppIMetadataQueryReader);
    HRESULT GetPreview(IWICBitmapSource* ppIBitmapSource);
    HRESULT GetColorContexts(UINT cCount, IWICColorContext* ppIColorContexts, UINT* pcActualCount);
    HRESULT GetThumbnail(IWICBitmapSource* ppIThumbnail);
    HRESULT GetFrameCount(UINT* pCount);
    HRESULT GetFrame(UINT index, IWICBitmapFrameDecode* ppIBitmapFrame);
}
enum WICDecodeOptions
{
    WICDecodeMetadataCacheOnDemand = 0x0,
    WICDecodeMetadataCacheOnLoad = 0x1,
    WICMETADATACACHEOPTION_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapDecoderInfo: IWICBitmapCodecInfo
{
    static const iidof = parseGUID("d8cd007f-d08f-4191-9bfc-236ea7f0e4b5");
    HRESULT GetPatterns(UINT cbSizePatterns, WICBitmapPattern* pPatterns, UINT* pcPatterns, UINT* pcbPatternsActual);
    HRESULT MatchesPattern(IStream pIStream, BOOL* pfMatches);
    HRESULT CreateInstance(IWICBitmapDecoder* ppIBitmapDecoder);
}
struct WICBitmapPattern
{
    ULARGE_INTEGER Position;
    ULONG Length;
    BYTE* Pattern;
    BYTE* Mask;
    BOOL EndOfStream;
}
interface IWICBitmapFrameDecode: IWICBitmapSource
{
    static const iidof = parseGUID("3b16811b-6a43-4ec9-a813-3d930c13b940");
    HRESULT GetMetadataQueryReader(IWICMetadataQueryReader* ppIMetadataQueryReader);
    HRESULT GetColorContexts(UINT cCount, IWICColorContext* ppIColorContexts, UINT* pcActualCount);
    HRESULT GetThumbnail(IWICBitmapSource* ppIThumbnail);
}
interface IWICBitmapSourceTransform: IUnknown
{
    static const iidof = parseGUID("3b16811b-6a43-4ec9-b713-3d5a0c13b940");
    HRESULT CopyPixels(const(WICRect)* prc, UINT uiWidth, UINT uiHeight, WICPixelFormatGUID* pguidDstFormat, WICBitmapTransformOptions dstTransform, UINT nStride, UINT cbBufferSize, BYTE* pbBuffer);
    HRESULT GetClosestSize(UINT* puiWidth, UINT* puiHeight);
    HRESULT GetClosestPixelFormat(WICPixelFormatGUID* pguidDstFormat);
    HRESULT DoesSupportTransform(WICBitmapTransformOptions dstTransform, BOOL* pfIsSupported);
}
interface IWICPlanarBitmapSourceTransform: IUnknown
{
    static const iidof = parseGUID("3aff9cce-be95-4303-b927-e7d16ff4a613");
    HRESULT DoesSupportTransform(UINT* puiWidth, UINT* puiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, const(WICPixelFormatGUID)* pguidDstFormats, WICBitmapPlaneDescription* pPlaneDescriptions, UINT cPlanes, BOOL* pfIsSupported);
    HRESULT CopyPixels(const(WICRect)* prcSource, UINT uiWidth, UINT uiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, const(WICBitmapPlane)* pDstPlanes, UINT cPlanes);
}
enum WICPlanarOptions
{
    WICPlanarOptionsDefault = 0x0,
    WICPlanarOptionsPreserveSubsampling = 0x1,
    WICPLANAROPTIONS_FORCE_DWORD = 0x7fffffff,
}
struct WICBitmapPlaneDescription
{
    WICPixelFormatGUID Format;
    UINT Width;
    UINT Height;
}
interface IWICProgressiveLevelControl: IUnknown
{
    static const iidof = parseGUID("daac296f-7aa5-4dbf-8d15-225c5976f891");
    HRESULT GetLevelCount(UINT* pcLevels);
    HRESULT GetCurrentLevel(UINT* pnLevel);
    HRESULT SetCurrentLevel(UINT nLevel);
}
interface IWICProgressCallback: IUnknown
{
    static const iidof = parseGUID("4776f9cd-9517-45fa-bf24-e89c5ec5c60c");
    HRESULT Notify(ULONG uFrameNum, WICProgressOperation operation, double dblProgress);
}
enum WICProgressOperation
{
    WICProgressOperationCopyPixels = 0x1,
    WICProgressOperationWritePixels = 0x2,
    WICProgressOperationAll = 0xffff,
    WICPROGRESSOPERATION_FORCE_DWORD = 0x7fffffff,
}
interface IWICBitmapCodecProgressNotification: IUnknown
{
    static const iidof = parseGUID("64c1024e-c3cf-4462-8078-88c2b11c46d9");
    HRESULT RegisterProgressNotification(PFNProgressNotification pfnProgressNotification, LPVOID pvData, DWORD dwProgressFlags);
}
alias PFNProgressNotification = extern(C) HRESULT function(LPVOID pvData, ULONG uFrameNum, WICProgressOperation operation, double dblProgress);
interface IWICFormatConverterInfo: IWICComponentInfo
{
    static const iidof = parseGUID("9f34fb65-13f4-4f15-bc57-3726b5e53d9f");
    HRESULT GetPixelFormats(UINT cFormats, WICPixelFormatGUID* pPixelFormatGUIDs, UINT* pcActual);
    HRESULT CreateInstance(IWICFormatConverter* ppIConverter);
}
interface IWICPixelFormatInfo: IWICComponentInfo
{
    static const iidof = parseGUID("e8eda601-3d48-431a-ab44-69059be88bbe");
    HRESULT GetFormatGUID(GUID* pFormat);
    HRESULT GetColorContext(IWICColorContext* ppIColorContext);
    HRESULT GetBitsPerPixel(UINT* puiBitsPerPixel);
    HRESULT GetChannelCount(UINT* puiChannelCount);
    HRESULT GetChannelMask(UINT uiChannelIndex, UINT cbMaskBuffer, BYTE* pbMaskBuffer, UINT* pcbActual);
}
interface IWICPixelFormatInfo2: IWICPixelFormatInfo
{
    static const iidof = parseGUID("a9db33a2-af5f-43c7-b679-74f5984b5aa4");
    HRESULT SupportsTransparency(BOOL* pfSupportsTransparency);
    HRESULT GetNumericRepresentation(WICPixelFormatNumericRepresentation* pNumericRepresentation);
}
enum WICPixelFormatNumericRepresentation
{
    WICPixelFormatNumericRepresentationUnspecified = 0x0,
    WICPixelFormatNumericRepresentationIndexed = 0x1,
    WICPixelFormatNumericRepresentationUnsignedInteger = 0x2,
    WICPixelFormatNumericRepresentationSignedInteger = 0x3,
    WICPixelFormatNumericRepresentationFixed = 0x4,
    WICPixelFormatNumericRepresentationFloat = 0x5,
    _FORCE_DWORD = 0x7fffffff,
}
interface IWICImagingFactory: IUnknown
{
    static const iidof = parseGUID("ec5ec8a9-c395-4314-9c77-54d7a935ff70");
    HRESULT CreateDecoderFromFilename(LPCWSTR wzFilename, const(GUID)* pguidVendor, DWORD dwDesiredAccess, WICDecodeOptions metadataOptions, IWICBitmapDecoder* ppIDecoder);
    HRESULT CreateDecoderFromStream(IStream pIStream, const(GUID)* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder* ppIDecoder);
    HRESULT CreateDecoderFromFileHandle(ULONG_PTR hFile, const(GUID)* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder* ppIDecoder);
    HRESULT CreateComponentInfo(ref IID clsidComponent, IWICComponentInfo* ppIInfo);
    HRESULT CreateDecoder(ref GUID guidContainerFormat, const(GUID)* pguidVendor, IWICBitmapDecoder* ppIDecoder);
    HRESULT CreateEncoder(ref GUID guidContainerFormat, const(GUID)* pguidVendor, IWICBitmapEncoder* ppIEncoder);
    HRESULT CreatePalette(IWICPalette* ppIPalette);
    HRESULT CreateFormatConverter(IWICFormatConverter* ppIFormatConverter);
    HRESULT CreateBitmapScaler(IWICBitmapScaler* ppIBitmapScaler);
    HRESULT CreateBitmapClipper(IWICBitmapClipper* ppIBitmapClipper);
    HRESULT CreateBitmapFlipRotator(IWICBitmapFlipRotator* ppIBitmapFlipRotator);
    HRESULT CreateStream(IWICStream* ppIWICStream);
    HRESULT CreateColorContext(IWICColorContext* ppIWICColorContext);
    HRESULT CreateColorTransformer(IWICColorTransform* ppIWICColorTransform);
    HRESULT CreateBitmap(UINT uiWidth, UINT uiHeight, REFWICPixelFormatGUID pixelFormat, WICBitmapCreateCacheOption option, IWICBitmap* ppIBitmap);
    HRESULT CreateBitmapFromSource(IWICBitmapSource pIBitmapSource, WICBitmapCreateCacheOption option, IWICBitmap* ppIBitmap);
    HRESULT CreateBitmapFromSourceRect(IWICBitmapSource pIBitmapSource, UINT x, UINT y, UINT width, UINT height, IWICBitmap* ppIBitmap);
    HRESULT CreateBitmapFromMemory(UINT uiWidth, UINT uiHeight, REFWICPixelFormatGUID pixelFormat, UINT cbStride, UINT cbBufferSize, BYTE* pbBuffer, IWICBitmap* ppIBitmap);
    HRESULT CreateBitmapFromHBITMAP(HBITMAP hBitmap, HPALETTE hPalette, WICBitmapAlphaChannelOption options, IWICBitmap* ppIBitmap);
    HRESULT CreateBitmapFromHICON(HICON hIcon, IWICBitmap* ppIBitmap);
    HRESULT CreateComponentEnumerator(DWORD componentTypes, DWORD options, IEnumUnknown* ppIEnumUnknown);
    HRESULT CreateFastMetadataEncoderFromDecoder(IWICBitmapDecoder pIDecoder, IWICFastMetadataEncoder* ppIFastEncoder);
    HRESULT CreateFastMetadataEncoderFromFrameDecode(IWICBitmapFrameDecode pIFrameDecoder, IWICFastMetadataEncoder* ppIFastEncoder);
    HRESULT CreateQueryWriter(ref GUID guidMetadataFormat, const(GUID)* pguidVendor, IWICMetadataQueryWriter* ppIQueryWriter);
    HRESULT CreateQueryWriterFromReader(IWICMetadataQueryReader pIQueryReader, const(GUID)* pguidVendor, IWICMetadataQueryWriter* ppIQueryWriter);
}
enum WICBitmapCreateCacheOption
{
    WICBitmapNoCache = 0x0,
    WICBitmapCacheOnDemand = 0x1,
    WICBitmapCacheOnLoad = 0x2,
    WICBITMAPCREATECACHEOPTION_FORCE_DWORD = 0x7fffffff,
}
enum WICBitmapAlphaChannelOption
{
    WICBitmapUseAlpha = 0x0,
    WICBitmapUsePremultipliedAlpha = 0x1,
    WICBitmapIgnoreAlpha = 0x2,
    WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = 0x7fffffff,
}
interface IWICImagingFactory2: IWICImagingFactory
{
    static const iidof = parseGUID("7b816b45-1996-4476-b132-de9e247c8af0");
    HRESULT CreateImageEncoder(ID2D1Device pD2DDevice, IWICImageEncoder* ppWICImageEncoder);
}
interface IWICDevelopRawNotificationCallback: IUnknown
{
    static const iidof = parseGUID("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b");
    HRESULT Notify(UINT NotificationMask);
}
interface IWICDevelopRaw: IWICBitmapFrameDecode
{
    static const iidof = parseGUID("fbec5e44-f7be-4b65-b7f8-c0c81fef026d");
    HRESULT QueryRawCapabilitiesInfo(WICRawCapabilitiesInfo* pInfo);
    HRESULT LoadParameterSet(WICRawParameterSet ParameterSet);
    HRESULT GetCurrentParameterSet(IPropertyBag2* ppCurrentParameterSet);
    HRESULT SetExposureCompensation(double ev);
    HRESULT GetExposureCompensation(double* pEV);
    HRESULT SetWhitePointRGB(UINT Red, UINT Green, UINT Blue);
    HRESULT GetWhitePointRGB(UINT* pRed, UINT* pGreen, UINT* pBlue);
    HRESULT SetNamedWhitePoint(WICNamedWhitePoint WhitePoint);
    HRESULT GetNamedWhitePoint(WICNamedWhitePoint* pWhitePoint);
    HRESULT SetWhitePointKelvin(UINT WhitePointKelvin);
    HRESULT GetWhitePointKelvin(UINT* pWhitePointKelvin);
    HRESULT GetKelvinRangeInfo(UINT* pMinKelvinTemp, UINT* pMaxKelvinTemp, UINT* pKelvinTempStepValue);
    HRESULT SetContrast(double Contrast);
    HRESULT GetContrast(double* pContrast);
    HRESULT SetGamma(double Gamma);
    HRESULT GetGamma(double* pGamma);
    HRESULT SetSharpness(double Sharpness);
    HRESULT GetSharpness(double* pSharpness);
    HRESULT SetSaturation(double Saturation);
    HRESULT GetSaturation(double* pSaturation);
    HRESULT SetTint(double Tint);
    HRESULT GetTint(double* pTint);
    HRESULT SetNoiseReduction(double NoiseReduction);
    HRESULT GetNoiseReduction(double* pNoiseReduction);
    HRESULT SetDestinationColorContext(IWICColorContext pColorContext);
    HRESULT SetToneCurve(UINT cbToneCurveSize, const(WICRawToneCurve)* pToneCurve);
    HRESULT GetToneCurve(UINT cbToneCurveBufferSize, WICRawToneCurve* pToneCurve, UINT* pcbActualToneCurveBufferSize);
    HRESULT SetRotation(double Rotation);
    HRESULT GetRotation(double* pRotation);
    HRESULT SetRenderMode(WICRawRenderMode RenderMode);
    HRESULT GetRenderMode(WICRawRenderMode* pRenderMode);
    HRESULT SetNotificationCallback(IWICDevelopRawNotificationCallback pCallback);
}
struct WICRawCapabilitiesInfo
{
    UINT cbSize;
    UINT CodecMajorVersion;
    UINT CodecMinorVersion;
    WICRawCapabilities ExposureCompensationSupport;
    WICRawCapabilities ContrastSupport;
    WICRawCapabilities RGBWhitePointSupport;
    WICRawCapabilities NamedWhitePointSupport;
    UINT NamedWhitePointSupportMask;
    WICRawCapabilities KelvinWhitePointSupport;
    WICRawCapabilities GammaSupport;
    WICRawCapabilities TintSupport;
    WICRawCapabilities SaturationSupport;
    WICRawCapabilities SharpnessSupport;
    WICRawCapabilities NoiseReductionSupport;
    WICRawCapabilities DestinationColorProfileSupport;
    WICRawCapabilities ToneCurveSupport;
    WICRawRotationCapabilities RotationSupport;
    WICRawCapabilities RenderModeSupport;
}
enum WICRawCapabilities
{
    WICRawCapabilityNotSupported = 0x0,
    WICRawCapabilityGetSupported = 0x1,
    WICRawCapabilityFullySupported = 0x2,
    WICRAWCAPABILITIES_FORCE_DWORD = 0x7fffffff,
}
enum WICRawRotationCapabilities
{
    WICRawRotationCapabilityNotSupported = 0x0,
    WICRawRotationCapabilityGetSupported = 0x1,
    WICRawRotationCapabilityNinetyDegreesSupported = 0x2,
    WICRawRotationCapabilityFullySupported = 0x3,
    WICRAWROTATIONCAPABILITIES_FORCE_DWORD = 0x7fffffff,
}
enum WICRawParameterSet
{
    WICAsShotParameterSet = 0x1,
    WICUserAdjustedParameterSet = 0x2,
    WICAutoAdjustedParameterSet = 0x3,
    WICRAWPARAMETERSET_FORCE_DWORD = 0x7fffffff,
}
enum WICNamedWhitePoint
{
    WICWhitePointDefault = 0x1,
    WICWhitePointDaylight = 0x2,
    WICWhitePointCloudy = 0x4,
    WICWhitePointShade = 0x8,
    WICWhitePointTungsten = 0x10,
    WICWhitePointFluorescent = 0x20,
    WICWhitePointFlash = 0x40,
    WICWhitePointUnderwater = 0x80,
    WICWhitePointCustom = 0x100,
    WICWhitePointAutoWhiteBalance = 0x200,
    WICWhitePointAsShot = 0x1,
    WICNAMEDWHITEPOINT_FORCE_DWORD = 0x7fffffff,
}
struct WICRawToneCurve
{
    UINT cPoints;
    WICRawToneCurvePoint[1] aPoints;
}
struct WICRawToneCurvePoint
{
    double Input;
    double Output;
}
enum WICRawRenderMode
{
    WICRawRenderModeDraft = 0x1,
    WICRawRenderModeNormal = 0x2,
    WICRawRenderModeBestQuality = 0x3,
    WICRAWRENDERMODE_FORCE_DWORD = 0x7fffffff,
}
interface IWICDdsDecoder: IUnknown
{
    static const iidof = parseGUID("409cd537-8532-40cb-9774-e2feb2df4e9c");
    HRESULT GetParameters(WICDdsParameters* pParameters);
    HRESULT GetFrame(UINT arrayIndex, UINT mipLevel, UINT sliceIndex, IWICBitmapFrameDecode* ppIBitmapFrame);
}
struct WICDdsParameters
{
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT DxgiFormat;
    WICDdsDimension Dimension;
    WICDdsAlphaMode AlphaMode;
}
enum WICDdsDimension
{
    WICDdsTexture1D = 0x0,
    WICDdsTexture2D = 0x1,
    WICDdsTexture3D = 0x2,
    WICDdsTextureCube = 0x3,
    WICDDSTEXTURE_FORCE_DWORD = 0x7fffffff,
}
enum WICDdsAlphaMode
{
    WICDdsAlphaModeUnknown = 0x0,
    WICDdsAlphaModeStraight = 0x1,
    WICDdsAlphaModePremultiplied = 0x2,
    WICDdsAlphaModeOpaque = 0x3,
    WICDdsAlphaModeCustom = 0x4,
    WICDDSALPHAMODE_FORCE_DWORD = 0x7fffffff,
}
interface IWICDdsEncoder: IUnknown
{
    static const iidof = parseGUID("5cacdb4c-407e-41b3-b936-d0f010cd6732");
    HRESULT SetParameters(WICDdsParameters* pParameters);
    HRESULT GetParameters(WICDdsParameters* pParameters);
    HRESULT CreateNewFrame(IWICBitmapFrameEncode* ppIFrameEncode, UINT* pArrayIndex, UINT* pMipLevel, UINT* pSliceIndex);
}
interface IWICDdsFrameDecode: IUnknown
{
    static const iidof = parseGUID("3d4c0c61-18a4-41e4-bd80-481a4fc9f464");
    HRESULT GetSizeInBlocks(UINT* pWidthInBlocks, UINT* pHeightInBlocks);
    HRESULT GetFormatInfo(WICDdsFormatInfo* pFormatInfo);
    HRESULT CopyBlocks(const(WICRect)* prcBoundsInBlocks, UINT cbStride, UINT cbBufferSize, BYTE* pbBuffer);
}
struct WICDdsFormatInfo
{
    DXGI_FORMAT DxgiFormat;
    UINT BytesPerBlock;
    UINT BlockWidth;
    UINT BlockHeight;
}
interface IWICJpegFrameDecode: IUnknown
{
    static const iidof = parseGUID("8939f66e-c46a-4c21-a9d1-98b327ce1679");
    HRESULT DoesSupportIndexing(BOOL* pfIndexingSupported);
    HRESULT SetIndexing(WICJpegIndexingOptions options, UINT horizontalIntervalSize);
    HRESULT ClearIndexing();
    HRESULT GetAcHuffmanTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable);
    HRESULT GetDcHuffmanTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable);
    HRESULT GetQuantizationTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_QUANTIZATION_TABLE* pQuantizationTable);
    HRESULT GetFrameHeader(WICJpegFrameHeader* pFrameHeader);
    HRESULT GetScanHeader(UINT scanIndex, WICJpegScanHeader* pScanHeader);
    HRESULT CopyScan(UINT scanIndex, UINT scanOffset, UINT cbScanData, BYTE* pbScanData, UINT* pcbScanDataActual);
    HRESULT CopyMinimalStream(UINT streamOffset, UINT cbStreamData, BYTE* pbStreamData, UINT* pcbStreamDataActual);
}
enum WICJpegIndexingOptions
{
    WICJpegIndexingOptionsGenerateOnDemand = 0x0,
    WICJpegIndexingOptionsGenerateOnLoad = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
struct WICJpegFrameHeader
{
    UINT Width;
    UINT Height;
    WICJpegTransferMatrix TransferMatrix;
    WICJpegScanType ScanType;
    UINT cComponents;
    DWORD ComponentIdentifiers;
    DWORD SampleFactors;
    DWORD QuantizationTableIndices;
}
enum WICJpegTransferMatrix
{
    WICJpegTransferMatrixIdentity = 0x0,
    WICJpegTransferMatrixBT601 = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICJpegScanType
{
    WICJpegScanTypeInterleaved = 0x0,
    WICJpegScanTypePlanarComponents = 0x1,
    WICJpegScanTypeProgressive = 0x2,
    _FORCE_DWORD = 0x7fffffff,
}
struct WICJpegScanHeader
{
    UINT cComponents;
    UINT RestartInterval;
    DWORD ComponentSelectors;
    DWORD HuffmanTableIndices;
    BYTE StartSpectralSelection;
    BYTE EndSpectralSelection;
    BYTE SuccessiveApproximationHigh;
    BYTE SuccessiveApproximationLow;
}
interface IWICJpegFrameEncode: IUnknown
{
    static const iidof = parseGUID("2f0c601f-d2c6-468c-abfa-49495d983ed1");
    HRESULT GetAcHuffmanTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable);
    HRESULT GetDcHuffmanTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable);
    HRESULT GetQuantizationTable(UINT scanIndex, UINT tableIndex, DXGI_JPEG_QUANTIZATION_TABLE* pQuantizationTable);
    HRESULT WriteScan(UINT cbScanData, const(BYTE)* pbScanData);
}
enum WICComponentEnumerateOptions
{
    WICComponentEnumerateDefault = 0x0,
    WICComponentEnumerateRefresh = 0x1,
    WICComponentEnumerateDisabled = 0x80000000,
    WICComponentEnumerateUnsigned = 0x40000000,
    WICComponentEnumerateBuiltInOnly = 0x20000000,
    WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = 0x7fffffff,
}
enum WICBitmapLockFlags
{
    WICBitmapLockRead = 0x1,
    WICBitmapLockWrite = 0x2,
    WICBITMAPLOCKFLAGS_FORCE_DWORD = 0x7fffffff,
}
enum WICBitmapDecoderCapabilities
{
    WICBitmapDecoderCapabilitySameEncoder = 0x1,
    WICBitmapDecoderCapabilityCanDecodeAllImages = 0x2,
    WICBitmapDecoderCapabilityCanDecodeSomeImages = 0x4,
    WICBitmapDecoderCapabilityCanEnumerateMetadata = 0x8,
    WICBitmapDecoderCapabilityCanDecodeThumbnail = 0x10,
    WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = 0x7fffffff,
}
enum WICProgressNotification
{
    WICProgressNotificationBegin = 0x10000,
    WICProgressNotificationEnd = 0x20000,
    WICProgressNotificationFrequent = 0x40000,
    WICProgressNotificationAll = 0xffff0000,
    WICPROGRESSNOTIFICATION_FORCE_DWORD = 0x7fffffff,
}
enum WICComponentSigning
{
    WICComponentSigned = 0x1,
    WICComponentUnsigned = 0x2,
    WICComponentSafe = 0x4,
    WICComponentDisabled = 0x80000000,
    WICCOMPONENTSIGNING_FORCE_DWORD = 0x7fffffff,
}
enum WICGifLogicalScreenDescriptorProperties
{
    WICGifLogicalScreenSignature = 0x1,
    WICGifLogicalScreenDescriptorWidth = 0x2,
    WICGifLogicalScreenDescriptorHeight = 0x3,
    WICGifLogicalScreenDescriptorGlobalColorTableFlag = 0x4,
    WICGifLogicalScreenDescriptorColorResolution = 0x5,
    WICGifLogicalScreenDescriptorSortFlag = 0x6,
    WICGifLogicalScreenDescriptorGlobalColorTableSize = 0x7,
    WICGifLogicalScreenDescriptorBackgroundColorIndex = 0x8,
    WICGifLogicalScreenDescriptorPixelAspectRatio = 0x9,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICGifImageDescriptorProperties
{
    WICGifImageDescriptorLeft = 0x1,
    WICGifImageDescriptorTop = 0x2,
    WICGifImageDescriptorWidth = 0x3,
    WICGifImageDescriptorHeight = 0x4,
    WICGifImageDescriptorLocalColorTableFlag = 0x5,
    WICGifImageDescriptorInterlaceFlag = 0x6,
    WICGifImageDescriptorSortFlag = 0x7,
    WICGifImageDescriptorLocalColorTableSize = 0x8,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICGifGraphicControlExtensionProperties
{
    WICGifGraphicControlExtensionDisposal = 0x1,
    WICGifGraphicControlExtensionUserInputFlag = 0x2,
    WICGifGraphicControlExtensionTransparencyFlag = 0x3,
    WICGifGraphicControlExtensionDelay = 0x4,
    WICGifGraphicControlExtensionTransparentColorIndex = 0x5,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICGifApplicationExtensionProperties
{
    WICGifApplicationExtensionApplication = 0x1,
    WICGifApplicationExtensionData = 0x2,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICGifCommentExtensionProperties
{
    WICGifCommentExtensionText = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICJpegCommentProperties
{
    WICJpegCommentText = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICJpegLuminanceProperties
{
    WICJpegLuminanceTable = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICJpegChrominanceProperties
{
    WICJpegChrominanceTable = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WIC8BIMIptcProperties
{
    WIC8BIMIptcPString = 0x0,
    WIC8BIMIptcEmbeddedIPTC = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WIC8BIMResolutionInfoProperties
{
    WIC8BIMResolutionInfoPString = 0x1,
    WIC8BIMResolutionInfoHResolution = 0x2,
    WIC8BIMResolutionInfoHResolutionUnit = 0x3,
    WIC8BIMResolutionInfoWidthUnit = 0x4,
    WIC8BIMResolutionInfoVResolution = 0x5,
    WIC8BIMResolutionInfoVResolutionUnit = 0x6,
    WIC8BIMResolutionInfoHeightUnit = 0x7,
    _FORCE_DWORD = 0x7fffffff,
}
enum WIC8BIMIptcDigestProperties
{
    WIC8BIMIptcDigestPString = 0x1,
    WIC8BIMIptcDigestIptcDigest = 0x2,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngGamaProperties
{
    WICPngGamaGamma = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngBkgdProperties
{
    WICPngBkgdBackgroundColor = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngItxtProperties
{
    WICPngItxtKeyword = 0x1,
    WICPngItxtCompressionFlag = 0x2,
    WICPngItxtLanguageTag = 0x3,
    WICPngItxtTranslatedKeyword = 0x4,
    WICPngItxtText = 0x5,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngChrmProperties
{
    WICPngChrmWhitePointX = 0x1,
    WICPngChrmWhitePointY = 0x2,
    WICPngChrmRedX = 0x3,
    WICPngChrmRedY = 0x4,
    WICPngChrmGreenX = 0x5,
    WICPngChrmGreenY = 0x6,
    WICPngChrmBlueX = 0x7,
    WICPngChrmBlueY = 0x8,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngHistProperties
{
    WICPngHistFrequencies = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngIccpProperties
{
    WICPngIccpProfileName = 0x1,
    WICPngIccpProfileData = 0x2,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngSrgbProperties
{
    WICPngSrgbRenderingIntent = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICPngTimeProperties
{
    WICPngTimeYear = 0x1,
    WICPngTimeMonth = 0x2,
    WICPngTimeDay = 0x3,
    WICPngTimeHour = 0x4,
    WICPngTimeMinute = 0x5,
    WICPngTimeSecond = 0x6,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICHeifProperties
{
    WICHeifOrientation = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICHeifHdrProperties
{
    WICHeifHdrMaximumLuminanceLevel = 0x1,
    WICHeifHdrMaximumFrameAverageLuminanceLevel = 0x2,
    WICHeifHdrMinimumMasteringDisplayLuminanceLevel = 0x3,
    WICHeifHdrMaximumMasteringDisplayLuminanceLevel = 0x4,
    WICHeifHdrCustomVideoPrimaries = 0x5,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICWebpAnimProperties
{
    WICWebpAnimLoopCount = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICWebpAnmfProperties
{
    WICWebpAnmfFrameDuration = 0x1,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICSectionAccessLevel
{
    WICSectionAccessLevelRead = 0x1,
    WICSectionAccessLevelReadWrite = 0x3,
    _FORCE_DWORD = 0x7fffffff,
}
enum WICTiffCompressionOption
{
    WICTiffCompressionDontCare = 0x0,
    WICTiffCompressionNone = 0x1,
    WICTiffCompressionCCITT3 = 0x2,
    WICTiffCompressionCCITT4 = 0x3,
    WICTiffCompressionLZW = 0x4,
    WICTiffCompressionRLE = 0x5,
    WICTiffCompressionZIP = 0x6,
    WICTiffCompressionLZWHDifferencing = 0x7,
    WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = 0x7fffffff,
}
enum WICJpegYCrCbSubsamplingOption
{
    WICJpegYCrCbSubsamplingDefault = 0x0,
    WICJpegYCrCbSubsampling420 = 0x1,
    WICJpegYCrCbSubsampling422 = 0x2,
    WICJpegYCrCbSubsampling444 = 0x3,
    WICJpegYCrCbSubsampling440 = 0x4,
    WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = 0x7fffffff,
}
enum WICPngFilterOption
{
    WICPngFilterUnspecified = 0x0,
    WICPngFilterNone = 0x1,
    WICPngFilterSub = 0x2,
    WICPngFilterUp = 0x3,
    WICPngFilterAverage = 0x4,
    WICPngFilterPaeth = 0x5,
    WICPngFilterAdaptive = 0x6,
    WICPNGFILTEROPTION_FORCE_DWORD = 0x7fffffff,
}
extern(C) HRESULT IWICBitmapCodecProgressNotification_Remote_RegisterProgressNotification_Proxy(IWICBitmapCodecProgressNotification This, IWICProgressCallback pICallback, DWORD dwProgressFlags);
extern(C) uint LPSAFEARRAY_UserSize(uint* __param__2, uint __param__3, LPSAFEARRAY* __param__4);
extern(C) void HPALETTE_UserFree(uint* __param__5, HPALETTE* __param__6);
extern(C) ubyte* LPSAFEARRAY_UserMarshal(uint* __param__7, ubyte* __param__8, LPSAFEARRAY* __param__9);
extern(C) ubyte* LPSAFEARRAY_UserUnmarshal(uint* __param__10, ubyte* __param__11, LPSAFEARRAY* __param__12);
extern(C) void LPSAFEARRAY_UserFree(uint* __param__13, LPSAFEARRAY* __param__14);
extern(C) ubyte* HPALETTE_UserUnmarshal(uint* __param__15, ubyte* __param__16, HPALETTE* __param__17);
extern(C) uint HPALETTE_UserSize(uint* __param__18, uint __param__19, HPALETTE* __param__20);
extern(C) ubyte* HPALETTE_UserMarshal(uint* __param__21, ubyte* __param__22, HPALETTE* __param__23);
extern(C) ubyte* HICON_UserUnmarshal(uint* __param__24, ubyte* __param__25, HICON* __param__26);
extern(C) void HICON_UserFree(uint* __param__27, HICON* __param__28);
extern(C) ubyte* HICON_UserMarshal(uint* __param__29, ubyte* __param__30, HICON* __param__31);
extern(C) uint WICInProcPointer_UserSize(uint* __param__32, uint __param__33, WICInProcPointer* __param__34);
extern(C) ubyte* WICInProcPointer_UserUnmarshal(uint* __param__35, ubyte* __param__36, WICInProcPointer* __param__37);
extern(C) HRESULT IWICDevelopRaw_QueryRawCapabilitiesInfo_Stub(IWICDevelopRaw This, WICRawCapabilitiesInfo* pInfo);
extern(C) HRESULT IWICDevelopRaw_QueryRawCapabilitiesInfo_Proxy(IWICDevelopRaw This, WICRawCapabilitiesInfo* pInfo);
extern(C) HRESULT IWICDevelopRaw_SetToneCurve_Proxy(IWICDevelopRaw This, UINT cbToneCurveSize, const(WICRawToneCurve)* pToneCurve);
extern(C) HRESULT IWICDevelopRaw_SetToneCurve_Stub(IWICDevelopRaw This, UINT cPoints, const(WICRawToneCurvePoint)* aPoints);
extern(C) ubyte* WICInProcPointer_UserMarshal(uint* __param__38, ubyte* __param__39, WICInProcPointer* __param__40);
extern(C) HRESULT IWICBitmapDecoderInfo_GetPatterns_Stub(IWICBitmapDecoderInfo This, WICBitmapPattern** ppPatterns, UINT* pcPatterns);
extern(C) HRESULT IWICBitmapCodecProgressNotification_RegisterProgressNotification_Stub(IWICBitmapCodecProgressNotification This, IWICProgressCallback pICallback, DWORD dwProgressFlags);
extern(C) HRESULT IWICBitmapDecoderInfo_GetPatterns_Proxy(IWICBitmapDecoderInfo This, UINT cbSizePatterns, WICBitmapPattern* pPatterns, UINT* pcPatterns, UINT* pcbPatternsActual);
extern(C) void WICInProcPointer_UserFree(uint* __param__41, WICInProcPointer* __param__42);
extern(C) HRESULT IWICBitmapCodecProgressNotification_RegisterProgressNotification_Proxy(IWICBitmapCodecProgressNotification This, PFNProgressNotification pfnProgressNotification, LPVOID pvData, DWORD dwProgressFlags);
extern(C) HRESULT IWICDevelopRaw_GetToneCurve_Proxy(IWICDevelopRaw This, UINT cbToneCurveBufferSize, WICRawToneCurve* pToneCurve, UINT* pcbActualToneCurveBufferSize);
extern(C) uint HICON_UserSize(uint* __param__43, uint __param__44, HICON* __param__45);
extern(C) ubyte* HBITMAP_UserUnmarshal(uint* __param__46, ubyte* __param__47, HBITMAP* __param__48);
extern(C) HRESULT WICMapGuidToShortName(ref GUID guid, UINT cchName, WCHAR* wzName, UINT* pcchActual);
extern(C) HRESULT WICCreateBitmapFromSectionEx(UINT width, UINT height, REFWICPixelFormatGUID pixelFormat, HANDLE hSection, UINT stride, UINT offset, WICSectionAccessLevel desiredAccessLevel, IWICBitmap* ppIBitmap);
extern(C) HRESULT WICMapShortNameToGuid(PCWSTR wzName, GUID* pguid);
extern(C) HRESULT WICMapSchemaToName(ref GUID guidMetadataFormat, LPWSTR pwzSchema, UINT cchName, WCHAR* wzName, UINT* pcchActual);
extern(C) HRESULT IWICDevelopRaw_Remote_QueryRawCapabilitiesInfo_Proxy(IWICDevelopRaw This, WICRawCapabilitiesInfo* pInfo);
extern(C) HRESULT WICCreateBitmapFromSection(UINT width, UINT height, REFWICPixelFormatGUID pixelFormat, HANDLE hSection, UINT stride, UINT offset, IWICBitmap* ppIBitmap);
extern(C) void IWICBitmapDecoderInfo_Remote_GetPatterns_Stub(IRpcStubBuffer This, IRpcChannelBuffer _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
extern(C) HRESULT WICConvertBitmapSource(REFWICPixelFormatGUID dstFormat, IWICBitmapSource pISrc, IWICBitmapSource* ppIDst);
extern(C) void IWICBitmapCodecProgressNotification_Remote_RegisterProgressNotification_Stub(IRpcStubBuffer This, IRpcChannelBuffer _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
extern(C) HRESULT IWICBitmapDecoderInfo_Remote_GetPatterns_Proxy(IWICBitmapDecoderInfo This, WICBitmapPattern** ppPatterns, UINT* pcPatterns);
extern(C) void HBITMAP_UserFree(uint* __param__49, HBITMAP* __param__50);
extern(C) void IWICDevelopRaw_Remote_QueryRawCapabilitiesInfo_Stub(IRpcStubBuffer This, IRpcChannelBuffer _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
extern(C) void IWICDevelopRaw_Remote_SetToneCurve_Stub(IRpcStubBuffer This, IRpcChannelBuffer _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
extern(C) void BSTR_UserFree(uint* __param__51, BSTR* __param__52);
extern(C) uint HBITMAP_UserSize(uint* __param__53, uint __param__54, HBITMAP* __param__55);
extern(C) ubyte* HBITMAP_UserMarshal(uint* __param__56, ubyte* __param__57, HBITMAP* __param__58);
extern(C) HRESULT IWICDevelopRaw_Remote_SetToneCurve_Proxy(IWICDevelopRaw This, UINT cPoints, const(WICRawToneCurvePoint)* aPoints);
extern(C) ubyte* BSTR_UserUnmarshal(uint* __param__59, ubyte* __param__60, BSTR* __param__61);
extern(C) uint BSTR_UserSize(uint* __param__62, uint __param__63, BSTR* __param__64);
extern(C) ubyte* BSTR_UserMarshal(uint* __param__65, ubyte* __param__66, BSTR* __param__67);
extern(C) HRESULT IWICDevelopRaw_Remote_GetToneCurve_Proxy(IWICDevelopRaw This, UINT* pcPoints, WICRawToneCurvePoint** paPoints);
extern(C) void IWICDevelopRaw_Remote_GetToneCurve_Stub(IRpcStubBuffer This, IRpcChannelBuffer _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
extern(C) HRESULT IWICDevelopRaw_GetToneCurve_Stub(IWICDevelopRaw This, UINT* pcPoints, WICRawToneCurvePoint** paPoints);
