// This source code was generated by regenerator
module windowskits.d2d1;
import core.sys.windows.unknwn;
import windowskits.guidutil;
import core.sys.windows.windef;
import core.sys.windows.basetsd;
import windowskits.minwindef;
import core.sys.windows.winnt;
import windowskits.dcommon;
import windowskits.dwrite;
import windowskits.wincodec;
import windowskits.dxgiformat;
import windowskits.guiddef;
import core.sys.windows.basetyps;
import windowskits.d2dbasetypes;
import windowskits.dxgitype;
import windowskits.winnt;
import windowskits.windef;
import windowskits.dxgi;
enum D2D1_DEFAULT_FLATTENING_TOLERANCE = ( 0.25f );
interface ID2D1Image: ID2D1Resource
{
    static const iidof = parseGUID("65019f75-8da2-497c-b32c-dfa34e48ede6");
}
interface ID2D1Resource: IUnknown
{
    static const iidof = parseGUID("2cd90691-12e2-11dc-9fed-001143a055f9");
    void GetFactory(ID2D1Factory* factory);
}
interface ID2D1Factory: IUnknown
{
    static const iidof = parseGUID("06152247-6f50-465a-9245-118bfd3b6007");
    HRESULT ReloadSystemMetrics();
    void GetDesktopDpi(FLOAT* dpiX, FLOAT* dpiY);
    HRESULT CreateRectangleGeometry(const(D2D1_RECT_F)* rectangle, ID2D1RectangleGeometry* rectangleGeometry);
    HRESULT CreateRoundedRectangleGeometry(const(D2D1_ROUNDED_RECT)* roundedRectangle, ID2D1RoundedRectangleGeometry* roundedRectangleGeometry);
    HRESULT CreateEllipseGeometry(const(D2D1_ELLIPSE)* ellipse, ID2D1EllipseGeometry* ellipseGeometry);
    HRESULT CreateGeometryGroup(D2D1_FILL_MODE fillMode, ID2D1Geometry* geometries, UINT32 geometriesCount, ID2D1GeometryGroup* geometryGroup);
    HRESULT CreateTransformedGeometry(ID2D1Geometry sourceGeometry, const(D2D1_MATRIX_3X2_F)* transform, ID2D1TransformedGeometry* transformedGeometry);
    HRESULT CreatePathGeometry(ID2D1PathGeometry* pathGeometry);
    HRESULT CreateStrokeStyle(const(D2D1_STROKE_STYLE_PROPERTIES)* strokeStyleProperties, const(FLOAT)* dashes, UINT32 dashesCount, ID2D1StrokeStyle* strokeStyle);
    HRESULT CreateDrawingStateBlock(const(D2D1_DRAWING_STATE_DESCRIPTION)* drawingStateDescription, IDWriteRenderingParams textRenderingParams, ID2D1DrawingStateBlock* drawingStateBlock);
    HRESULT CreateWicBitmapRenderTarget(IWICBitmap target, const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, ID2D1RenderTarget* renderTarget);
    HRESULT CreateHwndRenderTarget(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, const(D2D1_HWND_RENDER_TARGET_PROPERTIES)* hwndRenderTargetProperties, ID2D1HwndRenderTarget* hwndRenderTarget);
    HRESULT CreateDxgiSurfaceRenderTarget(IDXGISurface dxgiSurface, const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, ID2D1RenderTarget* renderTarget);
    HRESULT CreateDCRenderTarget(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, ID2D1DCRenderTarget* dcRenderTarget);
}
alias D2D1_RECT_F = D2D_RECT_F;
interface ID2D1RectangleGeometry: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906a2-12e2-11dc-9fed-001143a055f9");
    void GetRect(D2D1_RECT_F* rect);
}
interface ID2D1Geometry: ID2D1Resource
{
    static const iidof = parseGUID("2cd906a1-12e2-11dc-9fed-001143a055f9");
    HRESULT GetBounds(const(D2D1_MATRIX_3X2_F)* worldTransform, D2D1_RECT_F* bounds);
    HRESULT GetWidenedBounds(FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, D2D1_RECT_F* bounds);
    HRESULT StrokeContainsPoint(D2D1_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, BOOL* contains);
    HRESULT FillContainsPoint(D2D1_POINT_2F point, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, BOOL* contains);
    HRESULT CompareWithGeometry(ID2D1Geometry inputGeometry, const(D2D1_MATRIX_3X2_F)* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation);
    HRESULT Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT Tessellate(const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink tessellationSink);
    HRESULT CombineWithGeometry(ID2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, const(D2D1_MATRIX_3X2_F)* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT Outline(const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT ComputeArea(const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, FLOAT* area);
    HRESULT ComputeLength(const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, FLOAT* length);
    HRESULT ComputePointAtLength(FLOAT length, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, D2D1_POINT_2F* point, D2D1_POINT_2F* unitTangentVector);
    HRESULT Widen(FLOAT strokeWidth, ID2D1StrokeStyle strokeStyle, const(D2D1_MATRIX_3X2_F)* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
}
alias D2D1_MATRIX_3X2_F = D2D_MATRIX_3X2_F;
interface ID2D1StrokeStyle: ID2D1Resource
{
    static const iidof = parseGUID("2cd9069d-12e2-11dc-9fed-001143a055f9");
    D2D1_CAP_STYLE GetStartCap();
    D2D1_CAP_STYLE GetEndCap();
    D2D1_CAP_STYLE GetDashCap();
    FLOAT GetMiterLimit();
    D2D1_LINE_JOIN GetLineJoin();
    FLOAT GetDashOffset();
    D2D1_DASH_STYLE GetDashStyle();
    UINT32 GetDashesCount();
    void GetDashes(FLOAT* dashes, UINT32 dashesCount);
}
enum D2D1_CAP_STYLE
{
    _FLAT = 0x0,
    _SQUARE = 0x1,
    _ROUND = 0x2,
    _TRIANGLE = 0x3,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_LINE_JOIN
{
    _MITER = 0x0,
    _BEVEL = 0x1,
    _ROUND = 0x2,
    _MITER_OR_BEVEL = 0x3,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_DASH_STYLE
{
    _SOLID = 0x0,
    _DASH = 0x1,
    _DOT = 0x2,
    _DASH_DOT = 0x3,
    _DASH_DOT_DOT = 0x4,
    _CUSTOM = 0x5,
    _FORCE_DWORD = 0xffffffff,
}
alias D2D1_POINT_2F = D2D_POINT_2F;
enum D2D1_GEOMETRY_RELATION
{
    _UNKNOWN = 0x0,
    _DISJOINT = 0x1,
    _IS_CONTAINED = 0x2,
    _CONTAINS = 0x3,
    _OVERLAP = 0x4,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
{
    _CUBICS_AND_LINES = 0x0,
    _LINES = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1SimplifiedGeometrySink: IUnknown
{
    static const iidof = parseGUID("2cd9069e-12e2-11dc-9fed-001143a055f9");
    void SetFillMode(D2D1_FILL_MODE fillMode);
    void SetSegmentFlags(D2D1_PATH_SEGMENT vertexFlags);
    void BeginFigure(D2D1_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    void AddLines(const(D2D1_POINT_2F)* points, UINT32 pointsCount);
    void AddBeziers(const(D2D1_BEZIER_SEGMENT)* beziers, UINT32 beziersCount);
    void EndFigure(D2D1_FIGURE_END figureEnd);
    HRESULT Close();
}
enum D2D1_FILL_MODE
{
    _ALTERNATE = 0x0,
    _WINDING = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_PATH_SEGMENT
{
    _NONE = 0x0,
    _FORCE_UNSTROKED = 0x1,
    _FORCE_ROUND_LINE_JOIN = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_FIGURE_BEGIN
{
    _FILLED = 0x0,
    _HOLLOW = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_BEZIER_SEGMENT
{
    D2D1_POINT_2F point1;
    D2D1_POINT_2F point2;
    D2D1_POINT_2F point3;
}
enum D2D1_FIGURE_END
{
    _OPEN = 0x0,
    _CLOSED = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1TessellationSink: IUnknown
{
    static const iidof = parseGUID("2cd906c1-12e2-11dc-9fed-001143a055f9");
    void AddTriangles(const(D2D1_TRIANGLE)* triangles, UINT32 trianglesCount);
    HRESULT Close();
}
struct D2D1_TRIANGLE
{
    D2D1_POINT_2F point1;
    D2D1_POINT_2F point2;
    D2D1_POINT_2F point3;
}
enum D2D1_COMBINE_MODE
{
    _UNION = 0x0,
    _INTERSECT = 0x1,
    _XOR = 0x2,
    _EXCLUDE = 0x3,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_ROUNDED_RECT
{
    D2D1_RECT_F rect;
    FLOAT radiusX;
    FLOAT radiusY;
}
interface ID2D1RoundedRectangleGeometry: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906a3-12e2-11dc-9fed-001143a055f9");
    void GetRoundedRect(D2D1_ROUNDED_RECT* roundedRect);
}
struct D2D1_ELLIPSE
{
    D2D1_POINT_2F point;
    FLOAT radiusX;
    FLOAT radiusY;
}
interface ID2D1EllipseGeometry: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906a4-12e2-11dc-9fed-001143a055f9");
    void GetEllipse(D2D1_ELLIPSE* ellipse);
}
interface ID2D1GeometryGroup: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906a6-12e2-11dc-9fed-001143a055f9");
    D2D1_FILL_MODE GetFillMode();
    UINT32 GetSourceGeometryCount();
    void GetSourceGeometries(ID2D1Geometry* geometries, UINT32 geometriesCount);
}
interface ID2D1TransformedGeometry: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906bb-12e2-11dc-9fed-001143a055f9");
    void GetSourceGeometry(ID2D1Geometry* sourceGeometry);
    void GetTransform(D2D1_MATRIX_3X2_F* transform);
}
interface ID2D1PathGeometry: ID2D1Geometry
{
    static const iidof = parseGUID("2cd906a5-12e2-11dc-9fed-001143a055f9");
    HRESULT Open(ID2D1GeometrySink* geometrySink);
    HRESULT Stream(ID2D1GeometrySink geometrySink);
    HRESULT GetSegmentCount(UINT32* count);
    HRESULT GetFigureCount(UINT32* count);
}
interface ID2D1GeometrySink: ID2D1SimplifiedGeometrySink
{
    static const iidof = parseGUID("2cd9069f-12e2-11dc-9fed-001143a055f9");
    void AddLine(D2D1_POINT_2F point);
    void AddBezier(const(D2D1_BEZIER_SEGMENT)* bezier);
    void AddQuadraticBezier(const(D2D1_QUADRATIC_BEZIER_SEGMENT)* bezier);
    void AddQuadraticBeziers(const(D2D1_QUADRATIC_BEZIER_SEGMENT)* beziers, UINT32 beziersCount);
    void AddArc(const(D2D1_ARC_SEGMENT)* arc);
}
struct D2D1_QUADRATIC_BEZIER_SEGMENT
{
    D2D1_POINT_2F point1;
    D2D1_POINT_2F point2;
}
struct D2D1_ARC_SEGMENT
{
    D2D1_POINT_2F point;
    D2D1_SIZE_F size;
    FLOAT rotationAngle;
    D2D1_SWEEP_DIRECTION sweepDirection;
    D2D1_ARC_SIZE arcSize;
}
alias D2D1_SIZE_F = D2D_SIZE_F;
enum D2D1_SWEEP_DIRECTION
{
    _COUNTER_CLOCKWISE = 0x0,
    _CLOCKWISE = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_ARC_SIZE
{
    _SMALL = 0x0,
    _LARGE = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_STROKE_STYLE_PROPERTIES
{
    D2D1_CAP_STYLE startCap;
    D2D1_CAP_STYLE endCap;
    D2D1_CAP_STYLE dashCap;
    D2D1_LINE_JOIN lineJoin;
    FLOAT miterLimit;
    D2D1_DASH_STYLE dashStyle;
    FLOAT dashOffset;
}
struct D2D1_DRAWING_STATE_DESCRIPTION
{
    D2D1_ANTIALIAS_MODE antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    D2D1_TAG tag1;
    D2D1_TAG tag2;
    D2D1_MATRIX_3X2_F transform;
}
enum D2D1_ANTIALIAS_MODE
{
    _PER_PRIMITIVE = 0x0,
    _ALIASED = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_TEXT_ANTIALIAS_MODE
{
    _DEFAULT = 0x0,
    _CLEARTYPE = 0x1,
    _GRAYSCALE = 0x2,
    _ALIASED = 0x3,
    _FORCE_DWORD = 0xffffffff,
}
alias D2D1_TAG = UINT64;
interface ID2D1DrawingStateBlock: ID2D1Resource
{
    static const iidof = parseGUID("28506e39-ebf6-46a1-bb47-fd85565ab957");
    void GetDescription(D2D1_DRAWING_STATE_DESCRIPTION* stateDescription);
    void SetDescription(const(D2D1_DRAWING_STATE_DESCRIPTION)* stateDescription);
    void SetTextRenderingParams(IDWriteRenderingParams textRenderingParams=null);
    void GetTextRenderingParams(IDWriteRenderingParams* textRenderingParams);
}
struct D2D1_RENDER_TARGET_PROPERTIES
{
    D2D1_RENDER_TARGET_TYPE type;
    D2D1_PIXEL_FORMAT pixelFormat;
    FLOAT dpiX;
    FLOAT dpiY;
    D2D1_RENDER_TARGET_USAGE usage;
    D2D1_FEATURE_LEVEL minLevel;
}
enum D2D1_RENDER_TARGET_TYPE
{
    _DEFAULT = 0x0,
    _SOFTWARE = 0x1,
    _HARDWARE = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_RENDER_TARGET_USAGE
{
    _NONE = 0x0,
    _FORCE_BITMAP_REMOTING = 0x1,
    _GDI_COMPATIBLE = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_FEATURE_LEVEL
{
    _DEFAULT = 0x0,
    _9 = 0x9100,
    _10 = 0xa000,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1RenderTarget: ID2D1Resource
{
    static const iidof = parseGUID("2cd90694-12e2-11dc-9fed-001143a055f9");
    HRESULT CreateBitmap(D2D1_SIZE_U size, const(void)* srcData, UINT32 pitch, const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, ID2D1Bitmap* bitmap);
    HRESULT CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, ID2D1Bitmap* bitmap);
    HRESULT CreateSharedBitmap(ref IID riid, void* data, const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, ID2D1Bitmap* bitmap);
    HRESULT CreateBitmapBrush(ID2D1Bitmap bitmap, const(D2D1_BITMAP_BRUSH_PROPERTIES)* bitmapBrushProperties, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1BitmapBrush* bitmapBrush);
    HRESULT CreateSolidColorBrush(const(D2D1_COLOR_F)* color, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1SolidColorBrush* solidColorBrush);
    HRESULT CreateGradientStopCollection(const(D2D1_GRADIENT_STOP)* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection* gradientStopCollection);
    HRESULT CreateLinearGradientBrush(const(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES)* linearGradientBrushProperties, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1GradientStopCollection gradientStopCollection, ID2D1LinearGradientBrush* linearGradientBrush);
    HRESULT CreateRadialGradientBrush(const(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES)* radialGradientBrushProperties, const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1GradientStopCollection gradientStopCollection, ID2D1RadialGradientBrush* radialGradientBrush);
    HRESULT CreateCompatibleRenderTarget(const(D2D1_SIZE_F)* desiredSize, const(D2D1_SIZE_U)* desiredPixelSize, const(D2D1_PIXEL_FORMAT)* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget* bitmapRenderTarget);
    HRESULT CreateLayer(const(D2D1_SIZE_F)* size, ID2D1Layer* layer);
    HRESULT CreateMesh(ID2D1Mesh* mesh);
    void DrawLine(D2D1_POINT_2F point0, D2D1_POINT_2F point1, ID2D1Brush brush, FLOAT strokeWidth=1.0f, ID2D1StrokeStyle strokeStyle=null);
    void DrawRectangle(const(D2D1_RECT_F)* rect, ID2D1Brush brush, FLOAT strokeWidth=1.0f, ID2D1StrokeStyle strokeStyle=null);
    void FillRectangle(const(D2D1_RECT_F)* rect, ID2D1Brush brush);
    void DrawRoundedRectangle(const(D2D1_ROUNDED_RECT)* roundedRect, ID2D1Brush brush, FLOAT strokeWidth=1.0f, ID2D1StrokeStyle strokeStyle=null);
    void FillRoundedRectangle(const(D2D1_ROUNDED_RECT)* roundedRect, ID2D1Brush brush);
    void DrawEllipse(const(D2D1_ELLIPSE)* ellipse, ID2D1Brush brush, FLOAT strokeWidth=1.0f, ID2D1StrokeStyle strokeStyle=null);
    void FillEllipse(const(D2D1_ELLIPSE)* ellipse, ID2D1Brush brush);
    void DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, FLOAT strokeWidth=1.0f, ID2D1StrokeStyle strokeStyle=null);
    void FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush=null);
    void FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);
    void FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, D2D1_OPACITY_MASK_CONTENT content, const(D2D1_RECT_F)* destinationRectangle=null, const(D2D1_RECT_F)* sourceRectangle=null);
    void DrawBitmap(ID2D1Bitmap bitmap, const(D2D1_RECT_F)* destinationRectangle=null, FLOAT opacity=1.0f, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode=D2D1_BITMAP_INTERPOLATION_MODE._LINEAR, const(D2D1_RECT_F)* sourceRectangle=null);
    void DrawTextA(const(WCHAR)* string, UINT32 stringLength, IDWriteTextFormat textFormat, const(D2D1_RECT_F)* layoutRect, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options=D2D1_DRAW_TEXT_OPTIONS._NONE, DWRITE_MEASURING_MODE measuringMode=DWRITE_MEASURING_MODE._NATURAL);
    void DrawTextLayout(D2D1_POINT_2F origin, IDWriteTextLayout textLayout, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options=D2D1_DRAW_TEXT_OPTIONS._NONE);
    void DrawGlyphRun(D2D1_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode=DWRITE_MEASURING_MODE._NATURAL);
    void SetTransform(const(D2D1_MATRIX_3X2_F)* transform);
    void GetTransform(D2D1_MATRIX_3X2_F* transform);
    void SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    D2D1_ANTIALIAS_MODE GetAntialiasMode();
    void SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);
    D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode();
    void SetTextRenderingParams(IDWriteRenderingParams textRenderingParams=null);
    void GetTextRenderingParams(IDWriteRenderingParams* textRenderingParams);
    void SetTags(D2D1_TAG tag1, D2D1_TAG tag2);
    void GetTags(D2D1_TAG* tag1=null, D2D1_TAG* tag2=null);
    void PushLayer(const(D2D1_LAYER_PARAMETERS)* layerParameters, ID2D1Layer layer);
    void PopLayer();
    HRESULT Flush(D2D1_TAG* tag1=null, D2D1_TAG* tag2=null);
    void SaveDrawingState(ID2D1DrawingStateBlock drawingStateBlock);
    void RestoreDrawingState(ID2D1DrawingStateBlock drawingStateBlock);
    void PushAxisAlignedClip(const(D2D1_RECT_F)* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    void PopAxisAlignedClip();
    void Clear(const(D2D1_COLOR_F)* clearColor=null);
    void BeginDraw();
    HRESULT EndDraw(D2D1_TAG* tag1=null, D2D1_TAG* tag2=null);
    D2D1_PIXEL_FORMAT GetPixelFormat();
    void SetDpi(FLOAT dpiX, FLOAT dpiY);
    void GetDpi(FLOAT* dpiX, FLOAT* dpiY);
    D2D1_SIZE_F GetSize();
    D2D1_SIZE_U GetPixelSize();
    UINT32 GetMaximumBitmapSize();
    BOOL IsSupported(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties);
}
alias D2D1_SIZE_U = D2D_SIZE_U;
struct D2D1_BITMAP_PROPERTIES
{
    D2D1_PIXEL_FORMAT pixelFormat;
    FLOAT dpiX;
    FLOAT dpiY;
}
interface ID2D1Bitmap: ID2D1Image
{
    static const iidof = parseGUID("a2296057-ea42-4099-983b-539fb6505426");
    D2D1_SIZE_F GetSize();
    D2D1_SIZE_U GetPixelSize();
    D2D1_PIXEL_FORMAT GetPixelFormat();
    void GetDpi(FLOAT* dpiX, FLOAT* dpiY);
    HRESULT CopyFromBitmap(const(D2D1_POINT_2U)* destPoint, ID2D1Bitmap bitmap, const(D2D1_RECT_U)* srcRect);
    HRESULT CopyFromRenderTarget(const(D2D1_POINT_2U)* destPoint, ID2D1RenderTarget renderTarget, const(D2D1_RECT_U)* srcRect);
    HRESULT CopyFromMemory(const(D2D1_RECT_U)* dstRect, const(void)* srcData, UINT32 pitch);
}
alias D2D1_POINT_2U = D2D_POINT_2U;
alias D2D1_RECT_U = D2D_RECT_U;
struct D2D1_BITMAP_BRUSH_PROPERTIES
{
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
}
enum D2D1_EXTEND_MODE
{
    _CLAMP = 0x0,
    _WRAP = 0x1,
    _MIRROR = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_BITMAP_INTERPOLATION_MODE
{
    _NEAREST_NEIGHBOR = 0x0,
    _LINEAR = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_BRUSH_PROPERTIES
{
    FLOAT opacity;
    D2D1_MATRIX_3X2_F transform;
}
interface ID2D1BitmapBrush: ID2D1Brush
{
    static const iidof = parseGUID("2cd906aa-12e2-11dc-9fed-001143a055f9");
    void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    void SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE interpolationMode);
    void SetBitmap(ID2D1Bitmap bitmap);
    D2D1_EXTEND_MODE GetExtendModeX();
    D2D1_EXTEND_MODE GetExtendModeY();
    D2D1_BITMAP_INTERPOLATION_MODE GetInterpolationMode();
    void GetBitmap(ID2D1Bitmap* bitmap);
}
interface ID2D1Brush: ID2D1Resource
{
    static const iidof = parseGUID("2cd906a8-12e2-11dc-9fed-001143a055f9");
    void SetOpacity(FLOAT opacity);
    void SetTransform(const(D2D1_MATRIX_3X2_F)* transform);
    FLOAT GetOpacity();
    void GetTransform(D2D1_MATRIX_3X2_F* transform);
}
alias D2D1_COLOR_F = D2D_COLOR_F;
interface ID2D1SolidColorBrush: ID2D1Brush
{
    static const iidof = parseGUID("2cd906a9-12e2-11dc-9fed-001143a055f9");
    void SetColor(const(D2D1_COLOR_F)* color);
    D2D1_COLOR_F GetColor();
}
struct D2D1_GRADIENT_STOP
{
    FLOAT position;
    D2D1_COLOR_F color;
}
enum D2D1_GAMMA
{
    _2_2 = 0x0,
    _1_0 = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1GradientStopCollection: ID2D1Resource
{
    static const iidof = parseGUID("2cd906a7-12e2-11dc-9fed-001143a055f9");
    UINT32 GetGradientStopCount();
    void GetGradientStops(D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount);
    D2D1_GAMMA GetColorInterpolationGamma();
    D2D1_EXTEND_MODE GetExtendMode();
}
struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
{
    D2D1_POINT_2F startPoint;
    D2D1_POINT_2F endPoint;
}
interface ID2D1LinearGradientBrush: ID2D1Brush
{
    static const iidof = parseGUID("2cd906ab-12e2-11dc-9fed-001143a055f9");
    void SetStartPoint(D2D1_POINT_2F startPoint);
    void SetEndPoint(D2D1_POINT_2F endPoint);
    D2D1_POINT_2F GetStartPoint();
    D2D1_POINT_2F GetEndPoint();
    void GetGradientStopCollection(ID2D1GradientStopCollection* gradientStopCollection);
}
struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
{
    D2D1_POINT_2F center;
    D2D1_POINT_2F gradientOriginOffset;
    FLOAT radiusX;
    FLOAT radiusY;
}
interface ID2D1RadialGradientBrush: ID2D1Brush
{
    static const iidof = parseGUID("2cd906ac-12e2-11dc-9fed-001143a055f9");
    void SetCenter(D2D1_POINT_2F center);
    void SetGradientOriginOffset(D2D1_POINT_2F gradientOriginOffset);
    void SetRadiusX(FLOAT radiusX);
    void SetRadiusY(FLOAT radiusY);
    D2D1_POINT_2F GetCenter();
    D2D1_POINT_2F GetGradientOriginOffset();
    FLOAT GetRadiusX();
    FLOAT GetRadiusY();
    void GetGradientStopCollection(ID2D1GradientStopCollection* gradientStopCollection);
}
enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
{
    _NONE = 0x0,
    _GDI_COMPATIBLE = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1BitmapRenderTarget: ID2D1RenderTarget
{
    static const iidof = parseGUID("2cd90695-12e2-11dc-9fed-001143a055f9");
    HRESULT GetBitmap(ID2D1Bitmap* bitmap);
}
interface ID2D1Layer: ID2D1Resource
{
    static const iidof = parseGUID("2cd9069b-12e2-11dc-9fed-001143a055f9");
    D2D1_SIZE_F GetSize();
}
interface ID2D1Mesh: ID2D1Resource
{
    static const iidof = parseGUID("2cd906c2-12e2-11dc-9fed-001143a055f9");
    HRESULT Open(ID2D1TessellationSink* tessellationSink);
}
enum D2D1_OPACITY_MASK_CONTENT
{
    _GRAPHICS = 0x0,
    _TEXT_NATURAL = 0x1,
    _TEXT_GDI_COMPATIBLE = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_DRAW_TEXT_OPTIONS
{
    _NO_SNAP = 0x1,
    _CLIP = 0x2,
    _ENABLE_COLOR_FONT = 0x4,
    _DISABLE_COLOR_BITMAP_SNAPPING = 0x8,
    _NONE = 0x0,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_LAYER_PARAMETERS
{
    D2D1_RECT_F contentBounds;
    ID2D1Geometry geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D1_MATRIX_3X2_F maskTransform;
    FLOAT opacity;
    ID2D1Brush opacityBrush;
    D2D1_LAYER_OPTIONS layerOptions;
}
enum D2D1_LAYER_OPTIONS
{
    _NONE = 0x0,
    _INITIALIZE_FOR_CLEARTYPE = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_HWND_RENDER_TARGET_PROPERTIES
{
    HWND hwnd;
    D2D1_SIZE_U pixelSize;
    D2D1_PRESENT_OPTIONS presentOptions;
}
enum D2D1_PRESENT_OPTIONS
{
    _NONE = 0x0,
    _RETAIN_CONTENTS = 0x1,
    _IMMEDIATELY = 0x2,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1HwndRenderTarget: ID2D1RenderTarget
{
    static const iidof = parseGUID("2cd90698-12e2-11dc-9fed-001143a055f9");
    D2D1_WINDOW_STATE CheckWindowState();
    HRESULT Resize(const(D2D1_SIZE_U)* pixelSize);
    HWND GetHwnd();
}
enum D2D1_WINDOW_STATE
{
    _NONE = 0x0,
    _OCCLUDED = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
interface ID2D1DCRenderTarget: ID2D1RenderTarget
{
    static const iidof = parseGUID("1c51bc64-de61-46fd-9899-63a5d8f03950");
    HRESULT BindDC(const(HDC) hDC, const(RECT)* pSubRect);
}
enum 
{
    _NEAREST_NEIGHBOR = 0x0,
    _LINEAR = 0x1,
    _CUBIC = 0x2,
    _MULTI_SAMPLE_LINEAR = 0x3,
    _ANISOTROPIC = 0x4,
    _HIGH_QUALITY_CUBIC = 0x5,
    _FANT = 0x6,
    _MIPMAP_LINEAR = 0x7,
}
enum D2D1_DC_INITIALIZE_MODE
{
    _COPY = 0x0,
    _CLEAR = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_DEBUG_LEVEL
{
    _NONE = 0x0,
    _ERROR = 0x1,
    _WARNING = 0x2,
    _INFORMATION = 0x3,
    _FORCE_DWORD = 0xffffffff,
}
enum D2D1_FACTORY_TYPE
{
    _SINGLE_THREADED = 0x0,
    _MULTI_THREADED = 0x1,
    _FORCE_DWORD = 0xffffffff,
}
struct D2D1_FACTORY_OPTIONS
{
    D2D1_DEBUG_LEVEL debugLevel;
}
interface ID2D1GdiInteropRenderTarget: IUnknown
{
    static const iidof = parseGUID("e0db51c3-6f77-4bae-b3d5-e47509b35838");
    HRESULT GetDC(D2D1_DC_INITIALIZE_MODE mode, HDC* hdc);
    HRESULT ReleaseDC(const(RECT)* update);
}
extern(C) HRESULT D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType, ref IID riid, const(D2D1_FACTORY_OPTIONS)* pFactoryOptions, void** ppIFactory);
extern(C) BOOL D2D1IsMatrixInvertible(const(D2D1_MATRIX_3X2_F)* matrix);
extern(C) void D2D1MakeSkewMatrix(FLOAT angleX, FLOAT angleY, D2D1_POINT_2F center, D2D1_MATRIX_3X2_F* matrix);
extern(C) void D2D1MakeRotateMatrix(FLOAT angle, D2D1_POINT_2F center, D2D1_MATRIX_3X2_F* matrix);
extern(C) BOOL D2D1InvertMatrix(D2D1_MATRIX_3X2_F* matrix);
